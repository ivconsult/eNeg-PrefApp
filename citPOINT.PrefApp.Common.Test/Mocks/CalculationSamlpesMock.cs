
#region → Usings   .
using citPOINT.PrefApp.Common;
using System.Linq;
using System.Text;
using System;
using System.Collections.Generic;
using citPOINT.PrefApp.Data.Web;
#endregion

#region → History  .
/* Date           User            Change
 * 
 * 18.07.11      M.Wahab        → creation
 * Generated By Eno Generator - Mohamedenew@hotmail.com
 */

# endregion

#region → ToDos    .

/*
 * Date         set by User     Description
 * 
 * 
*/

# endregion

namespace citPOINT.PrefApp.Common.Test
{
    /// <summary>
    /// Mock for data base
    /// </summary>
    public class CalculationSamlpesMock : IEngineProvider
    {
        #region → Fields        .
        private List<IssueType> mIssueTypeSource;
        private List<MainPreferenceSet> mMainPreferenceSetSource;
        private List<ActionType> mActionTypeSource;
        private List<History> mHistorySource;
        private List<PreferenceSet> mPreferenceSetSource;
        private List<Issue> mIssueSource;
        private List<PreferenceSetNeg> mPreferenceSetNegSource;
        private List<LaterRatedIssue> mLaterRatedIssueSource;
        private List<NegConversation> mNegConversationSource;
        private List<NumericIssue> mNumericIssueSource;
        private List<OptionIssue> mOptionIssueSource;
        private List<ConversationMessage> mConversationMessageSource;
        private List<MessageIssue> mMessageIssueSource;
        private List<MessageLaterRatedIssue> mMessageLaterRatedIssueSource;
        private List<MessageOptionIssue> mMessageOptionIssueSource;

        #endregion

        #region → Properties    .

        /// <summary>
        /// Determines whether the specified preference set is checkvariation.
        /// </summary>
        /// <param name="preferenceSetID">The preference set ID.</param>
        /// <returns>
        /// 	<c>true</c> if the specified preference set is checkvariation; otherwise, <c>false</c>.
        /// </returns>
        public bool IsCheckvariation(Guid preferenceSetID)
        {
            return true;
        }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is server side.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is server side; otherwise, <c>false</c>.
        /// </value>
        public bool IsServerSide
        {
            get { return true; }
        }

        /// <summary>
        /// Gets the IssueType source.
        /// </summary>
        /// <value>The IssueType source.</value>
        public List<IssueType> IssueTypeSource
        {
            get
            {
                if (mIssueTypeSource == null)
                {
                    mIssueTypeSource = new List<IssueType>();
                    mIssueTypeSource.Add(new IssueType()
                    {
                        IssueTypeID = Guid.Parse("00000000-0000-0000-0000-000000000000"),
                        IssueTypeName = @"Select One",
                    });
                    mIssueTypeSource.Add(new IssueType()
                    {
                        IssueTypeID = Guid.Parse("6025fbd2-c4eb-474d-834f-4818bde8e4eb"),
                        IssueTypeName = @"Numeric",
                    });
                    mIssueTypeSource.Add(new IssueType()
                    {
                        IssueTypeID = Guid.Parse("6125fbd2-c4eb-474d-834f-4818bde8e4eb"),
                        IssueTypeName = @"Options",
                    });
                    mIssueTypeSource.Add(new IssueType()
                    {
                        IssueTypeID = Guid.Parse("6225fbd2-c4eb-474d-834f-4818bde8e4eb"),
                        IssueTypeName = @"Later Rated",
                    });
                    mIssueTypeSource.Add(new IssueType()
                    {
                        IssueTypeID = Guid.Parse("6325fbd2-c4eb-474d-834f-4818bde8e4eb"),
                        IssueTypeName = @"Not Rated",
                    });
                } return mIssueTypeSource;
            }
        }

        /// <summary>
        /// Gets the MainPreferenceSet source.
        /// </summary>
        /// <value>The MainPreferenceSet source.</value>
        public List<MainPreferenceSet> MainPreferenceSetSource
        {
            get
            {
                if (mMainPreferenceSetSource == null)
                {
                    mMainPreferenceSetSource = new List<MainPreferenceSet>();
                    mMainPreferenceSetSource.Add(new MainPreferenceSet()
                    {
                        MainPreferenceSetID = Guid.Parse("dc0981bd-0164-4042-a313-5d79cff5211c"),
                        MainPreferenceSetName = @"Set Store",
                    });
                    mMainPreferenceSetSource.Add(new MainPreferenceSet()
                    {
                        MainPreferenceSetID = Guid.Parse("72f5566e-3bf5-46e6-9406-b13e80f83bcc"),
                        MainPreferenceSetName = @"My Sets",
                    });
                    mMainPreferenceSetSource.Add(new MainPreferenceSet()
                    {
                        MainPreferenceSetID = Guid.Parse("78ac5cf7-a5ab-4377-b9f9-d105f462c26e"),
                        MainPreferenceSetName = @"Organization Sets",
                    });
                } return mMainPreferenceSetSource;
            }
        }

        /// <summary>
        /// Gets the ActionType source.
        /// </summary>
        /// <value>The ActionType source.</value>
        public List<ActionType> ActionTypeSource
        {
            get
            {
                if (mActionTypeSource == null)
                {
                    mActionTypeSource = new List<ActionType>();
                } return mActionTypeSource;
            }
        }

        /// <summary>
        /// Gets the History source.
        /// </summary>
        /// <value>The History source.</value>
        public List<History> HistorySource
        {
            get
            {
                if (mHistorySource == null)
                {
                    mHistorySource = new List<History>();
                } return mHistorySource;
            }
        }

        /// <summary>
        /// Gets the PreferenceSet source.
        /// </summary>
        /// <value>The PreferenceSet source.</value>
        public List<PreferenceSet> PreferenceSetSource
        {
            get
            {
                if (mPreferenceSetSource == null)
                {
                    mPreferenceSetSource = new List<PreferenceSet>();
                    mPreferenceSetSource.Add(new PreferenceSet()
                    {
                        PreferenceSetID = Guid.Parse("4096b0c4-5d35-4b81-8b40-bb42a147a62c"),
                        PreferenceSetName = @"Purchase A Car",
                        UserID = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        MainPreferenceSetID = Guid.Parse("72f5566e-3bf5-46e6-9406-b13e80f83bcc"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 49, 0),
                    });
                } return mPreferenceSetSource;
            }
        }

        /// <summary>
        /// Gets the Issue source.
        /// </summary>
        /// <value>The Issue source.</value>
        public List<Issue> IssueSource
        {
            get
            {
                if (mIssueSource == null)
                {
                    mIssueSource = new List<Issue>();
                    mIssueSource.Add(new Issue()
                    {
                        IssueID = Guid.Parse("062cdfca-fa0d-4808-9a62-0ec79bbc9563"),
                        IssueName = @"Price",
                        PreferenceSetID = Guid.Parse("4096b0c4-5d35-4b81-8b40-bb42a147a62c"),
                        IssueTypeID = Guid.Parse("6025fbd2-c4eb-474d-834f-4818bde8e4eb"),
                        IssueWeight = 20.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 49, 14),
                    });
                    mIssueSource.Add(new Issue()
                    {
                        IssueID = Guid.Parse("978089c0-1046-4785-a8a0-416a0e4a5ac8"),
                        IssueName = @"Address",
                        PreferenceSetID = Guid.Parse("4096b0c4-5d35-4b81-8b40-bb42a147a62c"),
                        IssueTypeID = Guid.Parse("6325fbd2-c4eb-474d-834f-4818bde8e4eb"),
                        IssueWeight = 0.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 50, 9),
                    });
                    mIssueSource.Add(new Issue()
                    {
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        IssueName = @"Colour",
                        PreferenceSetID = Guid.Parse("4096b0c4-5d35-4b81-8b40-bb42a147a62c"),
                        IssueTypeID = Guid.Parse("6125fbd2-c4eb-474d-834f-4818bde8e4eb"),
                        IssueWeight = 50.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 49, 24),
                    });
                    mIssueSource.Add(new Issue()
                    {
                        IssueID = Guid.Parse("f67a0ba2-8a88-4034-b31d-93678ca658dd"),
                        IssueName = @"Model",
                        PreferenceSetID = Guid.Parse("4096b0c4-5d35-4b81-8b40-bb42a147a62c"),
                        IssueTypeID = Guid.Parse("6225fbd2-c4eb-474d-834f-4818bde8e4eb"),
                        IssueWeight = 30.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 49, 35),
                    });
                } return mIssueSource;
            }
        }

        /// <summary>
        /// Gets the PreferenceSetNeg source.
        /// </summary>
        /// <value>The PreferenceSetNeg source.</value>
        public List<PreferenceSetNeg> PreferenceSetNegSource
        {
            get
            {
                if (mPreferenceSetNegSource == null)
                {
                    mPreferenceSetNegSource = new List<PreferenceSetNeg>();
                    mPreferenceSetNegSource.Add(new PreferenceSetNeg()
                    {
                        PreferenceSetNegID = Guid.Parse("9ea38676-10e3-4985-9289-ffd0e529fc51"),
                        NegID = Guid.Parse("bd4df379-c6e6-49bf-8461-acd7f71e6712"),
                        Percentage = 0.00M,
                        PreferenceSetID = Guid.Parse("4096b0c4-5d35-4b81-8b40-bb42a147a62c"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 33, 55),
                    });
                } return mPreferenceSetNegSource;
            }
        }

        /// <summary>
        /// Gets the LaterRatedIssue source.
        /// </summary>
        /// <value>The LaterRatedIssue source.</value>
        public List<LaterRatedIssue> LaterRatedIssueSource
        {
            get
            {
                if (mLaterRatedIssueSource == null)
                {
                    mLaterRatedIssueSource = new List<LaterRatedIssue>();
                    mLaterRatedIssueSource.Add(new LaterRatedIssue()
                    {
                        LaterRatedIssueID = Guid.Parse("378978e2-ffd0-4b75-b769-19f6cf3011ef"),
                        LaterRatedIssueValue = @"BMW",
                        IssueID = Guid.Parse("f67a0ba2-8a88-4034-b31d-93678ca658dd"),
                        LaterRatedIssueWeight = 60.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 37, 24),
                    });
                    mLaterRatedIssueSource.Add(new LaterRatedIssue()
                    {
                        LaterRatedIssueID = Guid.Parse("e49284e6-09d2-48c4-bc76-c36bdde8059f"),
                        LaterRatedIssueValue = @"Mercedes",
                        IssueID = Guid.Parse("f67a0ba2-8a88-4034-b31d-93678ca658dd"),
                        LaterRatedIssueWeight = 100.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 37, 45),
                    });
                } return mLaterRatedIssueSource;
            }
        }

        /// <summary>
        /// Gets the NegConversation source.
        /// </summary>
        /// <value>The NegConversation source.</value>
        public List<NegConversation> NegConversationSource
        {
            get
            {
                if (mNegConversationSource == null)
                {
                    mNegConversationSource = new List<NegConversation>();
                    mNegConversationSource.Add(new NegConversation()
                    {
                        NegConversationID = Guid.Parse("7a9eb6fa-20fd-4a26-9ba0-45d007979802"),
                        ConversationID = Guid.Parse("360324cd-82ad-4905-94b8-5e3e9ac09ac7"),
                        Percentage = 0.00M,
                        PreferenceSetNegID = Guid.Parse("9ea38676-10e3-4985-9289-ffd0e529fc51"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 33, 56),
                    });
                    mNegConversationSource.Add(new NegConversation()
                    {
                        NegConversationID = Guid.Parse("ef3c9f1c-3315-4cff-af2c-7f8c05fd8395"),
                        ConversationID = Guid.Parse("a30f807c-2012-4e0e-b1f4-6e4aa80de137"),
                        Percentage = 0.00M,
                        PreferenceSetNegID = Guid.Parse("9ea38676-10e3-4985-9289-ffd0e529fc51"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 33, 56),
                    });
                } return mNegConversationSource;
            }
        }

        /// <summary>
        /// Gets the NumericIssue source.
        /// </summary>
        /// <value>The NumericIssue source.</value>
        public List<NumericIssue> NumericIssueSource
        {
            get
            {
                if (mNumericIssueSource == null)
                {
                    mNumericIssueSource = new List<NumericIssue>();
                    mNumericIssueSource.Add(new NumericIssue()
                    {
                        NumericIssueID = Guid.Parse("1891c79a-6030-4093-a769-73c2580d98a1"),
                        IssueID = Guid.Parse("062cdfca-fa0d-4808-9a62-0ec79bbc9563"),
                        MinimumValue = 9000.00M,
                        MaximumValue = 15000.00M,
                        OptimumValueStart = 9000.00M,
                        OptimumValueEnd = 9000.00M,
                        MinimumOperator = 2,
                        MaximumOperator = 1,
                        Unit = @"€-(EUR)",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 49, 19),
                    });
                } return mNumericIssueSource;
            }
        }

        /// <summary>
        /// Gets the OptionIssue source.
        /// </summary>
        /// <value>The OptionIssue source.</value>
        public List<OptionIssue> OptionIssueSource
        {
            get
            {
                if (mOptionIssueSource == null)
                {
                    mOptionIssueSource = new List<OptionIssue>();
                    mOptionIssueSource.Add(new OptionIssue()
                    {
                        OptionIssueID = Guid.Parse("9115cdbb-425c-45a6-94f5-adbff3d68d3f"),
                        OptionIssueValue = @"Green",
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        OptionIssueWeight = 30.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 50, 43),
                    });
                    mOptionIssueSource.Add(new OptionIssue()
                    {
                        OptionIssueID = Guid.Parse("9a7ac3f0-12cf-4a90-b3da-da736c130f8f"),
                        OptionIssueValue = @"Red",
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        OptionIssueWeight = 100.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 50, 33),
                    });
                    mOptionIssueSource.Add(new OptionIssue()
                    {
                        OptionIssueID = Guid.Parse("44ecf90e-56c2-41b2-ada7-e79e1935db0b"),
                        OptionIssueValue = @"Blue",
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        OptionIssueWeight = 60.00M,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 11, 50, 37),
                    });
                } return mOptionIssueSource;
            }
        }

        /// <summary>
        /// Gets the ConversationMessage source.
        /// </summary>
        /// <value>The ConversationMessage source.</value>
        public List<ConversationMessage> ConversationMessageSource
        {
            get
            {
                if (mConversationMessageSource == null)
                {
                    mConversationMessageSource = new List<ConversationMessage>();
                    mConversationMessageSource.Add(new ConversationMessage()
                    {
                        ConversationMessageID = Guid.Parse("2e8a1f66-b77a-4bc4-86d6-049205013a67"),
                        MessageID = Guid.Parse("8b5a924f-978b-453f-9b1f-19fff58bd904"),
                        Percentage = 0.00M,
                        NegConversationID = Guid.Parse("7a9eb6fa-20fd-4a26-9ba0-45d007979802"),
                        IsSent = true,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 33, 19),
                        RatedDate = new DateTime(2011, 7, 18, 12, 33, 19),
                    });
                    mConversationMessageSource.Add(new ConversationMessage()
                    {
                        ConversationMessageID = Guid.Parse("d300213a-fe56-4f4c-a870-1bd6037733a7"),
                        MessageID = Guid.Parse("7a44aaf5-c3c9-4271-b185-02eaeba37bb6"),
                        Percentage = 0.00M,
                        NegConversationID = Guid.Parse("7a9eb6fa-20fd-4a26-9ba0-45d007979802"),
                        IsSent = false,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 32, 53),
                        RatedDate = null,
                    });
                    mConversationMessageSource.Add(new ConversationMessage()
                    {
                        ConversationMessageID = Guid.Parse("d6a7372a-3ba3-4295-b117-266e6592412d"),
                        MessageID = Guid.Parse("c7f80cfc-978d-417d-8a6d-651af75a97e8"),
                        Percentage = 0.00M,
                        NegConversationID = Guid.Parse("ef3c9f1c-3315-4cff-af2c-7f8c05fd8395"),
                        IsSent = false,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 32, 16),
                        RatedDate = new DateTime(2011, 7, 18, 12, 32, 16),
                    });
                    mConversationMessageSource.Add(new ConversationMessage()
                    {
                        ConversationMessageID = Guid.Parse("af2d0840-da0b-45e0-8f26-586eea1a1b14"),
                        MessageID = Guid.Parse("4f6b454e-c585-45b6-940c-4e715a0b9a4b"),
                        Percentage = 0.00M,
                        NegConversationID = Guid.Parse("ef3c9f1c-3315-4cff-af2c-7f8c05fd8395"),
                        IsSent = false,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 31, 28),
                        RatedDate = new DateTime(2011, 7, 18, 12, 31, 28),
                    });
                    mConversationMessageSource.Add(new ConversationMessage()
                    {
                        ConversationMessageID = Guid.Parse("f95101d5-716b-42f1-9240-a10710b9dc56"),
                        MessageID = Guid.Parse("9b9964fc-5d6e-449c-89e0-e32b5fe6c5f8"),
                        Percentage = 0.00M,
                        NegConversationID = Guid.Parse("ef3c9f1c-3315-4cff-af2c-7f8c05fd8395"),
                        IsSent = true,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 32, 3),
                        RatedDate = new DateTime(2011, 7, 18, 12, 32, 3),
                    });
                    mConversationMessageSource.Add(new ConversationMessage()
                    {
                        ConversationMessageID = Guid.Parse("98da6bc8-6dea-460f-9fca-b8df9e8c52ef"),
                        MessageID = Guid.Parse("32abe73a-dfeb-4305-9be7-99d27bea914b"),
                        Percentage = 0.00M,
                        NegConversationID = Guid.Parse("ef3c9f1c-3315-4cff-af2c-7f8c05fd8395"),
                        IsSent = true,
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 19, 12, 32, 28),
                        RatedDate = new DateTime(2011, 7, 19, 12, 32, 28),
                    });
                } return mConversationMessageSource;
            }
        }

        /// <summary>
        /// Gets the MessageIssue source.
        /// </summary>
        /// <value>The MessageIssue source.</value>
        public List<MessageIssue> MessageIssueSource
        {
            get
            {
                if (mMessageIssueSource == null)
                {
                    mMessageIssueSource = new List<MessageIssue>();
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("defef80b-cf6e-4ee5-b72d-06d02392388f"),
                        ConversationMessageID = Guid.Parse("af2d0840-da0b-45e0-8f26-586eea1a1b14"),
                        IssueID = Guid.Parse("f67a0ba2-8a88-4034-b31d-93678ca658dd"),
                        Score = 0M,
                        Value = @"Mercedes",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 44),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("bb53213f-0ee4-4632-8d6d-143a5f019056"),
                        ConversationMessageID = Guid.Parse("d6a7372a-3ba3-4295-b117-266e6592412d"),
                        IssueID = Guid.Parse("f67a0ba2-8a88-4034-b31d-93678ca658dd"),
                        Score = 0M,
                        Value = @"BMW",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 37, 43),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("6f004bda-2cbe-4dad-8728-1f2f97f33f4f"),
                        ConversationMessageID = Guid.Parse("af2d0840-da0b-45e0-8f26-586eea1a1b14"),
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        Score = 0M,
                        Value = @"Red",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 43),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("c0887f67-9d85-4789-8482-30f61eefe970"),
                        ConversationMessageID = Guid.Parse("af2d0840-da0b-45e0-8f26-586eea1a1b14"),
                        IssueID = Guid.Parse("978089c0-1046-4785-a8a0-416a0e4a5ac8"),
                        Score = 0M,
                        Value = @"100",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 46),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("2a5eaf22-201f-438e-9a66-5ebe19c2e127"),
                        ConversationMessageID = Guid.Parse("2e8a1f66-b77a-4bc4-86d6-049205013a67"),
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        Score = 0M,
                        Value = @"Green",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 36),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("016cd834-dd90-48ef-82a0-615bfc3d404b"),
                        ConversationMessageID = Guid.Parse("98da6bc8-6dea-460f-9fca-b8df9e8c52ef"),
                        IssueID = Guid.Parse("062cdfca-fa0d-4808-9a62-0ec79bbc9563"),
                        Score = 0M,
                        Value = @"10000.00",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 57),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("c70e04a9-d7b1-4a20-a57e-6dc681d7f8c4"),
                        ConversationMessageID = Guid.Parse("f95101d5-716b-42f1-9240-a10710b9dc56"),
                        IssueID = Guid.Parse("062cdfca-fa0d-4808-9a62-0ec79bbc9563"),
                        Score = 0M,
                        Value = @"40.00",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 23),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("f977e495-8dde-42ae-87a1-730528fffca0"),
                        ConversationMessageID = Guid.Parse("f95101d5-716b-42f1-9240-a10710b9dc56"),
                        IssueID = Guid.Parse("f67a0ba2-8a88-4034-b31d-93678ca658dd"),
                        Score = 0M,
                        Value = @"BMW,Mercedes",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 25),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("f04c9436-7283-4636-a1c1-7c77620ec4e1"),
                        ConversationMessageID = Guid.Parse("d6a7372a-3ba3-4295-b117-266e6592412d"),
                        IssueID = Guid.Parse("062cdfca-fa0d-4808-9a62-0ec79bbc9563"),
                        Score = 0M,
                        Value = @"10000.00",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 2),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("a1b9b9f2-db2a-45b8-be6c-831ca02b5e8d"),
                        ConversationMessageID = Guid.Parse("d6a7372a-3ba3-4295-b117-266e6592412d"),
                        IssueID = Guid.Parse("978089c0-1046-4785-a8a0-416a0e4a5ac8"),
                        Score = 0M,
                        Value = @"Egypt-Astrian",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 15),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("88999203-f113-486e-98e1-9267c91ee03b"),
                        ConversationMessageID = Guid.Parse("d6a7372a-3ba3-4295-b117-266e6592412d"),
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        Score = 0M,
                        Value = @"Blue,Red,Green",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 15),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("fa0b03cb-3e59-45a5-8349-a6988777aae9"),
                        ConversationMessageID = Guid.Parse("98da6bc8-6dea-460f-9fca-b8df9e8c52ef"),
                        IssueID = Guid.Parse("f67a0ba2-8a88-4034-b31d-93678ca658dd"),
                        Score = 0M,
                        Value = @"Mercedes",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 0),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("bd4b2f9c-ebf4-46b3-8da6-bfd1e4a9de0a"),
                        ConversationMessageID = Guid.Parse("f95101d5-716b-42f1-9240-a10710b9dc56"),
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        Score = 0M,
                        Value = @"Green,Red",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 23),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("f49429d9-46c2-4b5c-a59b-d0b031b7eaef"),
                        ConversationMessageID = Guid.Parse("98da6bc8-6dea-460f-9fca-b8df9e8c52ef"),
                        IssueID = Guid.Parse("ad99de80-60d7-4847-950a-8ca049cfc7c4"),
                        Score = 0M,
                        Value = @"Green",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 57),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("85a55dd7-ab01-446c-a4e8-fa5a8d740682"),
                        ConversationMessageID = Guid.Parse("98da6bc8-6dea-460f-9fca-b8df9e8c52ef"),
                        IssueID = Guid.Parse("978089c0-1046-4785-a8a0-416a0e4a5ac8"),
                        Score = 0M,
                        Value = @"Green,10,000-Mercedes",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 16),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("8beff8ac-53f8-49d6-bbdb-fdffcdfb3f4a"),
                        ConversationMessageID = Guid.Parse("f95101d5-716b-42f1-9240-a10710b9dc56"),
                        IssueID = Guid.Parse("978089c0-1046-4785-a8a0-416a0e4a5ac8"),
                        Score = 0M,
                        Value = @"400",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 28),
                    });
                    mMessageIssueSource.Add(new MessageIssue()
                    {
                        MessageIssueID = Guid.Parse("9bcb80f6-9b54-41b1-a421-fead4876e5e9"),
                        ConversationMessageID = Guid.Parse("af2d0840-da0b-45e0-8f26-586eea1a1b14"),
                        IssueID = Guid.Parse("062cdfca-fa0d-4808-9a62-0ec79bbc9563"),
                        Score = 0M,
                        Value = @"14000.00",
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 43),
                    });
                } return mMessageIssueSource;
            }
        }

        /// <summary>
        /// Gets the MessageLaterRatedIssue source.
        /// </summary>
        /// <value>The MessageLaterRatedIssue source.</value>
        public List<MessageLaterRatedIssue> MessageLaterRatedIssueSource
        {
            get
            {
                if (mMessageLaterRatedIssueSource == null)
                {
                    mMessageLaterRatedIssueSource = new List<MessageLaterRatedIssue>();
                    mMessageLaterRatedIssueSource.Add(new MessageLaterRatedIssue()
                    {
                        MessageLaterRatedIssueID = Guid.Parse("13846262-0dac-46a9-aa1d-0c725d30f448"),
                        MessageIssueID = Guid.Parse("defef80b-cf6e-4ee5-b72d-06d02392388f"),
                        LaterRatedIssueID = Guid.Parse("e49284e6-09d2-48c4-bc76-c36bdde8059f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 44),
                    });
                    mMessageLaterRatedIssueSource.Add(new MessageLaterRatedIssue()
                    {
                        MessageLaterRatedIssueID = Guid.Parse("02ad1470-926c-47e0-ab02-48675a15f774"),
                        MessageIssueID = Guid.Parse("fa0b03cb-3e59-45a5-8349-a6988777aae9"),
                        LaterRatedIssueID = Guid.Parse("e49284e6-09d2-48c4-bc76-c36bdde8059f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 0),
                    });
                    mMessageLaterRatedIssueSource.Add(new MessageLaterRatedIssue()
                    {
                        MessageLaterRatedIssueID = Guid.Parse("c52ee395-3705-45fc-bfc5-5e9338c22b74"),
                        MessageIssueID = Guid.Parse("bb53213f-0ee4-4632-8d6d-143a5f019056"),
                        LaterRatedIssueID = Guid.Parse("378978e2-ffd0-4b75-b769-19f6cf3011ef"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 37, 43),
                    });
                    mMessageLaterRatedIssueSource.Add(new MessageLaterRatedIssue()
                    {
                        MessageLaterRatedIssueID = Guid.Parse("adc9b80b-3bfd-4fae-8626-9f93172b3639"),
                        MessageIssueID = Guid.Parse("f977e495-8dde-42ae-87a1-730528fffca0"),
                        LaterRatedIssueID = Guid.Parse("e49284e6-09d2-48c4-bc76-c36bdde8059f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 25),
                    });
                    mMessageLaterRatedIssueSource.Add(new MessageLaterRatedIssue()
                    {
                        MessageLaterRatedIssueID = Guid.Parse("1100e149-e300-489f-be96-cf5ab62e1e7c"),
                        MessageIssueID = Guid.Parse("f977e495-8dde-42ae-87a1-730528fffca0"),
                        LaterRatedIssueID = Guid.Parse("378978e2-ffd0-4b75-b769-19f6cf3011ef"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 25),
                    });
                } return mMessageLaterRatedIssueSource;
            }
        }

        /// <summary>
        /// Gets the MessageOptionIssue source.
        /// </summary>
        /// <value>The MessageOptionIssue source.</value>
        public List<MessageOptionIssue> MessageOptionIssueSource
        {
            get
            {
                if (mMessageOptionIssueSource == null)
                {
                    mMessageOptionIssueSource = new List<MessageOptionIssue>();
                    mMessageOptionIssueSource.Add(new MessageOptionIssue()
                    {
                        MessageOptionIssueID = Guid.Parse("020db495-6f26-4667-87a5-2ac8fc51d9b2"),
                        MessageIssueID = Guid.Parse("bd4b2f9c-ebf4-46b3-8da6-bfd1e4a9de0a"),
                        OptionIssueID = Guid.Parse("9a7ac3f0-12cf-4a90-b3da-da736c130f8f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 24),
                    });
                    mMessageOptionIssueSource.Add(new MessageOptionIssue()
                    {
                        MessageOptionIssueID = Guid.Parse("98ae075f-05cb-4e70-9b74-32d29de96b28"),
                        MessageIssueID = Guid.Parse("2a5eaf22-201f-438e-9a66-5ebe19c2e127"),
                        OptionIssueID = Guid.Parse("9115cdbb-425c-45a6-94f5-adbff3d68d3f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 36),
                    });
                    mMessageOptionIssueSource.Add(new MessageOptionIssue()
                    {
                        MessageOptionIssueID = Guid.Parse("b28a0684-170a-4a3a-8817-3a200020cd40"),
                        MessageIssueID = Guid.Parse("6f004bda-2cbe-4dad-8728-1f2f97f33f4f"),
                        OptionIssueID = Guid.Parse("9a7ac3f0-12cf-4a90-b3da-da736c130f8f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 43),
                    });
                    mMessageOptionIssueSource.Add(new MessageOptionIssue()
                    {
                        MessageOptionIssueID = Guid.Parse("1f5ab41b-08fc-4294-bb6a-593e995fe717"),
                        MessageIssueID = Guid.Parse("88999203-f113-486e-98e1-9267c91ee03b"),
                        OptionIssueID = Guid.Parse("44ecf90e-56c2-41b2-ada7-e79e1935db0b"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 17),
                    });
                    mMessageOptionIssueSource.Add(new MessageOptionIssue()
                    {
                        MessageOptionIssueID = Guid.Parse("f175460d-640b-4ae6-b3dd-7616c8500907"),
                        MessageIssueID = Guid.Parse("88999203-f113-486e-98e1-9267c91ee03b"),
                        OptionIssueID = Guid.Parse("9115cdbb-425c-45a6-94f5-adbff3d68d3f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 22),
                    });
                    mMessageOptionIssueSource.Add(new MessageOptionIssue()
                    {
                        MessageOptionIssueID = Guid.Parse("31993025-5c1b-4db0-b0e1-8cc9b137e298"),
                        MessageIssueID = Guid.Parse("bd4b2f9c-ebf4-46b3-8da6-bfd1e4a9de0a"),
                        OptionIssueID = Guid.Parse("9115cdbb-425c-45a6-94f5-adbff3d68d3f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 40, 23),
                    });
                    mMessageOptionIssueSource.Add(new MessageOptionIssue()
                    {
                        MessageOptionIssueID = Guid.Parse("7eecf62c-ca1c-4806-b024-b470dad2357d"),
                        MessageIssueID = Guid.Parse("f49429d9-46c2-4b5c-a59b-d0b031b7eaef"),
                        OptionIssueID = Guid.Parse("9115cdbb-425c-45a6-94f5-adbff3d68d3f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 57),
                    });
                    mMessageOptionIssueSource.Add(new MessageOptionIssue()
                    {
                        MessageOptionIssueID = Guid.Parse("2556c72a-9b88-4437-9aa6-c51ea7f93af8"),
                        MessageIssueID = Guid.Parse("88999203-f113-486e-98e1-9267c91ee03b"),
                        OptionIssueID = Guid.Parse("9a7ac3f0-12cf-4a90-b3da-da736c130f8f"),
                        Deleted = false,
                        DeletedBy = Guid.Parse("12d161b8-11aa-4384-86a2-c7bb6b6362ee"),
                        DeletedOn = new DateTime(2011, 7, 18, 12, 39, 19),
                    });
                } return mMessageOptionIssueSource;
            }
        }

        #endregion

        #region → Constructor   .

        /// <summary>
        /// Initializes a new instance of the <see cref=\"CalculationSamlpesMock\"/> class.
        /// </summary>
        public CalculationSamlpesMock(object context=null)
        {
            this.ManageTablesRelations();
        }

        #endregion

        #region → Methods       .

        #region → Private       .

        /// <summary>
        /// Manages the tables relations.
        /// </summary>
        private void ManageTablesRelations()
        {

            #region → IssueType                                         .

            foreach (var IssueTypeItem in this.IssueTypeSource)
            {
                //Issue
                foreach (var IssueItem in this.IssueSource.Where(ss => ss.IssueTypeID == IssueTypeItem.IssueTypeID))
                {
                    IssueTypeItem.Issues.Add(IssueItem);
                    IssueItem.IssueType = IssueTypeItem;
                }



            }

            #endregion

            #region → MainPreferenceSet                                 .

            foreach (var MainPreferenceSetItem in this.MainPreferenceSetSource)
            {
                //PreferenceSet
                foreach (var PreferenceSetItem in this.PreferenceSetSource.Where(ss => ss.MainPreferenceSetID == MainPreferenceSetItem.MainPreferenceSetID))
                {
                    MainPreferenceSetItem.PreferenceSets.Add(PreferenceSetItem);
                    PreferenceSetItem.MainPreferenceSet = MainPreferenceSetItem;
                }



            }

            #endregion

            #region → ActionType                                        .

            foreach (var ActionTypeItem in this.ActionTypeSource)
            {
                //History
                foreach (var HistoryItem in this.HistorySource.Where(ss => ss.ActionTypeID == ActionTypeItem.ActionTypeID))
                {
                    ActionTypeItem.Histories.Add(HistoryItem);
                    HistoryItem.ActionType = ActionTypeItem;
                }



            }

            #endregion

            #region → History                                           .

            foreach (var HistoryItem in this.HistorySource)
            {
                //*->1 ==> ActionType
            }

            #endregion

            #region → PreferenceSet                                     .

            foreach (var PreferenceSetItem in this.PreferenceSetSource)
            {
                //Issue
                foreach (var IssueItem in this.IssueSource.Where(ss => ss.PreferenceSetID == PreferenceSetItem.PreferenceSetID))
                {
                    PreferenceSetItem.Issues.Add(IssueItem);
                    IssueItem.PreferenceSet = PreferenceSetItem;
                }



                //PreferenceSetNeg
                foreach (var PreferenceSetNegItem in this.PreferenceSetNegSource.Where(ss => ss.PreferenceSetID == PreferenceSetItem.PreferenceSetID))
                {
                    PreferenceSetItem.PreferenceSetNegs.Add(PreferenceSetNegItem);
                    PreferenceSetNegItem.PreferenceSet = PreferenceSetItem;
                }



                //*->1 ==> MainPreferenceSet
            }

            #endregion

            #region → Issue                                             .

            foreach (var IssueItem in this.IssueSource)
            {
                //LaterRatedIssue
                foreach (var LaterRatedIssueItem in this.LaterRatedIssueSource.Where(ss => ss.IssueID == IssueItem.IssueID))
                {
                    IssueItem.LaterRatedIssues.Add(LaterRatedIssueItem);
                    LaterRatedIssueItem.Issue = IssueItem;
                }



                //MessageIssue
                foreach (var MessageIssueItem in this.MessageIssueSource.Where(ss => ss.IssueID == IssueItem.IssueID))
                {
                    IssueItem.MessageIssues.Add(MessageIssueItem);
                    MessageIssueItem.Issue = IssueItem;
                }



                //NumericIssue
                foreach (var NumericIssueItem in this.NumericIssueSource.Where(ss => ss.IssueID == IssueItem.IssueID))
                {
                    IssueItem.NumericIssues.Add(NumericIssueItem);
                    NumericIssueItem.Issue = IssueItem;
                }



                //OptionIssue
                foreach (var OptionIssueItem in this.OptionIssueSource.Where(ss => ss.IssueID == IssueItem.IssueID))
                {
                    IssueItem.OptionIssues.Add(OptionIssueItem);
                    OptionIssueItem.Issue = IssueItem;
                }



                //*->1 ==> IssueType
                //*->1 ==> PreferenceSet
            }

            #endregion

            #region → PreferenceSetNeg                                  .

            foreach (var PreferenceSetNegItem in this.PreferenceSetNegSource)
            {
                //NegConversation
                foreach (var NegConversationItem in this.NegConversationSource.Where(ss => ss.PreferenceSetNegID == PreferenceSetNegItem.PreferenceSetNegID))
                {
                    PreferenceSetNegItem.NegConversations.Add(NegConversationItem);
                    NegConversationItem.PreferenceSetNeg = PreferenceSetNegItem;
                }



                //*->1 ==> PreferenceSet
            }

            #endregion

            #region → LaterRatedIssue                                   .

            foreach (var LaterRatedIssueItem in this.LaterRatedIssueSource)
            {
                //MessageLaterRatedIssue
                foreach (var MessageLaterRatedIssueItem in this.MessageLaterRatedIssueSource.Where(ss => ss.LaterRatedIssueID == LaterRatedIssueItem.LaterRatedIssueID))
                {
                    LaterRatedIssueItem.MessageLaterRatedIssues.Add(MessageLaterRatedIssueItem);
                    MessageLaterRatedIssueItem.LaterRatedIssue = LaterRatedIssueItem;
                }



                //*->1 ==> Issue
            }

            #endregion

            #region → NegConversation                                   .

            foreach (var NegConversationItem in this.NegConversationSource)
            {
                //ConversationMessage
                foreach (var ConversationMessageItem in this.ConversationMessageSource.Where(ss => ss.NegConversationID == NegConversationItem.NegConversationID))
                {
                    NegConversationItem.ConversationMessages.Add(ConversationMessageItem);
                    ConversationMessageItem.NegConversation = NegConversationItem;
                }



                //*->1 ==> PreferenceSetNeg
            }

            #endregion

            #region → NumericIssue                                      .

            foreach (var NumericIssueItem in this.NumericIssueSource)
            {
                //*->1 ==> Issue
            }

            #endregion

            #region → OptionIssue                                       .

            foreach (var OptionIssueItem in this.OptionIssueSource)
            {
                //MessageOptionIssue
                foreach (var MessageOptionIssueItem in this.MessageOptionIssueSource.Where(ss => ss.OptionIssueID == OptionIssueItem.OptionIssueID))
                {
                    OptionIssueItem.MessageOptionIssues.Add(MessageOptionIssueItem);
                    MessageOptionIssueItem.OptionIssue = OptionIssueItem;
                }



                //*->1 ==> Issue
            }

            #endregion

            #region → ConversationMessage                               .

            foreach (var ConversationMessageItem in this.ConversationMessageSource)
            {
                //MessageIssue
                foreach (var MessageIssueItem in this.MessageIssueSource.Where(ss => ss.ConversationMessageID == ConversationMessageItem.ConversationMessageID))
                {
                    ConversationMessageItem.MessageIssues.Add(MessageIssueItem);
                    MessageIssueItem.ConversationMessage = ConversationMessageItem;
                }



                //*->1 ==> NegConversation
            }

            #endregion

            #region → MessageIssue                                      .

            foreach (var MessageIssueItem in this.MessageIssueSource)
            {
                //MessageLaterRatedIssue
                foreach (var MessageLaterRatedIssueItem in this.MessageLaterRatedIssueSource.Where(ss => ss.MessageIssueID == MessageIssueItem.MessageIssueID))
                {
                    MessageIssueItem.MessageLaterRatedIssues.Add(MessageLaterRatedIssueItem);
                    MessageLaterRatedIssueItem.MessageIssue = MessageIssueItem;
                }



                //MessageOptionIssue
                foreach (var MessageOptionIssueItem in this.MessageOptionIssueSource.Where(ss => ss.MessageIssueID == MessageIssueItem.MessageIssueID))
                {
                    MessageIssueItem.MessageOptionIssues.Add(MessageOptionIssueItem);
                    MessageOptionIssueItem.MessageIssue = MessageIssueItem;
                }



                //*->1 ==> ConversationMessage
                //*->1 ==> Issue
            }

            #endregion

            #region → MessageLaterRatedIssue                            .

            foreach (var MessageLaterRatedIssueItem in this.MessageLaterRatedIssueSource)
            {
                //*->1 ==> LaterRatedIssue
                //*->1 ==> MessageIssue
            }

            #endregion

            #region → MessageOptionIssue                                .

            foreach (var MessageOptionIssueItem in this.MessageOptionIssueSource)
            {
                //*->1 ==> MessageIssue
                //*->1 ==> OptionIssue
            }

            #endregion



        }

        #endregion

        #region → Public        .

        #region → Implementation of IEngineProvider  .


        /// <summary>
        /// Gets the preference set.
        /// </summary>
        /// <param name="preferenceSetID">The preference set ID.</param>
        /// <returns></returns>
        public PreferenceSet GetPreferenceSet(Guid preferenceSetID)
        {
            return this.PreferenceSetSource
                       .Where(ss => ss.PreferenceSetID == preferenceSetID && ss.Deleted == false)
                       .FirstOrDefault();
        }

        /// <summary>
        /// Gets the issue.
        /// </summary>
        /// <param name="issueID">The issue ID.</param>
        /// <returns></returns>
        public Issue GetIssue(Guid issueID)
        {
            return this.IssueSource
                       .Where(ss => ss.IssueID == issueID && ss.Deleted == false)
                       .FirstOrDefault();
        }

        /// <summary>
        /// Gets the numeric issue.
        /// </summary>
        /// <param name="issueID">The issue ID.</param>
        /// <returns></returns>
        public NumericIssue GetNumericIssue(Guid issueID)
        {
            return this.NumericIssueSource
                       .Where(ss => ss.IssueID == issueID && ss.Deleted == false)
                       .FirstOrDefault();
        }

        /// <summary>
        /// Gets the option issues.
        /// </summary>
        /// <param name="issueID">The issue ID.</param>
        /// <returns></returns>
        public IEnumerable<OptionIssue> GetOptionIssues(Guid issueID)
        {
            return this.OptionIssueSource
                       .Where(ss => ss.IssueID == issueID && ss.Deleted == false)
                       .AsEnumerable();
        }

        /// <summary>
        /// Gets the later rated issues.
        /// </summary>
        /// <param name="issueID">The issue ID.</param>
        /// <returns></returns>
        public IEnumerable<LaterRatedIssue> GetLaterRatedIssues(Guid issueID)
        {
            return this.LaterRatedIssueSource
                       .Where(ss => ss.IssueID == issueID && ss.Deleted == false)
                       .AsEnumerable();
        }

        /// <summary>
        /// Gets the preference set neg.
        /// </summary>
        /// <param name="preferenceSetNegID">The preference set neg ID.</param>
        /// <returns></returns>
        public PreferenceSetNeg GetPreferenceSetNeg(Guid preferenceSetNegID)
        {
            return this.PreferenceSetNegSource
                       .Where(ss => ss.PreferenceSetNegID == preferenceSetNegID && ss.Deleted == false)
                       .FirstOrDefault();
        }

        /// <summary>
        /// Gets the negotiation conversations.
        /// </summary>
        /// <param name="preferenceSetNegID">The preference set neg ID.</param>
        /// <returns></returns>
        public IEnumerable<NegConversation> GetNegotiationConversations(Guid preferenceSetNegID)
        {
            return this.NegConversationSource
                       .Where(ss => ss.PreferenceSetNegID == preferenceSetNegID && ss.Deleted == false)
                       .AsEnumerable();
        }

        /// <summary>
        /// Gets the message neg conversation.
        /// </summary>
        /// <param name="negConversationID">The neg conversation ID.</param>
        /// <returns></returns>
        public NegConversation GetMessageNegConversation(Guid negConversationID)
        {
            return this.NegConversationSource
                       .Where(ss => ss.NegConversationID == negConversationID && ss.Deleted == false)
                       .FirstOrDefault();
        }

        /// <summary>
        /// Gets the message issues.
        /// </summary>
        /// <param name="conversationMessageID">The conversation message ID.</param>
        /// <returns></returns>
        public IEnumerable<MessageIssue> GetMessageIssues(Guid conversationMessageID)
        {
            return this.MessageIssueSource
                       .Where(ss => ss.ConversationMessageID == conversationMessageID && ss.Deleted == false)
                       .AsEnumerable();
        }

        /// <summary>
        /// Gets the message option issues.
        /// </summary>
        /// <param name="messageIssueID">The message issue ID.</param>
        /// <returns></returns>
        public IEnumerable<MessageOptionIssue> GetMessageOptionIssues(Guid messageIssueID)
        {
            return this.MessageOptionIssueSource
                       .Where(ss => ss.MessageIssueID == messageIssueID && ss.Deleted == false)
                       .AsEnumerable();
        }

        /// <summary>
        /// Gets the message later rated issues.
        /// </summary>
        /// <param name="messageIssueID">The message issue ID.</param>
        /// <returns></returns>
        public IEnumerable<MessageLaterRatedIssue> GetMessageLaterRatedIssues(Guid messageIssueID)
        {
            return this.MessageLaterRatedIssueSource
                       .Where(ss => ss.MessageIssueID == messageIssueID && ss.Deleted == false)
                       .AsEnumerable();
        }

        /// <summary>
        /// Gets the max numeric value.
        /// </summary>
        /// <param name="preferenceSetNegID">The preference set neg ID.</param>
        /// <param name="issueID">The issue ID.</param>
        /// <returns></returns>
        public decimal? GetMaxNumericValue(Guid preferenceSetNegID, Guid issueID)
        {
            return 15000M;
        }

        /// <summary>
        /// Gets the min numeric value.
        /// </summary>
        /// <param name="preferenceSetNegID">The preference set neg ID.</param>
        /// <param name="issueID">The issue ID.</param>
        /// <returns></returns>
        public decimal? GetMinNumericValue(Guid preferenceSetNegID, Guid issueID)
        {
            return 9000M;
        }

        /// <summary>
        /// Determines whether [is any numeric issue has better] [the specified preference set neg ID].
        /// </summary>
        /// <param name="preferenceSetNegID">The preference set neg ID.</param>
        /// <returns>
        /// 	<c>true</c> if [is any numeric issue has better] [the specified preference set neg ID]; otherwise, <c>false</c>.
        /// </returns>
        public bool IsAnyNumericIssueHasBetter(Guid preferenceSetNegID)
        {

            MessageIssue messageIssue = this.MessageIssueSource
                                 .Where(s => s.ConversationMessage != null //has a message
                                         && s.ConversationMessage.NegConversation != null //Has a negotiation
                                         && s.ConversationMessage.NegConversation.PreferenceSetNegID == preferenceSetNegID //In same Negotiation
                                         && s.Issue != null
                                         && s.Issue.IssueTypeID == PrefAppConstant.IssueTypes.Numeric //Numeric Type
                                         && s.Deleted == false  //Not Deleted
                                         && s.Issue.NumericIssues.FirstOrDefault() != null
                                         && (s.Issue.NumericIssues.FirstOrDefault().MaximumOperator == (int)Operators.Better ||
                                             s.Issue.NumericIssues.FirstOrDefault().MinimumOperator == (int)Operators.Better)
                                         )
                                   .FirstOrDefault();

            return messageIssue != null;

        }

        /// <summary>
        /// Gets all messages for negotiation.
        /// </summary>
        /// <param name="PreferenceSetNegID">The preference set neg ID.</param>
        /// <returns></returns>
        public IEnumerable<ConversationMessage> GetAllMessagesForNegotiation(Guid PreferenceSetNegID)
        {
            return this.ConversationMessageSource
                       .Where(s => s.NegConversation.PreferenceSetNegID == PreferenceSetNegID &&
                                   s.Deleted == false &&
                                   s.MessageIssues.Count() > 0);
        }

        /// <summary>
        /// Gets all messages for negotiation but has error.
        /// </summary>
        /// <param name="PreferenceSetNegID">The preference set neg ID.</param>
        /// <returns></returns>
        public IEnumerable<ConversationMessage> GetAllMessagesForNegotiationButHasError(Guid PreferenceSetNegID)
        {
            return this.ConversationMessageSource
                       .Where(s => s.NegConversation.PreferenceSetNegID == PreferenceSetNegID &&
                                   s.MessageIssues.Count() == 0 &&
                                   s.Deleted == false &&
                                   s.Percentage != null);
        }

        /// <summary>
        /// Gets the neg conversations for preference set neg.
        /// </summary>
        /// <param name="PreferenceSetNegID">The preference set neg ID.</param>
        /// <returns></returns>
        public IEnumerable<NegConversation> GetNegConversationsForPreferenceSetNeg(Guid PreferenceSetNegID)
        {
            return this.NegConversationSource
                       .Where(s => s.PreferenceSetNegID == PreferenceSetNegID &&
                                   s.Deleted == false);
        }

        /// <summary>
        /// Updates the conversation and negotiation PCT.
        /// by setting the Conversation with the last rated message
        /// and the Negotiation with the hightest message.
        /// </summary>
        /// <param name="currentMessage">The message.</param>
        public void UpdateConversationAndNegotiationPCT(ConversationMessage currentMessage)
        {

            NegConversation currentMessageConversation = currentMessage.NegConversation;
            PreferenceSetNeg currentMessagePreferenceSetNeg = currentMessage.NegConversation.PreferenceSetNeg;


            #region → Updating the Negotiation by Max Percentage of All Messages .

            if (currentMessagePreferenceSetNeg != null)
            {
                IEnumerable<ConversationMessage> AllMessagesForNegotiation
                                          = this.ConversationMessageSource
                                                .Where(s => s.NegConversation.PreferenceSetNegID == currentMessagePreferenceSetNeg.PreferenceSetNegID
                                                            && s.MessageIssues.Count() > 0).OrderByDescending(s => s.Percentage);

                ConversationMessage MaxPCTMessage = AllMessagesForNegotiation.FirstOrDefault();

                if (MaxPCTMessage != null)
                {
                    currentMessagePreferenceSetNeg.Percentage = MaxPCTMessage.Percentage.Value;
                }
                else
                {
                    currentMessagePreferenceSetNeg.Percentage = 0;
                }

            }

            #endregion


            #region → Updating the Conversation by Last Rated Message Percentage .


            if (currentMessageConversation != null)
            {

                #region → Updaet Message By Last Score                                  .

                ConversationMessage LastRatedMessage = currentMessageConversation.ConversationMessages
                                    .Where(s => s.Percentage != null)
                                    .OrderByDescending(s => s.RatedDate)
                                    .FirstOrDefault();

                if (LastRatedMessage != null)
                {
                    currentMessageConversation.Percentage = LastRatedMessage.Percentage.Value;
                }
                else
                {
                    currentMessageConversation.Percentage = 0;
                }

                #endregion //------------------------------------------------------------------------------

                #region → Make History for Message (used to send statisticals for eneg) .


                ConversationMessage LastRatedReceivedMessage = currentMessageConversation.ConversationMessages
                                   .Where(s => s.Percentage != null && s.IsSent == false)
                                   .OrderByDescending(s => s.RatedDate)
                                   .FirstOrDefault();

                ConversationMessage LastRatedSentMessage = currentMessageConversation.ConversationMessages
                                   .Where(s => s.Percentage != null && s.IsSent == true)
                                   .OrderByDescending(s => s.RatedDate)
                                   .FirstOrDefault();

                currentMessageConversation.DMLastReceivedMessage = LastRatedReceivedMessage;
                currentMessageConversation.DMLastSentMessage = LastRatedSentMessage;

                #endregion//-----------------------------------------------------------------

            }

            #endregion


        }

        /// <summary>
        /// Updates the negotiation by best message.
        /// </summary>
        public void UpdateNegotiationByBestMessage(ConversationMessage crrentMessage)
        {


            ConversationMessage BestMessage
                       = this.ConversationMessageSource.Where(s => s.NegConversationID == crrentMessage.NegConversationID && s.Percentage.HasValue  /*&& s.IsSent.Value==false*/)
                                                          .OrderByDescending(o => o.Percentage.Value)
                                                          .FirstOrDefault();

            if (BestMessage != null)
            {

                //Clear all Values for that Negotiation e.g Purchase a Car
                foreach (var issue in BestMessage.NegConversation.PreferenceSetNeg.PreferenceSet.Issues)
                {
                    issue.RemoveStatusByNegConvID(crrentMessage.NegConversationID);

                    //Set the status by default value.
                    issue.Status = null;
                }

                /*--------------------------------------------------------------------------------------*/


                foreach (var messageIssue in BestMessage.MessageIssues)
                {
                    Issue issue = messageIssue.Issue;


                    #region → Numeric     .

                    if (issue.IssueTypeID == PrefAppConstant.IssueTypes.Numeric)
                    {
                        issue.AddStatus(crrentMessage.NegConversationID, messageIssue.Value, messageIssue.NumericRate);

                        issue.Status = issue.GetStatus(crrentMessage.NegConversationID);
                    }

                    #endregion

                    #region → Options     .

                    else if (issue.IssueTypeID == PrefAppConstant.IssueTypes.Options)
                    {

                        var maxOptionRate = messageIssue.MessageOptionIssues.OrderByDescending(s => s.OptionIssue.OptionIssueWeight).FirstOrDefault();

                        if (maxOptionRate != null && maxOptionRate.OptionIssue != null)
                        {

                            issue.AddStatus(crrentMessage.NegConversationID, maxOptionRate.OptionIssue.OptionIssueValue, maxOptionRate.OptionIssue.OptionIssueWeight);

                            issue.Status = issue.GetStatus(crrentMessage.NegConversationID);

                        }

                    }

                    #endregion

                    #region → Later Rated .

                    else if (issue.IssueTypeID == PrefAppConstant.IssueTypes.LaterRated)
                    {

                        var maxLaterRate = messageIssue.MessageLaterRatedIssues.OrderByDescending(s => s.LaterRatedIssue.LaterRatedIssueWeight).FirstOrDefault();

                        if (maxLaterRate != null && maxLaterRate.LaterRatedIssue != null)
                        {

                            issue.AddStatus(crrentMessage.NegConversationID, maxLaterRate.LaterRatedIssue.LaterRatedIssueValue, maxLaterRate.LaterRatedIssue.LaterRatedIssueWeight);

                            issue.Status = issue.GetStatus(crrentMessage.NegConversationID);

                        }

                    }

                    #endregion

                }

            }

        }

        #endregion

        #endregion

        #endregion
        
    }
}
