//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace citPOINT.PrefApp.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using citPOINT.PrefApp.Data.Web.Complete;
    
    
    /// <summary>
    /// The 'ActionType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class ActionType : Entity
    {
        
        private string _actionName;
        
        private Guid _actionTypeID;
        
        private EntityCollection<History> _histories;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActionNameChanging(string value);
        partial void OnActionNameChanged();
        partial void OnActionTypeIDChanging(Guid value);
        partial void OnActionTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionType"/> class.
        /// </summary>
        public ActionType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActionName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string ActionName
        {
            get
            {
                return this._actionName;
            }
            set
            {
                if ((this._actionName != value))
                {
                    this.OnActionNameChanging(value);
                    this.RaiseDataMemberChanging("ActionName");
                    this.ValidateProperty("ActionName", value);
                    this._actionName = value;
                    this.RaiseDataMemberChanged("ActionName");
                    this.OnActionNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ActionTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ActionTypeID
        {
            get
            {
                return this._actionTypeID;
            }
            set
            {
                if ((this._actionTypeID != value))
                {
                    this.OnActionTypeIDChanging(value);
                    this.ValidateProperty("ActionTypeID", value);
                    this._actionTypeID = value;
                    this.RaisePropertyChanged("ActionTypeID");
                    this.OnActionTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="History"/> entities.
        /// </summary>
        [Association("ActionType_History", "ActionTypeID", "ActionTypeID")]
        [XmlIgnore()]
        public EntityCollection<History> Histories
        {
            get
            {
                if ((this._histories == null))
                {
                    this._histories = new EntityCollection<History>(this, "Histories", this.FilterHistories, this.AttachHistories, this.DetachHistories);
                }
                return this._histories;
            }
        }
        
        private void AttachHistories(History entity)
        {
            entity.ActionType = this;
        }
        
        private void DetachHistories(History entity)
        {
            entity.ActionType = null;
        }
        
        private bool FilterHistories(History entity)
        {
            return (entity.ActionTypeID == this.ActionTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._actionTypeID;
        }
    }
    
    /// <summary>
    /// The 'Conversation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class Conversation : Entity
    {
        
        private Guid _conversationID;
        
        private string _conversationName;
        
        private Guid _negotiationID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConversationIDChanging(Guid value);
        partial void OnConversationIDChanged();
        partial void OnConversationNameChanging(string value);
        partial void OnConversationNameChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Conversation"/> class.
        /// </summary>
        public Conversation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ConversationID
        {
            get
            {
                return this._conversationID;
            }
            set
            {
                if ((this._conversationID != value))
                {
                    this.OnConversationIDChanging(value);
                    this.ValidateProperty("ConversationID", value);
                    this._conversationID = value;
                    this.RaisePropertyChanged("ConversationID");
                    this.OnConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationName' value.
        /// </summary>
        [DataMember()]
        public string ConversationName
        {
            get
            {
                return this._conversationName;
            }
            set
            {
                if ((this._conversationName != value))
                {
                    this.OnConversationNameChanging(value);
                    this.RaiseDataMemberChanging("ConversationName");
                    this.ValidateProperty("ConversationName", value);
                    this._conversationName = value;
                    this.RaiseDataMemberChanged("ConversationName");
                    this.OnConversationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationID");
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaiseDataMemberChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._conversationID;
        }
    }
    
    /// <summary>
    /// The 'ConversationMessage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class ConversationMessage : Entity
    {
        
        private Guid _conversationMessageID;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private bool _isExceedVariation;
        
        private Nullable<bool> _isSent;
        
        private Nullable<Guid> _messageID;
        
        private EntityCollection<MessageIssue> _messageIssues;
        
        private EntityRef<NegConversation> _negConversation;
        
        private Guid _negConversationID;
        
        private Nullable<decimal> _percentage;
        
        private Nullable<DateTime> _ratedDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConversationMessageIDChanging(Guid value);
        partial void OnConversationMessageIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIsExceedVariationChanging(bool value);
        partial void OnIsExceedVariationChanged();
        partial void OnIsSentChanging(Nullable<bool> value);
        partial void OnIsSentChanged();
        partial void OnMessageIDChanging(Nullable<Guid> value);
        partial void OnMessageIDChanged();
        partial void OnNegConversationIDChanging(Guid value);
        partial void OnNegConversationIDChanged();
        partial void OnPercentageChanging(Nullable<decimal> value);
        partial void OnPercentageChanged();
        partial void OnRatedDateChanging(Nullable<DateTime> value);
        partial void OnRatedDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationMessage"/> class.
        /// </summary>
        public ConversationMessage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationMessageID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ConversationMessageID
        {
            get
            {
                return this._conversationMessageID;
            }
            set
            {
                if ((this._conversationMessageID != value))
                {
                    this.OnConversationMessageIDChanging(value);
                    this.ValidateProperty("ConversationMessageID", value);
                    this._conversationMessageID = value;
                    this.RaisePropertyChanged("ConversationMessageID");
                    this.OnConversationMessageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsExceedVariation' value.
        /// </summary>
        [DataMember()]
        public bool IsExceedVariation
        {
            get
            {
                return this._isExceedVariation;
            }
            set
            {
                if ((this._isExceedVariation != value))
                {
                    this.OnIsExceedVariationChanging(value);
                    this.RaiseDataMemberChanging("IsExceedVariation");
                    this.ValidateProperty("IsExceedVariation", value);
                    this._isExceedVariation = value;
                    this.RaiseDataMemberChanged("IsExceedVariation");
                    this.OnIsExceedVariationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSent' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsSent
        {
            get
            {
                return this._isSent;
            }
            set
            {
                if ((this._isSent != value))
                {
                    this.OnIsSentChanging(value);
                    this.RaiseDataMemberChanging("IsSent");
                    this.ValidateProperty("IsSent", value);
                    this._isSent = value;
                    this.RaiseDataMemberChanged("IsSent");
                    this.OnIsSentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> MessageID
        {
            get
            {
                return this._messageID;
            }
            set
            {
                if ((this._messageID != value))
                {
                    this.OnMessageIDChanging(value);
                    this.RaiseDataMemberChanging("MessageID");
                    this.ValidateProperty("MessageID", value);
                    this._messageID = value;
                    this.RaiseDataMemberChanged("MessageID");
                    this.OnMessageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageIssue"/> entities.
        /// </summary>
        [Association("ConversationMessage_MessageIssue", "ConversationMessageID", "ConversationMessageID")]
        [XmlIgnore()]
        public EntityCollection<MessageIssue> MessageIssues
        {
            get
            {
                if ((this._messageIssues == null))
                {
                    this._messageIssues = new EntityCollection<MessageIssue>(this, "MessageIssues", this.FilterMessageIssues, this.AttachMessageIssues, this.DetachMessageIssues);
                }
                return this._messageIssues;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="NegConversation"/> entity.
        /// </summary>
        [Association("NegConversation_ConversationMessage", "NegConversationID", "NegConversationID", IsForeignKey=true)]
        [XmlIgnore()]
        public NegConversation NegConversation
        {
            get
            {
                if ((this._negConversation == null))
                {
                    this._negConversation = new EntityRef<NegConversation>(this, "NegConversation", this.FilterNegConversation);
                }
                return this._negConversation.Entity;
            }
            set
            {
                NegConversation previous = this.NegConversation;
                if ((previous != value))
                {
                    this.ValidateProperty("NegConversation", value);
                    if ((previous != null))
                    {
                        this._negConversation.Entity = null;
                        previous.ConversationMessages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NegConversationID = value.NegConversationID;
                    }
                    else
                    {
                        this.NegConversationID = default(Guid);
                    }
                    this._negConversation.Entity = value;
                    if ((value != null))
                    {
                        value.ConversationMessages.Add(this);
                    }
                    this.RaisePropertyChanged("NegConversation");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegConversationID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid NegConversationID
        {
            get
            {
                return this._negConversationID;
            }
            set
            {
                if ((this._negConversationID != value))
                {
                    this.OnNegConversationIDChanging(value);
                    this.RaiseDataMemberChanging("NegConversationID");
                    this.ValidateProperty("NegConversationID", value);
                    this._negConversationID = value;
                    this.RaiseDataMemberChanged("NegConversationID");
                    this.OnNegConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Percentage' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.RaiseDataMemberChanging("Percentage");
                    this.ValidateProperty("Percentage", value);
                    this._percentage = value;
                    this.RaiseDataMemberChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RatedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> RatedDate
        {
            get
            {
                return this._ratedDate;
            }
            set
            {
                if ((this._ratedDate != value))
                {
                    this.OnRatedDateChanging(value);
                    this.RaiseDataMemberChanging("RatedDate");
                    this.ValidateProperty("RatedDate", value);
                    this._ratedDate = value;
                    this.RaiseDataMemberChanged("RatedDate");
                    this.OnRatedDateChanged();
                }
            }
        }
        
        private void AttachMessageIssues(MessageIssue entity)
        {
            entity.ConversationMessage = this;
        }
        
        private void DetachMessageIssues(MessageIssue entity)
        {
            entity.ConversationMessage = null;
        }
        
        private bool FilterMessageIssues(MessageIssue entity)
        {
            return (entity.ConversationMessageID == this.ConversationMessageID);
        }
        
        private bool FilterNegConversation(NegConversation entity)
        {
            return (entity.NegConversationID == this.NegConversationID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._conversationMessageID;
        }
    }
    
    /// <summary>
    /// The 'ConversationPeriod' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class ConversationPeriod : Entity
    {
        
        private int _id;
        
        private Nullable<DateTime> _maxConversationDate;
        
        private Nullable<DateTime> _minConversationDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnMaxConversationDateChanging(Nullable<DateTime> value);
        partial void OnMaxConversationDateChanged();
        partial void OnMinConversationDateChanging(Nullable<DateTime> value);
        partial void OnMinConversationDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationPeriod"/> class.
        /// </summary>
        public ConversationPeriod()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(1)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxConversationDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> MaxConversationDate
        {
            get
            {
                return this._maxConversationDate;
            }
            set
            {
                if ((this._maxConversationDate != value))
                {
                    this.OnMaxConversationDateChanging(value);
                    this.RaiseDataMemberChanging("MaxConversationDate");
                    this.ValidateProperty("MaxConversationDate", value);
                    this._maxConversationDate = value;
                    this.RaiseDataMemberChanged("MaxConversationDate");
                    this.OnMaxConversationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinConversationDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> MinConversationDate
        {
            get
            {
                return this._minConversationDate;
            }
            set
            {
                if ((this._minConversationDate != value))
                {
                    this.OnMinConversationDateChanging(value);
                    this.RaiseDataMemberChanging("MinConversationDate");
                    this.ValidateProperty("MinConversationDate", value);
                    this._minConversationDate = value;
                    this.RaiseDataMemberChanged("MinConversationDate");
                    this.OnMinConversationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'CoordinatesPoints' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class CoordinatesPoints : Entity
    {
        
        private Guid _coordinatesPointsID;
        
        private DateTime _xAxisPoint;
        
        private decimal _yAxisPoint;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCoordinatesPointsIDChanging(Guid value);
        partial void OnCoordinatesPointsIDChanged();
        partial void OnXAxisPointChanging(DateTime value);
        partial void OnXAxisPointChanged();
        partial void OnYAxisPointChanging(decimal value);
        partial void OnYAxisPointChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CoordinatesPoints"/> class.
        /// </summary>
        public CoordinatesPoints()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CoordinatesPointsID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid CoordinatesPointsID
        {
            get
            {
                return this._coordinatesPointsID;
            }
            set
            {
                if ((this._coordinatesPointsID != value))
                {
                    this.OnCoordinatesPointsIDChanging(value);
                    this.ValidateProperty("CoordinatesPointsID", value);
                    this._coordinatesPointsID = value;
                    this.RaisePropertyChanged("CoordinatesPointsID");
                    this.OnCoordinatesPointsIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'XAxisPoint' value.
        /// </summary>
        [DataMember()]
        public DateTime XAxisPoint
        {
            get
            {
                return this._xAxisPoint;
            }
            set
            {
                if ((this._xAxisPoint != value))
                {
                    this.OnXAxisPointChanging(value);
                    this.RaiseDataMemberChanging("XAxisPoint");
                    this.ValidateProperty("XAxisPoint", value);
                    this._xAxisPoint = value;
                    this.RaiseDataMemberChanged("XAxisPoint");
                    this.OnXAxisPointChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'YAxisPoint' value.
        /// </summary>
        [DataMember()]
        public decimal YAxisPoint
        {
            get
            {
                return this._yAxisPoint;
            }
            set
            {
                if ((this._yAxisPoint != value))
                {
                    this.OnYAxisPointChanging(value);
                    this.RaiseDataMemberChanging("YAxisPoint");
                    this.ValidateProperty("YAxisPoint", value);
                    this._yAxisPoint = value;
                    this.RaiseDataMemberChanged("YAxisPoint");
                    this.OnYAxisPointChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._coordinatesPointsID;
        }
    }
    
    /// <summary>
    /// The 'History' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class History : Entity
    {
        
        private DateTime _actionDate;
        
        private EntityRef<ActionType> _actionType;
        
        private Guid _actionTypeID;
        
        private Guid _doneBy;
        
        private string _newValue;
        
        private string _oldValue;
        
        private Guid _sn;
        
        private string _tableName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActionDateChanging(DateTime value);
        partial void OnActionDateChanged();
        partial void OnActionTypeIDChanging(Guid value);
        partial void OnActionTypeIDChanged();
        partial void OnDoneByChanging(Guid value);
        partial void OnDoneByChanged();
        partial void OnNewValueChanging(string value);
        partial void OnNewValueChanged();
        partial void OnOldValueChanging(string value);
        partial void OnOldValueChanged();
        partial void OnSNChanging(Guid value);
        partial void OnSNChanged();
        partial void OnTableNameChanging(string value);
        partial void OnTableNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="History"/> class.
        /// </summary>
        public History()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActionDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ActionDate
        {
            get
            {
                return this._actionDate;
            }
            set
            {
                if ((this._actionDate != value))
                {
                    this.OnActionDateChanging(value);
                    this.RaiseDataMemberChanging("ActionDate");
                    this.ValidateProperty("ActionDate", value);
                    this._actionDate = value;
                    this.RaiseDataMemberChanged("ActionDate");
                    this.OnActionDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ActionType"/> entity.
        /// </summary>
        [Association("ActionType_History", "ActionTypeID", "ActionTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public ActionType ActionType
        {
            get
            {
                if ((this._actionType == null))
                {
                    this._actionType = new EntityRef<ActionType>(this, "ActionType", this.FilterActionType);
                }
                return this._actionType.Entity;
            }
            set
            {
                ActionType previous = this.ActionType;
                if ((previous != value))
                {
                    this.ValidateProperty("ActionType", value);
                    if ((previous != null))
                    {
                        this._actionType.Entity = null;
                        previous.Histories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ActionTypeID = value.ActionTypeID;
                    }
                    else
                    {
                        this.ActionTypeID = default(Guid);
                    }
                    this._actionType.Entity = value;
                    if ((value != null))
                    {
                        value.Histories.Add(this);
                    }
                    this.RaisePropertyChanged("ActionType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ActionTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ActionTypeID
        {
            get
            {
                return this._actionTypeID;
            }
            set
            {
                if ((this._actionTypeID != value))
                {
                    this.OnActionTypeIDChanging(value);
                    this.RaiseDataMemberChanging("ActionTypeID");
                    this.ValidateProperty("ActionTypeID", value);
                    this._actionTypeID = value;
                    this.RaiseDataMemberChanged("ActionTypeID");
                    this.OnActionTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DoneBy' value.
        /// </summary>
        [DataMember()]
        public Guid DoneBy
        {
            get
            {
                return this._doneBy;
            }
            set
            {
                if ((this._doneBy != value))
                {
                    this.OnDoneByChanging(value);
                    this.RaiseDataMemberChanging("DoneBy");
                    this.ValidateProperty("DoneBy", value);
                    this._doneBy = value;
                    this.RaiseDataMemberChanged("DoneBy");
                    this.OnDoneByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewValue' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string NewValue
        {
            get
            {
                return this._newValue;
            }
            set
            {
                if ((this._newValue != value))
                {
                    this.OnNewValueChanging(value);
                    this.RaiseDataMemberChanging("NewValue");
                    this.ValidateProperty("NewValue", value);
                    this._newValue = value;
                    this.RaiseDataMemberChanged("NewValue");
                    this.OnNewValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OldValue' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string OldValue
        {
            get
            {
                return this._oldValue;
            }
            set
            {
                if ((this._oldValue != value))
                {
                    this.OnOldValueChanging(value);
                    this.RaiseDataMemberChanging("OldValue");
                    this.ValidateProperty("OldValue", value);
                    this._oldValue = value;
                    this.RaiseDataMemberChanged("OldValue");
                    this.OnOldValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SN' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid SN
        {
            get
            {
                return this._sn;
            }
            set
            {
                if ((this._sn != value))
                {
                    this.OnSNChanging(value);
                    this.ValidateProperty("SN", value);
                    this._sn = value;
                    this.RaisePropertyChanged("SN");
                    this.OnSNChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TableName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string TableName
        {
            get
            {
                return this._tableName;
            }
            set
            {
                if ((this._tableName != value))
                {
                    this.OnTableNameChanging(value);
                    this.RaiseDataMemberChanging("TableName");
                    this.ValidateProperty("TableName", value);
                    this._tableName = value;
                    this.RaiseDataMemberChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }
        
        private bool FilterActionType(ActionType entity)
        {
            return (entity.ActionTypeID == this.ActionTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._sn;
        }
    }
    
    /// <summary>
    /// The 'Issue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class Issue : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private bool _isNewIssue;
        
        private bool _isSelected;
        
        private Guid _issueID;
        
        private string _issueName;
        
        private EntityRef<IssueType> _issueType;
        
        private Guid _issueTypeID;
        
        private decimal _issueWeight;
        
        private EntityCollection<LaterRatedIssue> _laterRatedIssues;
        
        private EntityCollection<MessageIssue> _messageIssues;
        
        private EntityCollection<NumericIssue> _numericIssues;
        
        private EntityCollection<OptionIssue> _optionIssues;
        
        private EntityRef<PreferenceSet> _preferenceSet;
        
        private Guid _preferenceSetID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIsNewIssueChanging(bool value);
        partial void OnIsNewIssueChanged();
        partial void OnIsSelectedChanging(bool value);
        partial void OnIsSelectedChanged();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnIssueNameChanging(string value);
        partial void OnIssueNameChanged();
        partial void OnIssueTypeIDChanging(Guid value);
        partial void OnIssueTypeIDChanged();
        partial void OnIssueWeightChanging(decimal value);
        partial void OnIssueWeightChanged();
        partial void OnPreferenceSetIDChanging(Guid value);
        partial void OnPreferenceSetIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Issue"/> class.
        /// </summary>
        public Issue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsNewIssue' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsNewIssue
        {
            get
            {
                return this._isNewIssue;
            }
            set
            {
                if ((this._isNewIssue != value))
                {
                    this.OnIsNewIssueChanging(value);
                    this.RaiseDataMemberChanging("IsNewIssue");
                    this.ValidateProperty("IsNewIssue", value);
                    this._isNewIssue = value;
                    this.RaiseDataMemberChanged("IsNewIssue");
                    this.OnIsNewIssueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSelected' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnIsSelectedChanging(value);
                    this.RaiseDataMemberChanging("IsSelected");
                    this.ValidateProperty("IsSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("IsSelected");
                    this.OnIsSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaisePropertyChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(300)]
        public string IssueName
        {
            get
            {
                return this._issueName;
            }
            set
            {
                if ((this._issueName != value))
                {
                    this.OnIssueNameChanging(value);
                    this.RaiseDataMemberChanging("IssueName");
                    this.ValidateProperty("IssueName", value);
                    this._issueName = value;
                    this.RaiseDataMemberChanged("IssueName");
                    this.OnIssueNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="IssueType"/> entity.
        /// </summary>
        [Association("IssueType_Issue", "IssueTypeID", "IssueTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public IssueType IssueType
        {
            get
            {
                if ((this._issueType == null))
                {
                    this._issueType = new EntityRef<IssueType>(this, "IssueType", this.FilterIssueType);
                }
                return this._issueType.Entity;
            }
            set
            {
                IssueType previous = this.IssueType;
                if ((previous != value))
                {
                    this.ValidateProperty("IssueType", value);
                    if ((previous != null))
                    {
                        this._issueType.Entity = null;
                        previous.Issues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssueTypeID = value.IssueTypeID;
                    }
                    else
                    {
                        this.IssueTypeID = default(Guid);
                    }
                    this._issueType.Entity = value;
                    if ((value != null))
                    {
                        value.Issues.Add(this);
                    }
                    this.RaisePropertyChanged("IssueType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid IssueTypeID
        {
            get
            {
                return this._issueTypeID;
            }
            set
            {
                if ((this._issueTypeID != value))
                {
                    this.OnIssueTypeIDChanging(value);
                    this.RaiseDataMemberChanging("IssueTypeID");
                    this.ValidateProperty("IssueTypeID", value);
                    this._issueTypeID = value;
                    this.RaiseDataMemberChanged("IssueTypeID");
                    this.OnIssueTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueWeight' value.
        /// </summary>
        [DataMember()]
        public decimal IssueWeight
        {
            get
            {
                return this._issueWeight;
            }
            set
            {
                if ((this._issueWeight != value))
                {
                    this.OnIssueWeightChanging(value);
                    this.RaiseDataMemberChanging("IssueWeight");
                    this.ValidateProperty("IssueWeight", value);
                    this._issueWeight = value;
                    this.RaiseDataMemberChanged("IssueWeight");
                    this.OnIssueWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="LaterRatedIssue"/> entities.
        /// </summary>
        [Association("Issue_LaterRatedIssue", "IssueID", "IssueID")]
        [XmlIgnore()]
        public EntityCollection<LaterRatedIssue> LaterRatedIssues
        {
            get
            {
                if ((this._laterRatedIssues == null))
                {
                    this._laterRatedIssues = new EntityCollection<LaterRatedIssue>(this, "LaterRatedIssues", this.FilterLaterRatedIssues, this.AttachLaterRatedIssues, this.DetachLaterRatedIssues);
                }
                return this._laterRatedIssues;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageIssue"/> entities.
        /// </summary>
        [Association("Issue_MessageIssue", "IssueID", "IssueID")]
        [XmlIgnore()]
        public EntityCollection<MessageIssue> MessageIssues
        {
            get
            {
                if ((this._messageIssues == null))
                {
                    this._messageIssues = new EntityCollection<MessageIssue>(this, "MessageIssues", this.FilterMessageIssues, this.AttachMessageIssues, this.DetachMessageIssues);
                }
                return this._messageIssues;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NumericIssue"/> entities.
        /// </summary>
        [Association("Issue_NumericIssue", "IssueID", "IssueID")]
        [XmlIgnore()]
        public EntityCollection<NumericIssue> NumericIssues
        {
            get
            {
                if ((this._numericIssues == null))
                {
                    this._numericIssues = new EntityCollection<NumericIssue>(this, "NumericIssues", this.FilterNumericIssues, this.AttachNumericIssues, this.DetachNumericIssues);
                }
                return this._numericIssues;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OptionIssue"/> entities.
        /// </summary>
        [Association("Issue_OptionIssue", "IssueID", "IssueID")]
        [XmlIgnore()]
        public EntityCollection<OptionIssue> OptionIssues
        {
            get
            {
                if ((this._optionIssues == null))
                {
                    this._optionIssues = new EntityCollection<OptionIssue>(this, "OptionIssues", this.FilterOptionIssues, this.AttachOptionIssues, this.DetachOptionIssues);
                }
                return this._optionIssues;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PreferenceSet"/> entity.
        /// </summary>
        [Association("PreferenceSet_Issue", "PreferenceSetID", "PreferenceSetID", IsForeignKey=true)]
        [XmlIgnore()]
        public PreferenceSet PreferenceSet
        {
            get
            {
                if ((this._preferenceSet == null))
                {
                    this._preferenceSet = new EntityRef<PreferenceSet>(this, "PreferenceSet", this.FilterPreferenceSet);
                }
                return this._preferenceSet.Entity;
            }
            set
            {
                PreferenceSet previous = this.PreferenceSet;
                if ((previous != value))
                {
                    this.ValidateProperty("PreferenceSet", value);
                    if ((previous != null))
                    {
                        this._preferenceSet.Entity = null;
                        previous.Issues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PreferenceSetID = value.PreferenceSetID;
                    }
                    else
                    {
                        this.PreferenceSetID = default(Guid);
                    }
                    this._preferenceSet.Entity = value;
                    if ((value != null))
                    {
                        value.Issues.Add(this);
                    }
                    this.RaisePropertyChanged("PreferenceSet");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid PreferenceSetID
        {
            get
            {
                return this._preferenceSetID;
            }
            set
            {
                if ((this._preferenceSetID != value))
                {
                    this.OnPreferenceSetIDChanging(value);
                    this.RaiseDataMemberChanging("PreferenceSetID");
                    this.ValidateProperty("PreferenceSetID", value);
                    this._preferenceSetID = value;
                    this.RaiseDataMemberChanged("PreferenceSetID");
                    this.OnPreferenceSetIDChanged();
                }
            }
        }
        
        private bool FilterIssueType(IssueType entity)
        {
            return (entity.IssueTypeID == this.IssueTypeID);
        }
        
        private void AttachLaterRatedIssues(LaterRatedIssue entity)
        {
            entity.Issue = this;
        }
        
        private void DetachLaterRatedIssues(LaterRatedIssue entity)
        {
            entity.Issue = null;
        }
        
        private bool FilterLaterRatedIssues(LaterRatedIssue entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        private void AttachMessageIssues(MessageIssue entity)
        {
            entity.Issue = this;
        }
        
        private void DetachMessageIssues(MessageIssue entity)
        {
            entity.Issue = null;
        }
        
        private bool FilterMessageIssues(MessageIssue entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        private void AttachNumericIssues(NumericIssue entity)
        {
            entity.Issue = this;
        }
        
        private void DetachNumericIssues(NumericIssue entity)
        {
            entity.Issue = null;
        }
        
        private bool FilterNumericIssues(NumericIssue entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        private void AttachOptionIssues(OptionIssue entity)
        {
            entity.Issue = this;
        }
        
        private void DetachOptionIssues(OptionIssue entity)
        {
            entity.Issue = null;
        }
        
        private bool FilterOptionIssues(OptionIssue entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        private bool FilterPreferenceSet(PreferenceSet entity)
        {
            return (entity.PreferenceSetID == this.PreferenceSetID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._issueID;
        }
    }
    
    /// <summary>
    /// The 'IssueHistoryResult' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class IssueHistoryResult : Entity
    {
        
        private Nullable<decimal> _averageScore;
        
        private string _issueName;
        
        private Nullable<long> _rank;
        
        private Nullable<int> _timesUsed;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAverageScoreChanging(Nullable<decimal> value);
        partial void OnAverageScoreChanged();
        partial void OnIssueNameChanging(string value);
        partial void OnIssueNameChanged();
        partial void OnRankChanging(Nullable<long> value);
        partial void OnRankChanged();
        partial void OnTimesUsedChanging(Nullable<int> value);
        partial void OnTimesUsedChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueHistoryResult"/> class.
        /// </summary>
        public IssueHistoryResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AverageScore' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> AverageScore
        {
            get
            {
                return this._averageScore;
            }
            set
            {
                if ((this._averageScore != value))
                {
                    this.OnAverageScoreChanging(value);
                    this.RaiseDataMemberChanging("AverageScore");
                    this.ValidateProperty("AverageScore", value);
                    this._averageScore = value;
                    this.RaiseDataMemberChanged("AverageScore");
                    this.OnAverageScoreChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueName' value.
        /// </summary>
        [DataMember()]
        public string IssueName
        {
            get
            {
                return this._issueName;
            }
            set
            {
                if ((this._issueName != value))
                {
                    this.OnIssueNameChanging(value);
                    this.RaiseDataMemberChanging("IssueName");
                    this.ValidateProperty("IssueName", value);
                    this._issueName = value;
                    this.RaiseDataMemberChanged("IssueName");
                    this.OnIssueNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rank' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Nullable<long> Rank
        {
            get
            {
                return this._rank;
            }
            set
            {
                if ((this._rank != value))
                {
                    this.OnRankChanging(value);
                    this.ValidateProperty("Rank", value);
                    this._rank = value;
                    this.RaisePropertyChanged("Rank");
                    this.OnRankChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimesUsed' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> TimesUsed
        {
            get
            {
                return this._timesUsed;
            }
            set
            {
                if ((this._timesUsed != value))
                {
                    this.OnTimesUsedChanging(value);
                    this.RaiseDataMemberChanging("TimesUsed");
                    this.ValidateProperty("TimesUsed", value);
                    this._timesUsed = value;
                    this.RaiseDataMemberChanged("TimesUsed");
                    this.OnTimesUsedChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._rank;
        }
    }
    
    /// <summary>
    /// The 'IssueStatisticalsResult' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class IssueStatisticalsResult : Entity
    {
        
        private string _issueName;
        
        private Nullable<long> _rank;
        
        private Nullable<int> _timesUsed;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIssueNameChanging(string value);
        partial void OnIssueNameChanged();
        partial void OnRankChanging(Nullable<long> value);
        partial void OnRankChanged();
        partial void OnTimesUsedChanging(Nullable<int> value);
        partial void OnTimesUsedChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueStatisticalsResult"/> class.
        /// </summary>
        public IssueStatisticalsResult()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IssueName' value.
        /// </summary>
        [DataMember()]
        public string IssueName
        {
            get
            {
                return this._issueName;
            }
            set
            {
                if ((this._issueName != value))
                {
                    this.OnIssueNameChanging(value);
                    this.RaiseDataMemberChanging("IssueName");
                    this.ValidateProperty("IssueName", value);
                    this._issueName = value;
                    this.RaiseDataMemberChanged("IssueName");
                    this.OnIssueNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rank' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Nullable<long> Rank
        {
            get
            {
                return this._rank;
            }
            set
            {
                if ((this._rank != value))
                {
                    this.OnRankChanging(value);
                    this.ValidateProperty("Rank", value);
                    this._rank = value;
                    this.RaisePropertyChanged("Rank");
                    this.OnRankChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimesUsed' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> TimesUsed
        {
            get
            {
                return this._timesUsed;
            }
            set
            {
                if ((this._timesUsed != value))
                {
                    this.OnTimesUsedChanging(value);
                    this.RaiseDataMemberChanging("TimesUsed");
                    this.ValidateProperty("TimesUsed", value);
                    this._timesUsed = value;
                    this.RaiseDataMemberChanged("TimesUsed");
                    this.OnTimesUsedChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._rank;
        }
    }
    
    /// <summary>
    /// The 'IssueType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class IssueType : Entity
    {
        
        private EntityCollection<Issue> _issues;
        
        private Guid _issueTypeID;
        
        private string _issueTypeName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIssueTypeIDChanging(Guid value);
        partial void OnIssueTypeIDChanged();
        partial void OnIssueTypeNameChanging(string value);
        partial void OnIssueTypeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueType"/> class.
        /// </summary>
        public IssueType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Issue"/> entities.
        /// </summary>
        [Association("IssueType_Issue", "IssueTypeID", "IssueTypeID")]
        [XmlIgnore()]
        public EntityCollection<Issue> Issues
        {
            get
            {
                if ((this._issues == null))
                {
                    this._issues = new EntityCollection<Issue>(this, "Issues", this.FilterIssues, this.AttachIssues, this.DetachIssues);
                }
                return this._issues;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid IssueTypeID
        {
            get
            {
                return this._issueTypeID;
            }
            set
            {
                if ((this._issueTypeID != value))
                {
                    this.OnIssueTypeIDChanging(value);
                    this.ValidateProperty("IssueTypeID", value);
                    this._issueTypeID = value;
                    this.RaisePropertyChanged("IssueTypeID");
                    this.OnIssueTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueTypeName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(300)]
        public string IssueTypeName
        {
            get
            {
                return this._issueTypeName;
            }
            set
            {
                if ((this._issueTypeName != value))
                {
                    this.OnIssueTypeNameChanging(value);
                    this.RaiseDataMemberChanging("IssueTypeName");
                    this.ValidateProperty("IssueTypeName", value);
                    this._issueTypeName = value;
                    this.RaiseDataMemberChanged("IssueTypeName");
                    this.OnIssueTypeNameChanged();
                }
            }
        }
        
        private void AttachIssues(Issue entity)
        {
            entity.IssueType = this;
        }
        
        private void DetachIssues(Issue entity)
        {
            entity.IssueType = null;
        }
        
        private bool FilterIssues(Issue entity)
        {
            return (entity.IssueTypeID == this.IssueTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._issueTypeID;
        }
    }
    
    /// <summary>
    /// The 'LastOfferDetails' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class LastOfferDetails : Entity
    {
        
        private int _id;
        
        private DateTime _offerDate;
        
        private decimal _percentage;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOfferDateChanging(DateTime value);
        partial void OnOfferDateChanged();
        partial void OnPercentageChanging(decimal value);
        partial void OnPercentageChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LastOfferDetails"/> class.
        /// </summary>
        public LastOfferDetails()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OfferDate' value.
        /// </summary>
        [DataMember()]
        public DateTime OfferDate
        {
            get
            {
                return this._offerDate;
            }
            set
            {
                if ((this._offerDate != value))
                {
                    this.OnOfferDateChanging(value);
                    this.RaiseDataMemberChanging("OfferDate");
                    this.ValidateProperty("OfferDate", value);
                    this._offerDate = value;
                    this.RaiseDataMemberChanged("OfferDate");
                    this.OnOfferDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Percentage' value.
        /// </summary>
        [DataMember()]
        public decimal Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.RaiseDataMemberChanging("Percentage");
                    this.ValidateProperty("Percentage", value);
                    this._percentage = value;
                    this.RaiseDataMemberChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'LaterRatedIssue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class LaterRatedIssue : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private EntityRef<Issue> _issue;
        
        private Guid _issueID;
        
        private Guid _laterRatedIssueID;
        
        private string _laterRatedIssueValue;
        
        private decimal _laterRatedIssueWeight;
        
        private EntityCollection<MessageLaterRatedIssue> _messageLaterRatedIssues;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnLaterRatedIssueIDChanging(Guid value);
        partial void OnLaterRatedIssueIDChanged();
        partial void OnLaterRatedIssueValueChanging(string value);
        partial void OnLaterRatedIssueValueChanged();
        partial void OnLaterRatedIssueWeightChanging(decimal value);
        partial void OnLaterRatedIssueWeightChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LaterRatedIssue"/> class.
        /// </summary>
        public LaterRatedIssue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Issue"/> entity.
        /// </summary>
        [Association("Issue_LaterRatedIssue", "IssueID", "IssueID", IsForeignKey=true)]
        [XmlIgnore()]
        public Issue Issue
        {
            get
            {
                if ((this._issue == null))
                {
                    this._issue = new EntityRef<Issue>(this, "Issue", this.FilterIssue);
                }
                return this._issue.Entity;
            }
            set
            {
                Issue previous = this.Issue;
                if ((previous != value))
                {
                    this.ValidateProperty("Issue", value);
                    if ((previous != null))
                    {
                        this._issue.Entity = null;
                        previous.LaterRatedIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssueID = value.IssueID;
                    }
                    else
                    {
                        this.IssueID = default(Guid);
                    }
                    this._issue.Entity = value;
                    if ((value != null))
                    {
                        value.LaterRatedIssues.Add(this);
                    }
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.RaiseDataMemberChanging("IssueID");
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaiseDataMemberChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LaterRatedIssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid LaterRatedIssueID
        {
            get
            {
                return this._laterRatedIssueID;
            }
            set
            {
                if ((this._laterRatedIssueID != value))
                {
                    this.OnLaterRatedIssueIDChanging(value);
                    this.ValidateProperty("LaterRatedIssueID", value);
                    this._laterRatedIssueID = value;
                    this.RaisePropertyChanged("LaterRatedIssueID");
                    this.OnLaterRatedIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LaterRatedIssueValue' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string LaterRatedIssueValue
        {
            get
            {
                return this._laterRatedIssueValue;
            }
            set
            {
                if ((this._laterRatedIssueValue != value))
                {
                    this.OnLaterRatedIssueValueChanging(value);
                    this.RaiseDataMemberChanging("LaterRatedIssueValue");
                    this.ValidateProperty("LaterRatedIssueValue", value);
                    this._laterRatedIssueValue = value;
                    this.RaiseDataMemberChanged("LaterRatedIssueValue");
                    this.OnLaterRatedIssueValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LaterRatedIssueWeight' value.
        /// </summary>
        [DataMember()]
        public decimal LaterRatedIssueWeight
        {
            get
            {
                return this._laterRatedIssueWeight;
            }
            set
            {
                if ((this._laterRatedIssueWeight != value))
                {
                    this.OnLaterRatedIssueWeightChanging(value);
                    this.RaiseDataMemberChanging("LaterRatedIssueWeight");
                    this.ValidateProperty("LaterRatedIssueWeight", value);
                    this._laterRatedIssueWeight = value;
                    this.RaiseDataMemberChanged("LaterRatedIssueWeight");
                    this.OnLaterRatedIssueWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageLaterRatedIssue"/> entities.
        /// </summary>
        [Association("LaterRatedIssue_MessageLaterRatedIssue", "LaterRatedIssueID", "LaterRatedIssueID")]
        [XmlIgnore()]
        public EntityCollection<MessageLaterRatedIssue> MessageLaterRatedIssues
        {
            get
            {
                if ((this._messageLaterRatedIssues == null))
                {
                    this._messageLaterRatedIssues = new EntityCollection<MessageLaterRatedIssue>(this, "MessageLaterRatedIssues", this.FilterMessageLaterRatedIssues, this.AttachMessageLaterRatedIssues, this.DetachMessageLaterRatedIssues);
                }
                return this._messageLaterRatedIssues;
            }
        }
        
        private bool FilterIssue(Issue entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        private void AttachMessageLaterRatedIssues(MessageLaterRatedIssue entity)
        {
            entity.LaterRatedIssue = this;
        }
        
        private void DetachMessageLaterRatedIssues(MessageLaterRatedIssue entity)
        {
            entity.LaterRatedIssue = null;
        }
        
        private bool FilterMessageLaterRatedIssues(MessageLaterRatedIssue entity)
        {
            return (entity.LaterRatedIssueID == this.LaterRatedIssueID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._laterRatedIssueID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'LoginService' domain service.
    /// </summary>
    [ServiceContract()]
    public sealed partial class LoginContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginContext"/> class.
        /// </summary>
        public LoginContext() : 
                this(new WebDomainClient<ILoginServiceContract>(new Uri("citPOINT-PrefApp-Data-Web-LoginService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LoginService service URI.</param>
        public LoginContext(Uri serviceUri) : 
                this(new WebDomainClient<ILoginServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public LoginContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="LoginUser"/> entities that have been loaded into this <see cref="LoginContext"/> instance.
        /// </summary>
        public EntitySet<LoginUser> LoginUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LoginUser>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LoginUser"/> entities using the 'GetUserFromeNeg' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LoginUser"/> entities.</returns>
        [OperationContract()]
        public EntityQuery<LoginUser> GetUserFromeNegQuery(Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetUserFromeNegQuery", parameters);
            return base.CreateQuery<LoginUser>("GetUserFromeNeg", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LoginUser"/> entities using the 'Logout' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LoginUser"/> entities.</returns>
        [OperationContract()]
        public EntityQuery<LoginUser> LogoutQuery(Nullable<Guid> UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("LogoutQuery", parameters);
            return base.CreateQuery<LoginUser>("Logout", parameters, false, false);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GeteNegBaseAddress' method of the domain service.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        [OperationContract()]
        public InvokeOperation<string> GeteNegBaseAddress(Action<InvokeOperation<string>> callback, object userState)
        {
            this.ValidateMethod("GeteNegBaseAddress", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GeteNegBaseAddress", typeof(string), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GeteNegBaseAddress' method of the domain service.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        [OperationContract()]
        public InvokeOperation<string> GeteNegBaseAddress()
        {
            this.ValidateMethod("GeteNegBaseAddress", null);
            return ((InvokeOperation<string>)(this.InvokeOperation("GeteNegBaseAddress", typeof(string), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'MakeUserOffline' method of the domain service.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        [OperationContract()]
        public InvokeOperation<bool> MakeUserOffline(Nullable<Guid> UserID, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("MakeUserOffline", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("MakeUserOffline", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'MakeUserOffline' method of the domain service.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        [OperationContract()]
        public InvokeOperation<bool> MakeUserOffline(Nullable<Guid> UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("MakeUserOffline", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("MakeUserOffline", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'MakeUserOnline' method of the domain service.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IPAddress">The value for the 'IPAddress' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        [OperationContract()]
        public InvokeOperation<bool> MakeUserOnline(Nullable<Guid> UserID, string IPAddress, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("IPAddress", IPAddress);
            this.ValidateMethod("MakeUserOnline", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("MakeUserOnline", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'MakeUserOnline' method of the domain service.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IPAddress">The value for the 'IPAddress' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        [OperationContract()]
        public InvokeOperation<bool> MakeUserOnline(Nullable<Guid> UserID, string IPAddress)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("IPAddress", IPAddress);
            this.ValidateMethod("MakeUserOnline", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("MakeUserOnline", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LoginContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LoginService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ILoginServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GeteNegBaseAddress' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoginService/GeteNegBaseAddressDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoginService/GeteNegBaseAddress", ReplyAction="http://tempuri.org/LoginService/GeteNegBaseAddressResponse")]
            IAsyncResult BeginGeteNegBaseAddress(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGeteNegBaseAddress'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGeteNegBaseAddress'.</param>
            /// <returns>The 'String' returned from the 'GeteNegBaseAddress' operation.</returns>
            string EndGeteNegBaseAddress(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserFromeNeg' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoginService/GetUserFromeNegDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoginService/GetUserFromeNeg", ReplyAction="http://tempuri.org/LoginService/GetUserFromeNegResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserFromeNeg(Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserFromeNeg'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserFromeNeg'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserFromeNeg' operation.</returns>
            QueryResult<LoginUser> EndGetUserFromeNeg(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoginService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoginService/Logout", ReplyAction="http://tempuri.org/LoginService/LogoutResponse")]
            [WebGet()]
            IAsyncResult BeginLogout(Nullable<Guid> UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<LoginUser> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'MakeUserOffline' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoginService/MakeUserOfflineDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoginService/MakeUserOffline", ReplyAction="http://tempuri.org/LoginService/MakeUserOfflineResponse")]
            IAsyncResult BeginMakeUserOffline(Nullable<Guid> UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginMakeUserOffline'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginMakeUserOffline'.</param>
            /// <returns>The 'Boolean' returned from the 'MakeUserOffline' operation.</returns>
            bool EndMakeUserOffline(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'MakeUserOnline' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="IPAddress">The value for the 'IPAddress' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoginService/MakeUserOnlineDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoginService/MakeUserOnline", ReplyAction="http://tempuri.org/LoginService/MakeUserOnlineResponse")]
            IAsyncResult BeginMakeUserOnline(Nullable<Guid> UserID, string IPAddress, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginMakeUserOnline'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginMakeUserOnline'.</param>
            /// <returns>The 'Boolean' returned from the 'MakeUserOnline' operation.</returns>
            bool EndMakeUserOnline(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoginService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoginService/SubmitChanges", ReplyAction="http://tempuri.org/LoginService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class LoginContextEntityContainer : EntityContainer
        {
            
            public LoginContextEntityContainer()
            {
                this.CreateEntitySet<LoginUser>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'LoginUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class LoginUser : Entity
    {
        
        private string _clientAddress;
        
        private bool _disabled;
        
        private string _emailAddress;
        
        private string _fullName;
        
        private string _ipAddress;
        
        private Nullable<DateTime> _lastLoginDate;
        
        private bool _locked;
        
        private bool _online;
        
        private string _password;
        
        private Guid _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClientAddressChanging(string value);
        partial void OnClientAddressChanged();
        partial void OnDisabledChanging(bool value);
        partial void OnDisabledChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnIPAddressChanging(string value);
        partial void OnIPAddressChanged();
        partial void OnLastLoginDateChanging(Nullable<DateTime> value);
        partial void OnLastLoginDateChanged();
        partial void OnLockedChanging(bool value);
        partial void OnLockedChanged();
        partial void OnOnlineChanging(bool value);
        partial void OnOnlineChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginUser"/> class.
        /// </summary>
        public LoginUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClientAddress' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string ClientAddress
        {
            get
            {
                return this._clientAddress;
            }
            set
            {
                if ((this._clientAddress != value))
                {
                    this.OnClientAddressChanging(value);
                    this.ValidateProperty("ClientAddress", value);
                    this._clientAddress = value;
                    this.RaisePropertyChanged("ClientAddress");
                    this.OnClientAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Disabled' value.
        /// </summary>
        [DataMember()]
        public bool Disabled
        {
            get
            {
                return this._disabled;
            }
            set
            {
                if ((this._disabled != value))
                {
                    this.OnDisabledChanging(value);
                    this.RaiseDataMemberChanging("Disabled");
                    this.ValidateProperty("Disabled", value);
                    this._disabled = value;
                    this.RaiseDataMemberChanged("Disabled");
                    this.OnDisabledChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [DataMember()]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IPAddress' value.
        /// </summary>
        [DataMember()]
        public string IPAddress
        {
            get
            {
                return this._ipAddress;
            }
            set
            {
                if ((this._ipAddress != value))
                {
                    this.OnIPAddressChanging(value);
                    this.RaiseDataMemberChanging("IPAddress");
                    this.ValidateProperty("IPAddress", value);
                    this._ipAddress = value;
                    this.RaiseDataMemberChanged("IPAddress");
                    this.OnIPAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastLoginDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastLoginDate
        {
            get
            {
                return this._lastLoginDate;
            }
            set
            {
                if ((this._lastLoginDate != value))
                {
                    this.OnLastLoginDateChanging(value);
                    this.RaiseDataMemberChanging("LastLoginDate");
                    this.ValidateProperty("LastLoginDate", value);
                    this._lastLoginDate = value;
                    this.RaiseDataMemberChanged("LastLoginDate");
                    this.OnLastLoginDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Locked' value.
        /// </summary>
        [DataMember()]
        public bool Locked
        {
            get
            {
                return this._locked;
            }
            set
            {
                if ((this._locked != value))
                {
                    this.OnLockedChanging(value);
                    this.RaiseDataMemberChanging("Locked");
                    this.ValidateProperty("Locked", value);
                    this._locked = value;
                    this.RaiseDataMemberChanged("Locked");
                    this.OnLockedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Online' value.
        /// </summary>
        [DataMember()]
        public bool Online
        {
            get
            {
                return this._online;
            }
            set
            {
                if ((this._online != value))
                {
                    this.OnOnlineChanging(value);
                    this.RaiseDataMemberChanging("Online");
                    this.ValidateProperty("Online", value);
                    this._online = value;
                    this.RaiseDataMemberChanged("Online");
                    this.OnOnlineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaisePropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'MailService' domain service.
    /// </summary>
    public sealed partial class MailContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MailContext"/> class.
        /// </summary>
        public MailContext() : 
                this(new WebDomainClient<IMailServiceContract>(new Uri("citPOINT-PrefApp-Data-Web-MailService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MailContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MailService service URI.</param>
        public MailContext(Uri serviceUri) : 
                this(new WebDomainClient<IMailServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MailContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public MailContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendMailMessage' method of the domain service.
        /// </summary>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="to">The value for the 'to' parameter of this action.</param>
        /// <param name="bcc">The value for the 'bcc' parameter of this action.</param>
        /// <param name="cc">The value for the 'cc' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SendMailMessage(string from, string to, string bcc, string cc, string subject, string body, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("from", from);
            parameters.Add("to", to);
            parameters.Add("bcc", bcc);
            parameters.Add("cc", cc);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("SendMailMessage", parameters);
            return this.InvokeOperation("SendMailMessage", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendMailMessage' method of the domain service.
        /// </summary>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="to">The value for the 'to' parameter of this action.</param>
        /// <param name="bcc">The value for the 'bcc' parameter of this action.</param>
        /// <param name="cc">The value for the 'cc' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SendMailMessage(string from, string to, string bcc, string cc, string subject, string body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("from", from);
            parameters.Add("to", to);
            parameters.Add("bcc", bcc);
            parameters.Add("cc", cc);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("SendMailMessage", parameters);
            return this.InvokeOperation("SendMailMessage", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MailContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MailService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IMailServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'SendMailMessage' operation.
            /// </summary>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="to">The value for the 'to' parameter of this action.</param>
            /// <param name="bcc">The value for the 'bcc' parameter of this action.</param>
            /// <param name="cc">The value for the 'cc' parameter of this action.</param>
            /// <param name="subject">The value for the 'subject' parameter of this action.</param>
            /// <param name="body">The value for the 'body' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MailService/SendMailMessageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MailService/SendMailMessage", ReplyAction="http://tempuri.org/MailService/SendMailMessageResponse")]
            IAsyncResult BeginSendMailMessage(string from, string to, string bcc, string cc, string subject, string body, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSendMailMessage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSendMailMessage'.</param>
            void EndSendMailMessage(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MailService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MailService/SubmitChanges", ReplyAction="http://tempuri.org/MailService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MailContextEntityContainer : EntityContainer
        {
            
            public MailContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'MainPreferenceSet' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class MainPreferenceSet : Entity
    {
        
        private Guid _mainPreferenceSetID;
        
        private string _mainPreferenceSetName;
        
        private EntityCollection<PreferenceSet> _preferenceSets;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnMainPreferenceSetIDChanging(Guid value);
        partial void OnMainPreferenceSetIDChanged();
        partial void OnMainPreferenceSetNameChanging(string value);
        partial void OnMainPreferenceSetNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MainPreferenceSet"/> class.
        /// </summary>
        public MainPreferenceSet()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'MainPreferenceSetID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid MainPreferenceSetID
        {
            get
            {
                return this._mainPreferenceSetID;
            }
            set
            {
                if ((this._mainPreferenceSetID != value))
                {
                    this.OnMainPreferenceSetIDChanging(value);
                    this.ValidateProperty("MainPreferenceSetID", value);
                    this._mainPreferenceSetID = value;
                    this.RaisePropertyChanged("MainPreferenceSetID");
                    this.OnMainPreferenceSetIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MainPreferenceSetName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(300)]
        public string MainPreferenceSetName
        {
            get
            {
                return this._mainPreferenceSetName;
            }
            set
            {
                if ((this._mainPreferenceSetName != value))
                {
                    this.OnMainPreferenceSetNameChanging(value);
                    this.RaiseDataMemberChanging("MainPreferenceSetName");
                    this.ValidateProperty("MainPreferenceSetName", value);
                    this._mainPreferenceSetName = value;
                    this.RaiseDataMemberChanged("MainPreferenceSetName");
                    this.OnMainPreferenceSetNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PreferenceSet"/> entities.
        /// </summary>
        [Association("MainPreferenceSet_PreferenceSet", "MainPreferenceSetID", "MainPreferenceSetID")]
        [XmlIgnore()]
        public EntityCollection<PreferenceSet> PreferenceSets
        {
            get
            {
                if ((this._preferenceSets == null))
                {
                    this._preferenceSets = new EntityCollection<PreferenceSet>(this, "PreferenceSets", this.FilterPreferenceSets, this.AttachPreferenceSets, this.DetachPreferenceSets);
                }
                return this._preferenceSets;
            }
        }
        
        private void AttachPreferenceSets(PreferenceSet entity)
        {
            entity.MainPreferenceSet = this;
        }
        
        private void DetachPreferenceSets(PreferenceSet entity)
        {
            entity.MainPreferenceSet = null;
        }
        
        private bool FilterPreferenceSets(PreferenceSet entity)
        {
            return (entity.MainPreferenceSetID == this.MainPreferenceSetID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._mainPreferenceSetID;
        }
    }
    
    /// <summary>
    /// The 'Message' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class Message : Entity
    {
        
        private string _channelName;
        
        private Guid _conversationID;
        
        private bool _isSent;
        
        private string _messageContent;
        
        private Nullable<DateTime> _messageDate;
        
        private Guid _messageID;
        
        private string _messageName;
        
        private string _messageReceiver;
        
        private string _messageSender;
        
        private string _messageSubject;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnChannelNameChanging(string value);
        partial void OnChannelNameChanged();
        partial void OnConversationIDChanging(Guid value);
        partial void OnConversationIDChanged();
        partial void OnIsSentChanging(bool value);
        partial void OnIsSentChanged();
        partial void OnMessageContentChanging(string value);
        partial void OnMessageContentChanged();
        partial void OnMessageDateChanging(Nullable<DateTime> value);
        partial void OnMessageDateChanged();
        partial void OnMessageIDChanging(Guid value);
        partial void OnMessageIDChanged();
        partial void OnMessageNameChanging(string value);
        partial void OnMessageNameChanged();
        partial void OnMessageReceiverChanging(string value);
        partial void OnMessageReceiverChanged();
        partial void OnMessageSenderChanging(string value);
        partial void OnMessageSenderChanged();
        partial void OnMessageSubjectChanging(string value);
        partial void OnMessageSubjectChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Message"/> class.
        /// </summary>
        public Message()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ChannelName' value.
        /// </summary>
        [DataMember()]
        public string ChannelName
        {
            get
            {
                return this._channelName;
            }
            set
            {
                if ((this._channelName != value))
                {
                    this.OnChannelNameChanging(value);
                    this.RaiseDataMemberChanging("ChannelName");
                    this.ValidateProperty("ChannelName", value);
                    this._channelName = value;
                    this.RaiseDataMemberChanged("ChannelName");
                    this.OnChannelNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationID' value.
        /// </summary>
        [DataMember()]
        public Guid ConversationID
        {
            get
            {
                return this._conversationID;
            }
            set
            {
                if ((this._conversationID != value))
                {
                    this.OnConversationIDChanging(value);
                    this.RaiseDataMemberChanging("ConversationID");
                    this.ValidateProperty("ConversationID", value);
                    this._conversationID = value;
                    this.RaiseDataMemberChanged("ConversationID");
                    this.OnConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSent' value.
        /// </summary>
        [DataMember()]
        public bool IsSent
        {
            get
            {
                return this._isSent;
            }
            set
            {
                if ((this._isSent != value))
                {
                    this.OnIsSentChanging(value);
                    this.RaiseDataMemberChanging("IsSent");
                    this.ValidateProperty("IsSent", value);
                    this._isSent = value;
                    this.RaiseDataMemberChanged("IsSent");
                    this.OnIsSentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageContent' value.
        /// </summary>
        [DataMember()]
        public string MessageContent
        {
            get
            {
                return this._messageContent;
            }
            set
            {
                if ((this._messageContent != value))
                {
                    this.OnMessageContentChanging(value);
                    this.RaiseDataMemberChanging("MessageContent");
                    this.ValidateProperty("MessageContent", value);
                    this._messageContent = value;
                    this.RaiseDataMemberChanged("MessageContent");
                    this.OnMessageContentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> MessageDate
        {
            get
            {
                return this._messageDate;
            }
            set
            {
                if ((this._messageDate != value))
                {
                    this.OnMessageDateChanging(value);
                    this.RaiseDataMemberChanging("MessageDate");
                    this.ValidateProperty("MessageDate", value);
                    this._messageDate = value;
                    this.RaiseDataMemberChanged("MessageDate");
                    this.OnMessageDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid MessageID
        {
            get
            {
                return this._messageID;
            }
            set
            {
                if ((this._messageID != value))
                {
                    this.OnMessageIDChanging(value);
                    this.ValidateProperty("MessageID", value);
                    this._messageID = value;
                    this.RaisePropertyChanged("MessageID");
                    this.OnMessageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageName' value.
        /// </summary>
        [DataMember()]
        public string MessageName
        {
            get
            {
                return this._messageName;
            }
            set
            {
                if ((this._messageName != value))
                {
                    this.OnMessageNameChanging(value);
                    this.RaiseDataMemberChanging("MessageName");
                    this.ValidateProperty("MessageName", value);
                    this._messageName = value;
                    this.RaiseDataMemberChanged("MessageName");
                    this.OnMessageNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageReceiver' value.
        /// </summary>
        [DataMember()]
        public string MessageReceiver
        {
            get
            {
                return this._messageReceiver;
            }
            set
            {
                if ((this._messageReceiver != value))
                {
                    this.OnMessageReceiverChanging(value);
                    this.RaiseDataMemberChanging("MessageReceiver");
                    this.ValidateProperty("MessageReceiver", value);
                    this._messageReceiver = value;
                    this.RaiseDataMemberChanged("MessageReceiver");
                    this.OnMessageReceiverChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageSender' value.
        /// </summary>
        [DataMember()]
        public string MessageSender
        {
            get
            {
                return this._messageSender;
            }
            set
            {
                if ((this._messageSender != value))
                {
                    this.OnMessageSenderChanging(value);
                    this.RaiseDataMemberChanging("MessageSender");
                    this.ValidateProperty("MessageSender", value);
                    this._messageSender = value;
                    this.RaiseDataMemberChanged("MessageSender");
                    this.OnMessageSenderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageSubject' value.
        /// </summary>
        [DataMember()]
        public string MessageSubject
        {
            get
            {
                return this._messageSubject;
            }
            set
            {
                if ((this._messageSubject != value))
                {
                    this.OnMessageSubjectChanging(value);
                    this.RaiseDataMemberChanging("MessageSubject");
                    this.ValidateProperty("MessageSubject", value);
                    this._messageSubject = value;
                    this.RaiseDataMemberChanged("MessageSubject");
                    this.OnMessageSubjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._messageID;
        }
    }
    
    /// <summary>
    /// The 'MessageIssue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class MessageIssue : Entity
    {
        
        private EntityRef<ConversationMessage> _conversationMessage;
        
        private Guid _conversationMessageID;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private EntityRef<Issue> _issue;
        
        private Guid _issueID;
        
        private Guid _messageIssueID;
        
        private EntityCollection<MessageLaterRatedIssue> _messageLaterRatedIssues;
        
        private EntityCollection<MessageOptionIssue> _messageOptionIssues;
        
        private decimal _rate;
        
        private Nullable<decimal> _score;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConversationMessageIDChanging(Guid value);
        partial void OnConversationMessageIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnMessageIssueIDChanging(Guid value);
        partial void OnMessageIssueIDChanged();
        partial void OnRateChanging(decimal value);
        partial void OnRateChanged();
        partial void OnScoreChanging(Nullable<decimal> value);
        partial void OnScoreChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageIssue"/> class.
        /// </summary>
        public MessageIssue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ConversationMessage"/> entity.
        /// </summary>
        [Association("ConversationMessage_MessageIssue", "ConversationMessageID", "ConversationMessageID", IsForeignKey=true)]
        [XmlIgnore()]
        public ConversationMessage ConversationMessage
        {
            get
            {
                if ((this._conversationMessage == null))
                {
                    this._conversationMessage = new EntityRef<ConversationMessage>(this, "ConversationMessage", this.FilterConversationMessage);
                }
                return this._conversationMessage.Entity;
            }
            set
            {
                ConversationMessage previous = this.ConversationMessage;
                if ((previous != value))
                {
                    this.ValidateProperty("ConversationMessage", value);
                    if ((previous != null))
                    {
                        this._conversationMessage.Entity = null;
                        previous.MessageIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ConversationMessageID = value.ConversationMessageID;
                    }
                    else
                    {
                        this.ConversationMessageID = default(Guid);
                    }
                    this._conversationMessage.Entity = value;
                    if ((value != null))
                    {
                        value.MessageIssues.Add(this);
                    }
                    this.RaisePropertyChanged("ConversationMessage");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationMessageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ConversationMessageID
        {
            get
            {
                return this._conversationMessageID;
            }
            set
            {
                if ((this._conversationMessageID != value))
                {
                    this.OnConversationMessageIDChanging(value);
                    this.RaiseDataMemberChanging("ConversationMessageID");
                    this.ValidateProperty("ConversationMessageID", value);
                    this._conversationMessageID = value;
                    this.RaiseDataMemberChanged("ConversationMessageID");
                    this.OnConversationMessageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Issue"/> entity.
        /// </summary>
        [Association("Issue_MessageIssue", "IssueID", "IssueID", IsForeignKey=true)]
        [XmlIgnore()]
        public Issue Issue
        {
            get
            {
                if ((this._issue == null))
                {
                    this._issue = new EntityRef<Issue>(this, "Issue", this.FilterIssue);
                }
                return this._issue.Entity;
            }
            set
            {
                Issue previous = this.Issue;
                if ((previous != value))
                {
                    this.ValidateProperty("Issue", value);
                    if ((previous != null))
                    {
                        this._issue.Entity = null;
                        previous.MessageIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssueID = value.IssueID;
                    }
                    else
                    {
                        this.IssueID = default(Guid);
                    }
                    this._issue.Entity = value;
                    if ((value != null))
                    {
                        value.MessageIssues.Add(this);
                    }
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.RaiseDataMemberChanging("IssueID");
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaiseDataMemberChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageIssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid MessageIssueID
        {
            get
            {
                return this._messageIssueID;
            }
            set
            {
                if ((this._messageIssueID != value))
                {
                    this.OnMessageIssueIDChanging(value);
                    this.ValidateProperty("MessageIssueID", value);
                    this._messageIssueID = value;
                    this.RaisePropertyChanged("MessageIssueID");
                    this.OnMessageIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageLaterRatedIssue"/> entities.
        /// </summary>
        [Association("MessageIssue_MessageLaterRatedIssue", "MessageIssueID", "MessageIssueID")]
        [XmlIgnore()]
        public EntityCollection<MessageLaterRatedIssue> MessageLaterRatedIssues
        {
            get
            {
                if ((this._messageLaterRatedIssues == null))
                {
                    this._messageLaterRatedIssues = new EntityCollection<MessageLaterRatedIssue>(this, "MessageLaterRatedIssues", this.FilterMessageLaterRatedIssues, this.AttachMessageLaterRatedIssues, this.DetachMessageLaterRatedIssues);
                }
                return this._messageLaterRatedIssues;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageOptionIssue"/> entities.
        /// </summary>
        [Association("MessageIssue_MessageOptionIssue", "MessageIssueID", "MessageIssueID")]
        [XmlIgnore()]
        public EntityCollection<MessageOptionIssue> MessageOptionIssues
        {
            get
            {
                if ((this._messageOptionIssues == null))
                {
                    this._messageOptionIssues = new EntityCollection<MessageOptionIssue>(this, "MessageOptionIssues", this.FilterMessageOptionIssues, this.AttachMessageOptionIssues, this.DetachMessageOptionIssues);
                }
                return this._messageOptionIssues;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rate' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public decimal Rate
        {
            get
            {
                return this._rate;
            }
            set
            {
                if ((this._rate != value))
                {
                    this.OnRateChanging(value);
                    this.RaiseDataMemberChanging("Rate");
                    this.ValidateProperty("Rate", value);
                    this._rate = value;
                    this.RaiseDataMemberChanged("Rate");
                    this.OnRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Score' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Score
        {
            get
            {
                return this._score;
            }
            set
            {
                if ((this._score != value))
                {
                    this.OnScoreChanging(value);
                    this.RaiseDataMemberChanging("Score");
                    this.ValidateProperty("Score", value);
                    this._score = value;
                    this.RaiseDataMemberChanged("Score");
                    this.OnScoreChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        [StringLength(300)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        private bool FilterConversationMessage(ConversationMessage entity)
        {
            return (entity.ConversationMessageID == this.ConversationMessageID);
        }
        
        private bool FilterIssue(Issue entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        private void AttachMessageLaterRatedIssues(MessageLaterRatedIssue entity)
        {
            entity.MessageIssue = this;
        }
        
        private void DetachMessageLaterRatedIssues(MessageLaterRatedIssue entity)
        {
            entity.MessageIssue = null;
        }
        
        private bool FilterMessageLaterRatedIssues(MessageLaterRatedIssue entity)
        {
            return (entity.MessageIssueID == this.MessageIssueID);
        }
        
        private void AttachMessageOptionIssues(MessageOptionIssue entity)
        {
            entity.MessageIssue = this;
        }
        
        private void DetachMessageOptionIssues(MessageOptionIssue entity)
        {
            entity.MessageIssue = null;
        }
        
        private bool FilterMessageOptionIssues(MessageOptionIssue entity)
        {
            return (entity.MessageIssueID == this.MessageIssueID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._messageIssueID;
        }
    }
    
    /// <summary>
    /// The 'MessageLaterRatedIssue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class MessageLaterRatedIssue : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private EntityRef<LaterRatedIssue> _laterRatedIssue;
        
        private Guid _laterRatedIssueID;
        
        private EntityRef<MessageIssue> _messageIssue;
        
        private Guid _messageIssueID;
        
        private Guid _messageLaterRatedIssueID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnLaterRatedIssueIDChanging(Guid value);
        partial void OnLaterRatedIssueIDChanged();
        partial void OnMessageIssueIDChanging(Guid value);
        partial void OnMessageIssueIDChanged();
        partial void OnMessageLaterRatedIssueIDChanging(Guid value);
        partial void OnMessageLaterRatedIssueIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageLaterRatedIssue"/> class.
        /// </summary>
        public MessageLaterRatedIssue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="LaterRatedIssue"/> entity.
        /// </summary>
        [Association("LaterRatedIssue_MessageLaterRatedIssue", "LaterRatedIssueID", "LaterRatedIssueID", IsForeignKey=true)]
        [XmlIgnore()]
        public LaterRatedIssue LaterRatedIssue
        {
            get
            {
                if ((this._laterRatedIssue == null))
                {
                    this._laterRatedIssue = new EntityRef<LaterRatedIssue>(this, "LaterRatedIssue", this.FilterLaterRatedIssue);
                }
                return this._laterRatedIssue.Entity;
            }
            set
            {
                LaterRatedIssue previous = this.LaterRatedIssue;
                if ((previous != value))
                {
                    this.ValidateProperty("LaterRatedIssue", value);
                    if ((previous != null))
                    {
                        this._laterRatedIssue.Entity = null;
                        previous.MessageLaterRatedIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.LaterRatedIssueID = value.LaterRatedIssueID;
                    }
                    else
                    {
                        this.LaterRatedIssueID = default(Guid);
                    }
                    this._laterRatedIssue.Entity = value;
                    if ((value != null))
                    {
                        value.MessageLaterRatedIssues.Add(this);
                    }
                    this.RaisePropertyChanged("LaterRatedIssue");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LaterRatedIssueID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid LaterRatedIssueID
        {
            get
            {
                return this._laterRatedIssueID;
            }
            set
            {
                if ((this._laterRatedIssueID != value))
                {
                    this.OnLaterRatedIssueIDChanging(value);
                    this.RaiseDataMemberChanging("LaterRatedIssueID");
                    this.ValidateProperty("LaterRatedIssueID", value);
                    this._laterRatedIssueID = value;
                    this.RaiseDataMemberChanged("LaterRatedIssueID");
                    this.OnLaterRatedIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MessageIssue"/> entity.
        /// </summary>
        [Association("MessageIssue_MessageLaterRatedIssue", "MessageIssueID", "MessageIssueID", IsForeignKey=true)]
        [XmlIgnore()]
        public MessageIssue MessageIssue
        {
            get
            {
                if ((this._messageIssue == null))
                {
                    this._messageIssue = new EntityRef<MessageIssue>(this, "MessageIssue", this.FilterMessageIssue);
                }
                return this._messageIssue.Entity;
            }
            set
            {
                MessageIssue previous = this.MessageIssue;
                if ((previous != value))
                {
                    this.ValidateProperty("MessageIssue", value);
                    if ((previous != null))
                    {
                        this._messageIssue.Entity = null;
                        previous.MessageLaterRatedIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MessageIssueID = value.MessageIssueID;
                    }
                    else
                    {
                        this.MessageIssueID = default(Guid);
                    }
                    this._messageIssue.Entity = value;
                    if ((value != null))
                    {
                        value.MessageLaterRatedIssues.Add(this);
                    }
                    this.RaisePropertyChanged("MessageIssue");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageIssueID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid MessageIssueID
        {
            get
            {
                return this._messageIssueID;
            }
            set
            {
                if ((this._messageIssueID != value))
                {
                    this.OnMessageIssueIDChanging(value);
                    this.RaiseDataMemberChanging("MessageIssueID");
                    this.ValidateProperty("MessageIssueID", value);
                    this._messageIssueID = value;
                    this.RaiseDataMemberChanged("MessageIssueID");
                    this.OnMessageIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageLaterRatedIssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid MessageLaterRatedIssueID
        {
            get
            {
                return this._messageLaterRatedIssueID;
            }
            set
            {
                if ((this._messageLaterRatedIssueID != value))
                {
                    this.OnMessageLaterRatedIssueIDChanging(value);
                    this.ValidateProperty("MessageLaterRatedIssueID", value);
                    this._messageLaterRatedIssueID = value;
                    this.RaisePropertyChanged("MessageLaterRatedIssueID");
                    this.OnMessageLaterRatedIssueIDChanged();
                }
            }
        }
        
        private bool FilterLaterRatedIssue(LaterRatedIssue entity)
        {
            return (entity.LaterRatedIssueID == this.LaterRatedIssueID);
        }
        
        private bool FilterMessageIssue(MessageIssue entity)
        {
            return (entity.MessageIssueID == this.MessageIssueID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._messageLaterRatedIssueID;
        }
    }
    
    /// <summary>
    /// The 'MessageOptionIssue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class MessageOptionIssue : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private EntityRef<MessageIssue> _messageIssue;
        
        private Guid _messageIssueID;
        
        private Guid _messageOptionIssueID;
        
        private EntityRef<OptionIssue> _optionIssue;
        
        private Guid _optionIssueID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnMessageIssueIDChanging(Guid value);
        partial void OnMessageIssueIDChanged();
        partial void OnMessageOptionIssueIDChanging(Guid value);
        partial void OnMessageOptionIssueIDChanged();
        partial void OnOptionIssueIDChanging(Guid value);
        partial void OnOptionIssueIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageOptionIssue"/> class.
        /// </summary>
        public MessageOptionIssue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MessageIssue"/> entity.
        /// </summary>
        [Association("MessageIssue_MessageOptionIssue", "MessageIssueID", "MessageIssueID", IsForeignKey=true)]
        [XmlIgnore()]
        public MessageIssue MessageIssue
        {
            get
            {
                if ((this._messageIssue == null))
                {
                    this._messageIssue = new EntityRef<MessageIssue>(this, "MessageIssue", this.FilterMessageIssue);
                }
                return this._messageIssue.Entity;
            }
            set
            {
                MessageIssue previous = this.MessageIssue;
                if ((previous != value))
                {
                    this.ValidateProperty("MessageIssue", value);
                    if ((previous != null))
                    {
                        this._messageIssue.Entity = null;
                        previous.MessageOptionIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MessageIssueID = value.MessageIssueID;
                    }
                    else
                    {
                        this.MessageIssueID = default(Guid);
                    }
                    this._messageIssue.Entity = value;
                    if ((value != null))
                    {
                        value.MessageOptionIssues.Add(this);
                    }
                    this.RaisePropertyChanged("MessageIssue");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageIssueID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid MessageIssueID
        {
            get
            {
                return this._messageIssueID;
            }
            set
            {
                if ((this._messageIssueID != value))
                {
                    this.OnMessageIssueIDChanging(value);
                    this.RaiseDataMemberChanging("MessageIssueID");
                    this.ValidateProperty("MessageIssueID", value);
                    this._messageIssueID = value;
                    this.RaiseDataMemberChanged("MessageIssueID");
                    this.OnMessageIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MessageOptionIssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid MessageOptionIssueID
        {
            get
            {
                return this._messageOptionIssueID;
            }
            set
            {
                if ((this._messageOptionIssueID != value))
                {
                    this.OnMessageOptionIssueIDChanging(value);
                    this.ValidateProperty("MessageOptionIssueID", value);
                    this._messageOptionIssueID = value;
                    this.RaisePropertyChanged("MessageOptionIssueID");
                    this.OnMessageOptionIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OptionIssue"/> entity.
        /// </summary>
        [Association("OptionIssue_MessageOptionIssue", "OptionIssueID", "OptionIssueID", IsForeignKey=true)]
        [XmlIgnore()]
        public OptionIssue OptionIssue
        {
            get
            {
                if ((this._optionIssue == null))
                {
                    this._optionIssue = new EntityRef<OptionIssue>(this, "OptionIssue", this.FilterOptionIssue);
                }
                return this._optionIssue.Entity;
            }
            set
            {
                OptionIssue previous = this.OptionIssue;
                if ((previous != value))
                {
                    this.ValidateProperty("OptionIssue", value);
                    if ((previous != null))
                    {
                        this._optionIssue.Entity = null;
                        previous.MessageOptionIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OptionIssueID = value.OptionIssueID;
                    }
                    else
                    {
                        this.OptionIssueID = default(Guid);
                    }
                    this._optionIssue.Entity = value;
                    if ((value != null))
                    {
                        value.MessageOptionIssues.Add(this);
                    }
                    this.RaisePropertyChanged("OptionIssue");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionIssueID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid OptionIssueID
        {
            get
            {
                return this._optionIssueID;
            }
            set
            {
                if ((this._optionIssueID != value))
                {
                    this.OnOptionIssueIDChanging(value);
                    this.RaiseDataMemberChanging("OptionIssueID");
                    this.ValidateProperty("OptionIssueID", value);
                    this._optionIssueID = value;
                    this.RaiseDataMemberChanged("OptionIssueID");
                    this.OnOptionIssueIDChanged();
                }
            }
        }
        
        private bool FilterMessageIssue(MessageIssue entity)
        {
            return (entity.MessageIssueID == this.MessageIssueID);
        }
        
        private bool FilterOptionIssue(OptionIssue entity)
        {
            return (entity.OptionIssueID == this.OptionIssueID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._messageOptionIssueID;
        }
    }
    
    /// <summary>
    /// The 'NegConversation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class NegConversation : Entity
    {
        
        private Nullable<Guid> _conversationID;
        
        private EntityCollection<ConversationMessage> _conversationMessages;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _negConversationID;
        
        private decimal _percentage;
        
        private EntityRef<PreferenceSetNeg> _preferenceSetNeg;
        
        private Guid _preferenceSetNegID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConversationIDChanging(Nullable<Guid> value);
        partial void OnConversationIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnNegConversationIDChanging(Guid value);
        partial void OnNegConversationIDChanged();
        partial void OnPercentageChanging(decimal value);
        partial void OnPercentageChanged();
        partial void OnPreferenceSetNegIDChanging(Guid value);
        partial void OnPreferenceSetNegIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegConversation"/> class.
        /// </summary>
        public NegConversation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> ConversationID
        {
            get
            {
                return this._conversationID;
            }
            set
            {
                if ((this._conversationID != value))
                {
                    this.OnConversationIDChanging(value);
                    this.RaiseDataMemberChanging("ConversationID");
                    this.ValidateProperty("ConversationID", value);
                    this._conversationID = value;
                    this.RaiseDataMemberChanged("ConversationID");
                    this.OnConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ConversationMessage"/> entities.
        /// </summary>
        [Association("NegConversation_ConversationMessage", "NegConversationID", "NegConversationID")]
        [XmlIgnore()]
        public EntityCollection<ConversationMessage> ConversationMessages
        {
            get
            {
                if ((this._conversationMessages == null))
                {
                    this._conversationMessages = new EntityCollection<ConversationMessage>(this, "ConversationMessages", this.FilterConversationMessages, this.AttachConversationMessages, this.DetachConversationMessages);
                }
                return this._conversationMessages;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegConversationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegConversationID
        {
            get
            {
                return this._negConversationID;
            }
            set
            {
                if ((this._negConversationID != value))
                {
                    this.OnNegConversationIDChanging(value);
                    this.ValidateProperty("NegConversationID", value);
                    this._negConversationID = value;
                    this.RaisePropertyChanged("NegConversationID");
                    this.OnNegConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Percentage' value.
        /// </summary>
        [DataMember()]
        public decimal Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.RaiseDataMemberChanging("Percentage");
                    this.ValidateProperty("Percentage", value);
                    this._percentage = value;
                    this.RaiseDataMemberChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PreferenceSetNeg"/> entity.
        /// </summary>
        [Association("PreferenceSetNeg_NegConversation", "PreferenceSetNegID", "PreferenceSetNegID", IsForeignKey=true)]
        [XmlIgnore()]
        public PreferenceSetNeg PreferenceSetNeg
        {
            get
            {
                if ((this._preferenceSetNeg == null))
                {
                    this._preferenceSetNeg = new EntityRef<PreferenceSetNeg>(this, "PreferenceSetNeg", this.FilterPreferenceSetNeg);
                }
                return this._preferenceSetNeg.Entity;
            }
            set
            {
                PreferenceSetNeg previous = this.PreferenceSetNeg;
                if ((previous != value))
                {
                    this.ValidateProperty("PreferenceSetNeg", value);
                    if ((previous != null))
                    {
                        this._preferenceSetNeg.Entity = null;
                        previous.NegConversations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PreferenceSetNegID = value.PreferenceSetNegID;
                    }
                    else
                    {
                        this.PreferenceSetNegID = default(Guid);
                    }
                    this._preferenceSetNeg.Entity = value;
                    if ((value != null))
                    {
                        value.NegConversations.Add(this);
                    }
                    this.RaisePropertyChanged("PreferenceSetNeg");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetNegID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid PreferenceSetNegID
        {
            get
            {
                return this._preferenceSetNegID;
            }
            set
            {
                if ((this._preferenceSetNegID != value))
                {
                    this.OnPreferenceSetNegIDChanging(value);
                    this.RaiseDataMemberChanging("PreferenceSetNegID");
                    this.ValidateProperty("PreferenceSetNegID", value);
                    this._preferenceSetNegID = value;
                    this.RaiseDataMemberChanged("PreferenceSetNegID");
                    this.OnPreferenceSetNegIDChanged();
                }
            }
        }
        
        private void AttachConversationMessages(ConversationMessage entity)
        {
            entity.NegConversation = this;
        }
        
        private void DetachConversationMessages(ConversationMessage entity)
        {
            entity.NegConversation = null;
        }
        
        private bool FilterConversationMessages(ConversationMessage entity)
        {
            return (entity.NegConversationID == this.NegConversationID);
        }
        
        private bool FilterPreferenceSetNeg(PreferenceSetNeg entity)
        {
            return (entity.PreferenceSetNegID == this.PreferenceSetNegID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negConversationID;
        }
    }
    
    /// <summary>
    /// The 'Negotiation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class Negotiation : Entity
    {
        
        private bool _isClosed;
        
        private Guid _negotiationID;
        
        private string _negotiationName;
        
        private string _negotiators;
        
        private Nullable<Guid> _statusID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIsClosedChanging(bool value);
        partial void OnIsClosedChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();
        partial void OnNegotiationNameChanging(string value);
        partial void OnNegotiationNameChanged();
        partial void OnNegotiatorsChanging(string value);
        partial void OnNegotiatorsChanged();
        partial void OnStatusIDChanging(Nullable<Guid> value);
        partial void OnStatusIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Negotiation"/> class.
        /// </summary>
        public Negotiation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IsClosed' value.
        /// </summary>
        [DataMember()]
        public bool IsClosed
        {
            get
            {
                return this._isClosed;
            }
            set
            {
                if ((this._isClosed != value))
                {
                    this.OnIsClosedChanging(value);
                    this.RaiseDataMemberChanging("IsClosed");
                    this.ValidateProperty("IsClosed", value);
                    this._isClosed = value;
                    this.RaiseDataMemberChanged("IsClosed");
                    this.OnIsClosedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaisePropertyChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationName' value.
        /// </summary>
        [DataMember()]
        public string NegotiationName
        {
            get
            {
                return this._negotiationName;
            }
            set
            {
                if ((this._negotiationName != value))
                {
                    this.OnNegotiationNameChanging(value);
                    this.RaiseDataMemberChanging("NegotiationName");
                    this.ValidateProperty("NegotiationName", value);
                    this._negotiationName = value;
                    this.RaiseDataMemberChanged("NegotiationName");
                    this.OnNegotiationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Negotiators' value.
        /// </summary>
        [DataMember()]
        public string Negotiators
        {
            get
            {
                return this._negotiators;
            }
            set
            {
                if ((this._negotiators != value))
                {
                    this.OnNegotiatorsChanging(value);
                    this.RaiseDataMemberChanging("Negotiators");
                    this.ValidateProperty("Negotiators", value);
                    this._negotiators = value;
                    this.RaiseDataMemberChanged("Negotiators");
                    this.OnNegotiatorsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> StatusID
        {
            get
            {
                return this._statusID;
            }
            set
            {
                if ((this._statusID != value))
                {
                    this.OnStatusIDChanging(value);
                    this.RaiseDataMemberChanging("StatusID");
                    this.ValidateProperty("StatusID", value);
                    this._statusID = value;
                    this.RaiseDataMemberChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationID;
        }
    }
    
    /// <summary>
    /// The 'NumericIssue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class NumericIssue : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private EntityRef<Issue> _issue;
        
        private Guid _issueID;
        
        private byte _maximumOperator;
        
        private decimal _maximumValue;
        
        private bool _maxOperatorBetter;
        
        private bool _maxOperatorEqual;
        
        private bool _maxOperatorWorse;
        
        private byte _minimumOperator;
        
        private decimal _minimumValue;
        
        private bool _minOperatorBetter;
        
        private bool _minOperatorEqual;
        
        private bool _minOperatorWorse;
        
        private Guid _numericIssueID;
        
        private decimal _optimumValueEnd;
        
        private decimal _optimumValueStart;
        
        private string _unit;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnMaximumOperatorChanging(byte value);
        partial void OnMaximumOperatorChanged();
        partial void OnMaximumValueChanging(decimal value);
        partial void OnMaximumValueChanged();
        partial void OnMaxOperatorBetterChanging(bool value);
        partial void OnMaxOperatorBetterChanged();
        partial void OnMaxOperatorEqualChanging(bool value);
        partial void OnMaxOperatorEqualChanged();
        partial void OnMaxOperatorWorseChanging(bool value);
        partial void OnMaxOperatorWorseChanged();
        partial void OnMinimumOperatorChanging(byte value);
        partial void OnMinimumOperatorChanged();
        partial void OnMinimumValueChanging(decimal value);
        partial void OnMinimumValueChanged();
        partial void OnMinOperatorBetterChanging(bool value);
        partial void OnMinOperatorBetterChanged();
        partial void OnMinOperatorEqualChanging(bool value);
        partial void OnMinOperatorEqualChanged();
        partial void OnMinOperatorWorseChanging(bool value);
        partial void OnMinOperatorWorseChanged();
        partial void OnNumericIssueIDChanging(Guid value);
        partial void OnNumericIssueIDChanged();
        partial void OnOptimumValueEndChanging(decimal value);
        partial void OnOptimumValueEndChanged();
        partial void OnOptimumValueStartChanging(decimal value);
        partial void OnOptimumValueStartChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NumericIssue"/> class.
        /// </summary>
        public NumericIssue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Issue"/> entity.
        /// </summary>
        [Association("Issue_NumericIssue", "IssueID", "IssueID", IsForeignKey=true)]
        [XmlIgnore()]
        public Issue Issue
        {
            get
            {
                if ((this._issue == null))
                {
                    this._issue = new EntityRef<Issue>(this, "Issue", this.FilterIssue);
                }
                return this._issue.Entity;
            }
            set
            {
                Issue previous = this.Issue;
                if ((previous != value))
                {
                    this.ValidateProperty("Issue", value);
                    if ((previous != null))
                    {
                        this._issue.Entity = null;
                        previous.NumericIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssueID = value.IssueID;
                    }
                    else
                    {
                        this.IssueID = default(Guid);
                    }
                    this._issue.Entity = value;
                    if ((value != null))
                    {
                        value.NumericIssues.Add(this);
                    }
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.RaiseDataMemberChanging("IssueID");
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaiseDataMemberChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaximumOperator' value.
        /// </summary>
        [DataMember()]
        public byte MaximumOperator
        {
            get
            {
                return this._maximumOperator;
            }
            set
            {
                if ((this._maximumOperator != value))
                {
                    this.OnMaximumOperatorChanging(value);
                    this.RaiseDataMemberChanging("MaximumOperator");
                    this.ValidateProperty("MaximumOperator", value);
                    this._maximumOperator = value;
                    this.RaiseDataMemberChanged("MaximumOperator");
                    this.OnMaximumOperatorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaximumValue' value.
        /// </summary>
        [DataMember()]
        public decimal MaximumValue
        {
            get
            {
                return this._maximumValue;
            }
            set
            {
                if ((this._maximumValue != value))
                {
                    this.OnMaximumValueChanging(value);
                    this.RaiseDataMemberChanging("MaximumValue");
                    this.ValidateProperty("MaximumValue", value);
                    this._maximumValue = value;
                    this.RaiseDataMemberChanged("MaximumValue");
                    this.OnMaximumValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxOperatorBetter' value.
        /// </summary>
        [DataMember()]
        public bool MaxOperatorBetter
        {
            get
            {
                return this._maxOperatorBetter;
            }
            set
            {
                if ((this._maxOperatorBetter != value))
                {
                    this.OnMaxOperatorBetterChanging(value);
                    this.RaiseDataMemberChanging("MaxOperatorBetter");
                    this.ValidateProperty("MaxOperatorBetter", value);
                    this._maxOperatorBetter = value;
                    this.RaiseDataMemberChanged("MaxOperatorBetter");
                    this.OnMaxOperatorBetterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxOperatorEqual' value.
        /// </summary>
        [DataMember()]
        public bool MaxOperatorEqual
        {
            get
            {
                return this._maxOperatorEqual;
            }
            set
            {
                if ((this._maxOperatorEqual != value))
                {
                    this.OnMaxOperatorEqualChanging(value);
                    this.RaiseDataMemberChanging("MaxOperatorEqual");
                    this.ValidateProperty("MaxOperatorEqual", value);
                    this._maxOperatorEqual = value;
                    this.RaiseDataMemberChanged("MaxOperatorEqual");
                    this.OnMaxOperatorEqualChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxOperatorWorse' value.
        /// </summary>
        [DataMember()]
        public bool MaxOperatorWorse
        {
            get
            {
                return this._maxOperatorWorse;
            }
            set
            {
                if ((this._maxOperatorWorse != value))
                {
                    this.OnMaxOperatorWorseChanging(value);
                    this.RaiseDataMemberChanging("MaxOperatorWorse");
                    this.ValidateProperty("MaxOperatorWorse", value);
                    this._maxOperatorWorse = value;
                    this.RaiseDataMemberChanged("MaxOperatorWorse");
                    this.OnMaxOperatorWorseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinimumOperator' value.
        /// </summary>
        [DataMember()]
        public byte MinimumOperator
        {
            get
            {
                return this._minimumOperator;
            }
            set
            {
                if ((this._minimumOperator != value))
                {
                    this.OnMinimumOperatorChanging(value);
                    this.RaiseDataMemberChanging("MinimumOperator");
                    this.ValidateProperty("MinimumOperator", value);
                    this._minimumOperator = value;
                    this.RaiseDataMemberChanged("MinimumOperator");
                    this.OnMinimumOperatorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinimumValue' value.
        /// </summary>
        [DataMember()]
        public decimal MinimumValue
        {
            get
            {
                return this._minimumValue;
            }
            set
            {
                if ((this._minimumValue != value))
                {
                    this.OnMinimumValueChanging(value);
                    this.RaiseDataMemberChanging("MinimumValue");
                    this.ValidateProperty("MinimumValue", value);
                    this._minimumValue = value;
                    this.RaiseDataMemberChanged("MinimumValue");
                    this.OnMinimumValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinOperatorBetter' value.
        /// </summary>
        [DataMember()]
        public bool MinOperatorBetter
        {
            get
            {
                return this._minOperatorBetter;
            }
            set
            {
                if ((this._minOperatorBetter != value))
                {
                    this.OnMinOperatorBetterChanging(value);
                    this.RaiseDataMemberChanging("MinOperatorBetter");
                    this.ValidateProperty("MinOperatorBetter", value);
                    this._minOperatorBetter = value;
                    this.RaiseDataMemberChanged("MinOperatorBetter");
                    this.OnMinOperatorBetterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinOperatorEqual' value.
        /// </summary>
        [DataMember()]
        public bool MinOperatorEqual
        {
            get
            {
                return this._minOperatorEqual;
            }
            set
            {
                if ((this._minOperatorEqual != value))
                {
                    this.OnMinOperatorEqualChanging(value);
                    this.RaiseDataMemberChanging("MinOperatorEqual");
                    this.ValidateProperty("MinOperatorEqual", value);
                    this._minOperatorEqual = value;
                    this.RaiseDataMemberChanged("MinOperatorEqual");
                    this.OnMinOperatorEqualChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinOperatorWorse' value.
        /// </summary>
        [DataMember()]
        public bool MinOperatorWorse
        {
            get
            {
                return this._minOperatorWorse;
            }
            set
            {
                if ((this._minOperatorWorse != value))
                {
                    this.OnMinOperatorWorseChanging(value);
                    this.RaiseDataMemberChanging("MinOperatorWorse");
                    this.ValidateProperty("MinOperatorWorse", value);
                    this._minOperatorWorse = value;
                    this.RaiseDataMemberChanged("MinOperatorWorse");
                    this.OnMinOperatorWorseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumericIssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NumericIssueID
        {
            get
            {
                return this._numericIssueID;
            }
            set
            {
                if ((this._numericIssueID != value))
                {
                    this.OnNumericIssueIDChanging(value);
                    this.ValidateProperty("NumericIssueID", value);
                    this._numericIssueID = value;
                    this.RaisePropertyChanged("NumericIssueID");
                    this.OnNumericIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptimumValueEnd' value.
        /// </summary>
        [DataMember()]
        public decimal OptimumValueEnd
        {
            get
            {
                return this._optimumValueEnd;
            }
            set
            {
                if ((this._optimumValueEnd != value))
                {
                    this.OnOptimumValueEndChanging(value);
                    this.RaiseDataMemberChanging("OptimumValueEnd");
                    this.ValidateProperty("OptimumValueEnd", value);
                    this._optimumValueEnd = value;
                    this.RaiseDataMemberChanged("OptimumValueEnd");
                    this.OnOptimumValueEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptimumValueStart' value.
        /// </summary>
        [DataMember()]
        public decimal OptimumValueStart
        {
            get
            {
                return this._optimumValueStart;
            }
            set
            {
                if ((this._optimumValueStart != value))
                {
                    this.OnOptimumValueStartChanging(value);
                    this.RaiseDataMemberChanging("OptimumValueStart");
                    this.ValidateProperty("OptimumValueStart", value);
                    this._optimumValueStart = value;
                    this.RaiseDataMemberChanged("OptimumValueStart");
                    this.OnOptimumValueStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Unit' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Unit
        {
            get
            {
                return this._unit;
            }
            set
            {
                if ((this._unit != value))
                {
                    this.OnUnitChanging(value);
                    this.RaiseDataMemberChanging("Unit");
                    this.ValidateProperty("Unit", value);
                    this._unit = value;
                    this.RaiseDataMemberChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }
        
        private bool FilterIssue(Issue entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._numericIssueID;
        }
    }
    
    /// <summary>
    /// The 'OptionIssue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class OptionIssue : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private bool _isNewOption;
        
        private bool _isSelected;
        
        private EntityRef<Issue> _issue;
        
        private Guid _issueID;
        
        private EntityCollection<MessageOptionIssue> _messageOptionIssues;
        
        private Guid _optionIssueID;
        
        private string _optionIssueValue;
        
        private decimal _optionIssueWeight;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIsNewOptionChanging(bool value);
        partial void OnIsNewOptionChanged();
        partial void OnIsSelectedChanging(bool value);
        partial void OnIsSelectedChanged();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnOptionIssueIDChanging(Guid value);
        partial void OnOptionIssueIDChanged();
        partial void OnOptionIssueValueChanging(string value);
        partial void OnOptionIssueValueChanged();
        partial void OnOptionIssueWeightChanging(decimal value);
        partial void OnOptionIssueWeightChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionIssue"/> class.
        /// </summary>
        public OptionIssue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsNewOption' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(true)]
        public bool IsNewOption
        {
            get
            {
                return this._isNewOption;
            }
            set
            {
                if ((this._isNewOption != value))
                {
                    this.OnIsNewOptionChanging(value);
                    this.RaiseDataMemberChanging("IsNewOption");
                    this.ValidateProperty("IsNewOption", value);
                    this._isNewOption = value;
                    this.RaiseDataMemberChanged("IsNewOption");
                    this.OnIsNewOptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSelected' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsSelected
        {
            get
            {
                return this._isSelected;
            }
            set
            {
                if ((this._isSelected != value))
                {
                    this.OnIsSelectedChanging(value);
                    this.RaiseDataMemberChanging("IsSelected");
                    this.ValidateProperty("IsSelected", value);
                    this._isSelected = value;
                    this.RaiseDataMemberChanged("IsSelected");
                    this.OnIsSelectedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Issue"/> entity.
        /// </summary>
        [Association("Issue_OptionIssue", "IssueID", "IssueID", IsForeignKey=true)]
        [XmlIgnore()]
        public Issue Issue
        {
            get
            {
                if ((this._issue == null))
                {
                    this._issue = new EntityRef<Issue>(this, "Issue", this.FilterIssue);
                }
                return this._issue.Entity;
            }
            set
            {
                Issue previous = this.Issue;
                if ((previous != value))
                {
                    this.ValidateProperty("Issue", value);
                    if ((previous != null))
                    {
                        this._issue.Entity = null;
                        previous.OptionIssues.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IssueID = value.IssueID;
                    }
                    else
                    {
                        this.IssueID = default(Guid);
                    }
                    this._issue.Entity = value;
                    if ((value != null))
                    {
                        value.OptionIssues.Add(this);
                    }
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.RaiseDataMemberChanging("IssueID");
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaiseDataMemberChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MessageOptionIssue"/> entities.
        /// </summary>
        [Association("OptionIssue_MessageOptionIssue", "OptionIssueID", "OptionIssueID")]
        [XmlIgnore()]
        public EntityCollection<MessageOptionIssue> MessageOptionIssues
        {
            get
            {
                if ((this._messageOptionIssues == null))
                {
                    this._messageOptionIssues = new EntityCollection<MessageOptionIssue>(this, "MessageOptionIssues", this.FilterMessageOptionIssues, this.AttachMessageOptionIssues, this.DetachMessageOptionIssues);
                }
                return this._messageOptionIssues;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionIssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid OptionIssueID
        {
            get
            {
                return this._optionIssueID;
            }
            set
            {
                if ((this._optionIssueID != value))
                {
                    this.OnOptionIssueIDChanging(value);
                    this.ValidateProperty("OptionIssueID", value);
                    this._optionIssueID = value;
                    this.RaisePropertyChanged("OptionIssueID");
                    this.OnOptionIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionIssueValue' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string OptionIssueValue
        {
            get
            {
                return this._optionIssueValue;
            }
            set
            {
                if ((this._optionIssueValue != value))
                {
                    this.OnOptionIssueValueChanging(value);
                    this.RaiseDataMemberChanging("OptionIssueValue");
                    this.ValidateProperty("OptionIssueValue", value);
                    this._optionIssueValue = value;
                    this.RaiseDataMemberChanged("OptionIssueValue");
                    this.OnOptionIssueValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionIssueWeight' value.
        /// </summary>
        [DataMember()]
        [Range(0, 100, ErrorMessageResourceType=typeof(ErrorResources), ErrorMessageResourceName="ValidationErrorMaxMinRange")]
        public decimal OptionIssueWeight
        {
            get
            {
                return this._optionIssueWeight;
            }
            set
            {
                if ((this._optionIssueWeight != value))
                {
                    this.OnOptionIssueWeightChanging(value);
                    this.RaiseDataMemberChanging("OptionIssueWeight");
                    this.ValidateProperty("OptionIssueWeight", value);
                    this._optionIssueWeight = value;
                    this.RaiseDataMemberChanged("OptionIssueWeight");
                    this.OnOptionIssueWeightChanged();
                }
            }
        }
        
        private bool FilterIssue(Issue entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        private void AttachMessageOptionIssues(MessageOptionIssue entity)
        {
            entity.OptionIssue = this;
        }
        
        private void DetachMessageOptionIssues(MessageOptionIssue entity)
        {
            entity.OptionIssue = null;
        }
        
        private bool FilterMessageOptionIssues(MessageOptionIssue entity)
        {
            return (entity.OptionIssueID == this.OptionIssueID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._optionIssueID;
        }
    }
    
    /// <summary>
    /// The 'Organization' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class Organization : Entity
    {
        
        private Guid _organizationID;
        
        private string _organizationName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnOrganizationIDChanging(Guid value);
        partial void OnOrganizationIDChanged();
        partial void OnOrganizationNameChanging(string value);
        partial void OnOrganizationNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization"/> class.
        /// </summary>
        public Organization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid OrganizationID
        {
            get
            {
                return this._organizationID;
            }
            set
            {
                if ((this._organizationID != value))
                {
                    this.OnOrganizationIDChanging(value);
                    this.ValidateProperty("OrganizationID", value);
                    this._organizationID = value;
                    this.RaisePropertyChanged("OrganizationID");
                    this.OnOrganizationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationName' value.
        /// </summary>
        [DataMember()]
        public string OrganizationName
        {
            get
            {
                return this._organizationName;
            }
            set
            {
                if ((this._organizationName != value))
                {
                    this.OnOrganizationNameChanging(value);
                    this.RaiseDataMemberChanging("OrganizationName");
                    this.ValidateProperty("OrganizationName", value);
                    this._organizationName = value;
                    this.RaiseDataMemberChanged("OrganizationName");
                    this.OnOrganizationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._organizationID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'PrefAppService' domain service.
    /// </summary>
    public sealed partial class PrefAppContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PrefAppContext"/> class.
        /// </summary>
        public PrefAppContext() : 
                this(new WebDomainClient<IPrefAppServiceContract>(new Uri("citPOINT-PrefApp-Data-Web-PrefAppService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PrefAppContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PrefAppService service URI.</param>
        public PrefAppContext(Uri serviceUri) : 
                this(new WebDomainClient<IPrefAppServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PrefAppContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public PrefAppContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ActionType"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<ActionType> ActionTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ActionType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Negotiation"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<Negotiation> Negotiations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Negotiation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OfferItem"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<OfferItem> OfferItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OfferItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CompletePreferenceSet"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<CompletePreferenceSet> CompletePreferenceSets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CompletePreferenceSet>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ConversationMessage"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<ConversationMessage> ConversationMessages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ConversationMessage>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ConversationPeriod"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<ConversationPeriod> ConversationPeriods
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ConversationPeriod>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Conversation"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<Conversation> Conversations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Conversation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CoordinatesPoints"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<CoordinatesPoints> CoordinatesPoints
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CoordinatesPoints>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="History"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<History> Histories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<History>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Issue"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<Issue> Issues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Issue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="IssueHistoryResult"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<IssueHistoryResult> IssueHistoryResults
        {
            get
            {
                return base.EntityContainer.GetEntitySet<IssueHistoryResult>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="IssueStatisticalsResult"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<IssueStatisticalsResult> IssueStatisticalsResults
        {
            get
            {
                return base.EntityContainer.GetEntitySet<IssueStatisticalsResult>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="IssueType"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<IssueType> IssueTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<IssueType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LastOfferDetails"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<LastOfferDetails> LastOfferDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LastOfferDetails>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="LaterRatedIssue"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<LaterRatedIssue> LaterRatedIssues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<LaterRatedIssue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MainPreferenceSet"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<MainPreferenceSet> MainPreferenceSets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MainPreferenceSet>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MessageIssue"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<MessageIssue> MessageIssues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MessageIssue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MessageLaterRatedIssue"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<MessageLaterRatedIssue> MessageLaterRatedIssues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MessageLaterRatedIssue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MessageOptionIssue"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<MessageOptionIssue> MessageOptionIssues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MessageOptionIssue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Message"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<Message> Messages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Message>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegConversation"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<NegConversation> NegConversations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegConversation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ExpectedTarget"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<ExpectedTarget> ExpectedTargets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ExpectedTarget>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NumericIssue"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<NumericIssue> NumericIssues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NumericIssue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OptionIssue"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<OptionIssue> OptionIssues
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OptionIssue>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Organization"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<Organization> Organizations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Organization>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PreferenceSet"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<PreferenceSet> PreferenceSets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PreferenceSet>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PreferenceSetNeg"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<PreferenceSetNeg> PreferenceSetNegs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PreferenceSetNeg>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PreferenceSetOrganization"/> entities that have been loaded into this <see cref="PrefAppContext"/> instance.
        /// </summary>
        public EntitySet<PreferenceSetOrganization> PreferenceSetOrganizations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PreferenceSetOrganization>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ActionType"/> entities using the 'GetActionTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ActionType"/> entities.</returns>
        public EntityQuery<ActionType> GetActionTypesQuery()
        {
            this.ValidateMethod("GetActionTypesQuery", null);
            return base.CreateQuery<ActionType>("GetActionTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Negotiation"/> entities using the 'GetAvailableNegotiationsToAnalysis' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="AppName">The value for the 'AppName' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Negotiation"/> entities.</returns>
        public EntityQuery<Negotiation> GetAvailableNegotiationsToAnalysisQuery(Guid UserID, string AppName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("AppName", AppName);
            this.ValidateMethod("GetAvailableNegotiationsToAnalysisQuery", parameters);
            return base.CreateQuery<Negotiation>("GetAvailableNegotiationsToAnalysis", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OfferItem"/> entities using the 'GetBaseOfferForConversation' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <param name="offerType">The value for the 'offerType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OfferItem"/> entities.</returns>
        public EntityQuery<OfferItem> GetBaseOfferForConversationQuery(Guid conversationID, OfferType offerType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            parameters.Add("offerType", offerType);
            this.ValidateMethod("GetBaseOfferForConversationQuery", parameters);
            return base.CreateQuery<OfferItem>("GetBaseOfferForConversation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OfferItem"/> entities using the 'GetBaseOfferForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="offerType">The value for the 'offerType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OfferItem"/> entities.</returns>
        public EntityQuery<OfferItem> GetBaseOfferForNegotiationQuery(Guid negotiationID, OfferType offerType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("offerType", offerType);
            this.ValidateMethod("GetBaseOfferForNegotiationQuery", parameters);
            return base.CreateQuery<OfferItem>("GetBaseOfferForNegotiation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CompletePreferenceSet"/> entities using the 'GetCompletePreferenceSetForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CompletePreferenceSet"/> entities.</returns>
        [OperationContract()]
        public EntityQuery<CompletePreferenceSet> GetCompletePreferenceSetForNegotiationQuery(Guid negotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            this.ValidateMethod("GetCompletePreferenceSetForNegotiationQuery", parameters);
            return base.CreateQuery<CompletePreferenceSet>("GetCompletePreferenceSetForNegotiation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationMessage"/> entities using the 'GetConversationMessages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationMessage"/> entities.</returns>
        public EntityQuery<ConversationMessage> GetConversationMessagesQuery()
        {
            this.ValidateMethod("GetConversationMessagesQuery", null);
            return base.CreateQuery<ConversationMessage>("GetConversationMessages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationPeriod"/> entities using the 'GetConversationPeriod' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationPeriod"/> entities.</returns>
        public EntityQuery<ConversationPeriod> GetConversationPeriodQuery(Guid conversationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            this.ValidateMethod("GetConversationPeriodQuery", parameters);
            return base.CreateQuery<ConversationPeriod>("GetConversationPeriod", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Conversation"/> entities using the 'GetConversationsByNegotiationID' query.
        /// </summary>
        /// <param name="NegIDs">The value for the 'NegIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Conversation"/> entities.</returns>
        public EntityQuery<Conversation> GetConversationsByNegotiationIDQuery(Guid[] NegIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegIDs", NegIDs);
            this.ValidateMethod("GetConversationsByNegotiationIDQuery", parameters);
            return base.CreateQuery<Conversation>("GetConversationsByNegotiationID", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationMessage"/> entities using the 'GetConvMessagesByConvIDs' query.
        /// </summary>
        /// <param name="conversationIDs">The value for the 'conversationIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationMessage"/> entities.</returns>
        public EntityQuery<ConversationMessage> GetConvMessagesByConvIDsQuery(Guid[] conversationIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationIDs", conversationIDs);
            this.ValidateMethod("GetConvMessagesByConvIDsQuery", parameters);
            return base.CreateQuery<ConversationMessage>("GetConvMessagesByConvIDs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CoordinatesPoints"/> entities using the 'GetGraphForConversation' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CoordinatesPoints"/> entities.</returns>
        public EntityQuery<CoordinatesPoints> GetGraphForConversationQuery(Guid conversationID, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetGraphForConversationQuery", parameters);
            return base.CreateQuery<CoordinatesPoints>("GetGraphForConversation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CoordinatesPoints"/> entities using the 'GetGraphForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CoordinatesPoints"/> entities.</returns>
        public EntityQuery<CoordinatesPoints> GetGraphForNegotiationQuery(Guid negotiationID, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetGraphForNegotiationQuery", parameters);
            return base.CreateQuery<CoordinatesPoints>("GetGraphForNegotiation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="History"/> entities using the 'GetHistories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="History"/> entities.</returns>
        public EntityQuery<History> GetHistoriesQuery()
        {
            this.ValidateMethod("GetHistoriesQuery", null);
            return base.CreateQuery<History>("GetHistories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Issue"/> entities using the 'GetIssues' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Issue"/> entities.</returns>
        public EntityQuery<Issue> GetIssuesQuery()
        {
            this.ValidateMethod("GetIssuesQuery", null);
            return base.CreateQuery<Issue>("GetIssues", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Issue"/> entities using the 'GetIssuesForPreferenceSet' query.
        /// </summary>
        /// <param name="PreferenceSetID">The value for the 'PreferenceSetID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Issue"/> entities.</returns>
        public EntityQuery<Issue> GetIssuesForPreferenceSetQuery(Guid PreferenceSetID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("PreferenceSetID", PreferenceSetID);
            this.ValidateMethod("GetIssuesForPreferenceSetQuery", parameters);
            return base.CreateQuery<Issue>("GetIssuesForPreferenceSet", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="IssueHistoryResult"/> entities using the 'GetIssuesHistory' query.
        /// </summary>
        /// <param name="searchKeyWord">The value for the 'searchKeyWord' parameter of the query.</param>
        /// <param name="currentNegotiationID">The value for the 'currentNegotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="IssueHistoryResult"/> entities.</returns>
        public EntityQuery<IssueHistoryResult> GetIssuesHistoryQuery(string searchKeyWord, Guid currentNegotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchKeyWord", searchKeyWord);
            parameters.Add("currentNegotiationID", currentNegotiationID);
            this.ValidateMethod("GetIssuesHistoryQuery", parameters);
            return base.CreateQuery<IssueHistoryResult>("GetIssuesHistory", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Issue"/> entities using the 'GetIssuesRelatedToSpecificUser' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Issue"/> entities.</returns>
        public EntityQuery<Issue> GetIssuesRelatedToSpecificUserQuery(Guid userID, Guid[] organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetIssuesRelatedToSpecificUserQuery", parameters);
            return base.CreateQuery<Issue>("GetIssuesRelatedToSpecificUser", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="IssueStatisticalsResult"/> entities using the 'GetIssueStatisticals' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="IssueStatisticalsResult"/> entities.</returns>
        public EntityQuery<IssueStatisticalsResult> GetIssueStatisticalsQuery(Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("GetIssueStatisticalsQuery", parameters);
            return base.CreateQuery<IssueStatisticalsResult>("GetIssueStatisticals", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="IssueType"/> entities using the 'GetIssueTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="IssueType"/> entities.</returns>
        public EntityQuery<IssueType> GetIssueTypesQuery()
        {
            this.ValidateMethod("GetIssueTypesQuery", null);
            return base.CreateQuery<IssueType>("GetIssueTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LastOfferDetails"/> entities using the 'GetLastOfferForConversation' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LastOfferDetails"/> entities.</returns>
        public EntityQuery<LastOfferDetails> GetLastOfferForConversationQuery(Guid conversationID, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetLastOfferForConversationQuery", parameters);
            return base.CreateQuery<LastOfferDetails>("GetLastOfferForConversation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LaterRatedIssue"/> entities using the 'GetLaterRatedIssues' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LaterRatedIssue"/> entities.</returns>
        public EntityQuery<LaterRatedIssue> GetLaterRatedIssuesQuery()
        {
            this.ValidateMethod("GetLaterRatedIssuesQuery", null);
            return base.CreateQuery<LaterRatedIssue>("GetLaterRatedIssues", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="LaterRatedIssue"/> entities using the 'GetLaterRatedIssuesRelatedToSpecificUser' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="LaterRatedIssue"/> entities.</returns>
        public EntityQuery<LaterRatedIssue> GetLaterRatedIssuesRelatedToSpecificUserQuery(Guid UserID, Guid[] organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetLaterRatedIssuesRelatedToSpecificUserQuery", parameters);
            return base.CreateQuery<LaterRatedIssue>("GetLaterRatedIssuesRelatedToSpecificUser", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MainPreferenceSet"/> entities using the 'GetMainPreferenceSets' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MainPreferenceSet"/> entities.</returns>
        public EntityQuery<MainPreferenceSet> GetMainPreferenceSetsQuery()
        {
            this.ValidateMethod("GetMainPreferenceSetsQuery", null);
            return base.CreateQuery<MainPreferenceSet>("GetMainPreferenceSets", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MessageIssue"/> entities using the 'GetMessageIssues' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MessageIssue"/> entities.</returns>
        public EntityQuery<MessageIssue> GetMessageIssuesQuery()
        {
            this.ValidateMethod("GetMessageIssuesQuery", null);
            return base.CreateQuery<MessageIssue>("GetMessageIssues", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MessageIssue"/> entities using the 'GetMessageIssuesByNegIDs' query.
        /// </summary>
        /// <param name="msgIDs">The value for the 'msgIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MessageIssue"/> entities.</returns>
        public EntityQuery<MessageIssue> GetMessageIssuesByNegIDsQuery(Guid[] msgIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msgIDs", msgIDs);
            this.ValidateMethod("GetMessageIssuesByNegIDsQuery", parameters);
            return base.CreateQuery<MessageIssue>("GetMessageIssuesByNegIDs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MessageLaterRatedIssue"/> entities using the 'GetMessageLaterRatedIssues' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MessageLaterRatedIssue"/> entities.</returns>
        public EntityQuery<MessageLaterRatedIssue> GetMessageLaterRatedIssuesQuery()
        {
            this.ValidateMethod("GetMessageLaterRatedIssuesQuery", null);
            return base.CreateQuery<MessageLaterRatedIssue>("GetMessageLaterRatedIssues", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MessageLaterRatedIssue"/> entities using the 'GetMessageLaterRatedIssuesByNegIDs' query.
        /// </summary>
        /// <param name="msgIssueIDs">The value for the 'msgIssueIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MessageLaterRatedIssue"/> entities.</returns>
        public EntityQuery<MessageLaterRatedIssue> GetMessageLaterRatedIssuesByNegIDsQuery(Guid[] msgIssueIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msgIssueIDs", msgIssueIDs);
            this.ValidateMethod("GetMessageLaterRatedIssuesByNegIDsQuery", parameters);
            return base.CreateQuery<MessageLaterRatedIssue>("GetMessageLaterRatedIssuesByNegIDs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MessageOptionIssue"/> entities using the 'GetMessageOptionIssues' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MessageOptionIssue"/> entities.</returns>
        public EntityQuery<MessageOptionIssue> GetMessageOptionIssuesQuery()
        {
            this.ValidateMethod("GetMessageOptionIssuesQuery", null);
            return base.CreateQuery<MessageOptionIssue>("GetMessageOptionIssues", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MessageOptionIssue"/> entities using the 'GetMessageOptionIssuesByNegIDs' query.
        /// </summary>
        /// <param name="msgIssueIDs">The value for the 'msgIssueIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MessageOptionIssue"/> entities.</returns>
        public EntityQuery<MessageOptionIssue> GetMessageOptionIssuesByNegIDsQuery(Guid[] msgIssueIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msgIssueIDs", msgIssueIDs);
            this.ValidateMethod("GetMessageOptionIssuesByNegIDsQuery", parameters);
            return base.CreateQuery<MessageOptionIssue>("GetMessageOptionIssuesByNegIDs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Message"/> entities using the 'GetMessagesByNegotiationID' query.
        /// </summary>
        /// <param name="NegIDs">The value for the 'NegIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Message"/> entities.</returns>
        public EntityQuery<Message> GetMessagesByNegotiationIDQuery(Nullable<Guid>[] NegIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegIDs", NegIDs);
            this.ValidateMethod("GetMessagesByNegotiationIDQuery", parameters);
            return base.CreateQuery<Message>("GetMessagesByNegotiationID", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegConversation"/> entities using the 'GetNegConversations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegConversation"/> entities.</returns>
        public EntityQuery<NegConversation> GetNegConversationsQuery()
        {
            this.ValidateMethod("GetNegConversationsQuery", null);
            return base.CreateQuery<NegConversation>("GetNegConversations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationPeriod"/> entities using the 'GetNegotiationPeriod' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationPeriod"/> entities.</returns>
        public EntityQuery<ConversationPeriod> GetNegotiationPeriodQuery(Guid negotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            this.ValidateMethod("GetNegotiationPeriodQuery", parameters);
            return base.CreateQuery<ConversationPeriod>("GetNegotiationPeriod", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Negotiation"/> entities using the 'GetNegotiationsByListOfIDs' query.
        /// </summary>
        /// <param name="NegIDs">The value for the 'NegIDs' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Negotiation"/> entities.</returns>
        public EntityQuery<Negotiation> GetNegotiationsByListOfIDsQuery(Guid[] NegIDs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("NegIDs", NegIDs);
            this.ValidateMethod("GetNegotiationsByListOfIDsQuery", parameters);
            return base.CreateQuery<Negotiation>("GetNegotiationsByListOfIDs", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExpectedTarget"/> entities using the 'GetNextExpectedTargetForConversation' query.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <param name="offerType">The value for the 'offerType' parameter of the query.</param>
        /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExpectedTarget"/> entities.</returns>
        public EntityQuery<ExpectedTarget> GetNextExpectedTargetForConversationQuery(Guid conversationID, OfferType offerType, decimal maxPercentage)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            parameters.Add("offerType", offerType);
            parameters.Add("maxPercentage", maxPercentage);
            this.ValidateMethod("GetNextExpectedTargetForConversationQuery", parameters);
            return base.CreateQuery<ExpectedTarget>("GetNextExpectedTargetForConversation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExpectedTarget"/> entities using the 'GetNextExpectedTargetForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="offerType">The value for the 'offerType' parameter of the query.</param>
        /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExpectedTarget"/> entities.</returns>
        public EntityQuery<ExpectedTarget> GetNextExpectedTargetForNegotiationQuery(Guid negotiationID, OfferType offerType, decimal maxPercentage)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("offerType", offerType);
            parameters.Add("maxPercentage", maxPercentage);
            this.ValidateMethod("GetNextExpectedTargetForNegotiationQuery", parameters);
            return base.CreateQuery<ExpectedTarget>("GetNextExpectedTargetForNegotiation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NumericIssue"/> entities using the 'GetNumericIssues' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NumericIssue"/> entities.</returns>
        public EntityQuery<NumericIssue> GetNumericIssuesQuery()
        {
            this.ValidateMethod("GetNumericIssuesQuery", null);
            return base.CreateQuery<NumericIssue>("GetNumericIssues", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NumericIssue"/> entities using the 'GetNumericIssuesRelatedToSpecificUser' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NumericIssue"/> entities.</returns>
        public EntityQuery<NumericIssue> GetNumericIssuesRelatedToSpecificUserQuery(Guid userID, Guid[] organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetNumericIssuesRelatedToSpecificUserQuery", parameters);
            return base.CreateQuery<NumericIssue>("GetNumericIssuesRelatedToSpecificUser", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionIssue"/> entities using the 'GetOptionIssues' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionIssue"/> entities.</returns>
        public EntityQuery<OptionIssue> GetOptionIssuesQuery()
        {
            this.ValidateMethod("GetOptionIssuesQuery", null);
            return base.CreateQuery<OptionIssue>("GetOptionIssues", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OptionIssue"/> entities using the 'GetOptionIssuesRelatedToSpecificUser' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OptionIssue"/> entities.</returns>
        public EntityQuery<OptionIssue> GetOptionIssuesRelatedToSpecificUserQuery(Guid UserID, Guid[] organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetOptionIssuesRelatedToSpecificUserQuery", parameters);
            return base.CreateQuery<OptionIssue>("GetOptionIssuesRelatedToSpecificUser", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Organization"/> entities using the 'GetOrganizationsForUser' query.
        /// </summary>
        /// <param name="UserID">The value for the 'UserID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Organization"/> entities.</returns>
        public EntityQuery<Organization> GetOrganizationsForUserQuery(Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("UserID", UserID);
            this.ValidateMethod("GetOrganizationsForUserQuery", parameters);
            return base.CreateQuery<Organization>("GetOrganizationsForUser", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PreferenceSet"/> entities using the 'GetPreferenceSetForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PreferenceSet"/> entities.</returns>
        public EntityQuery<PreferenceSet> GetPreferenceSetForNegotiationQuery(Guid negotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            this.ValidateMethod("GetPreferenceSetForNegotiationQuery", parameters);
            return base.CreateQuery<PreferenceSet>("GetPreferenceSetForNegotiation", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PreferenceSetNeg"/> entities using the 'GetPreferenceSetNegs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PreferenceSetNeg"/> entities.</returns>
        public EntityQuery<PreferenceSetNeg> GetPreferenceSetNegsQuery()
        {
            this.ValidateMethod("GetPreferenceSetNegsQuery", null);
            return base.CreateQuery<PreferenceSetNeg>("GetPreferenceSetNegs", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PreferenceSetOrganization"/> entities using the 'GetPreferenceSetOrganizations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PreferenceSetOrganization"/> entities.</returns>
        public EntityQuery<PreferenceSetOrganization> GetPreferenceSetOrganizationsQuery()
        {
            this.ValidateMethod("GetPreferenceSetOrganizationsQuery", null);
            return base.CreateQuery<PreferenceSetOrganization>("GetPreferenceSetOrganizations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PreferenceSetOrganization"/> entities using the 'GetPreferenceSetOrganizationsForUser' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PreferenceSetOrganization"/> entities.</returns>
        public EntityQuery<PreferenceSetOrganization> GetPreferenceSetOrganizationsForUserQuery(Guid userID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            this.ValidateMethod("GetPreferenceSetOrganizationsForUserQuery", parameters);
            return base.CreateQuery<PreferenceSetOrganization>("GetPreferenceSetOrganizationsForUser", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PreferenceSet"/> entities using the 'GetPreferenceSetsByID' query.
        /// </summary>
        /// <param name="preferenceSetID">The value for the 'preferenceSetID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PreferenceSet"/> entities.</returns>
        public EntityQuery<PreferenceSet> GetPreferenceSetsByIDQuery(Guid preferenceSetID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("preferenceSetID", preferenceSetID);
            this.ValidateMethod("GetPreferenceSetsByIDQuery", parameters);
            return base.CreateQuery<PreferenceSet>("GetPreferenceSetsByID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PreferenceSet"/> entities using the 'GetPreferenceSetsForUser' query.
        /// </summary>
        /// <param name="userID">The value for the 'userID' parameter of the query.</param>
        /// <param name="organizationID">The value for the 'organizationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PreferenceSet"/> entities.</returns>
        public EntityQuery<PreferenceSet> GetPreferenceSetsForUserQuery(Guid userID, Guid[] organizationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userID", userID);
            parameters.Add("organizationID", organizationID);
            this.ValidateMethod("GetPreferenceSetsForUserQuery", parameters);
            return base.CreateQuery<PreferenceSet>("GetPreferenceSetsForUser", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConversationScore' method of the domain service.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<decimal> GetConversationScore(Guid conversationID, bool isSent, Action<InvokeOperation<decimal>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetConversationScore", parameters);
            return ((InvokeOperation<decimal>)(this.InvokeOperation("GetConversationScore", typeof(decimal), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetConversationScore' method of the domain service.
        /// </summary>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<decimal> GetConversationScore(Guid conversationID, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetConversationScore", parameters);
            return ((InvokeOperation<decimal>)(this.InvokeOperation("GetConversationScore", typeof(decimal), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetLastValueOfIssue' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetLastValueOfIssue(Guid issueID, Guid conversationID, bool isSent, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetLastValueOfIssue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetLastValueOfIssue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetLastValueOfIssue' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetLastValueOfIssue(Guid issueID, Guid conversationID, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetLastValueOfIssue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetLastValueOfIssue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMaxValue' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<double> GetMaxValue(Guid issueID, Action<InvokeOperation<double>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            this.ValidateMethod("GetMaxValue", parameters);
            return ((InvokeOperation<double>)(this.InvokeOperation("GetMaxValue", typeof(double), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMaxValue' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<double> GetMaxValue(Guid issueID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            this.ValidateMethod("GetMaxValue", parameters);
            return ((InvokeOperation<double>)(this.InvokeOperation("GetMaxValue", typeof(double), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMinValue' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<double> GetMinValue(Guid issueID, Action<InvokeOperation<double>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            this.ValidateMethod("GetMinValue", parameters);
            return ((InvokeOperation<double>)(this.InvokeOperation("GetMinValue", typeof(double), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMinValue' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<double> GetMinValue(Guid issueID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            this.ValidateMethod("GetMinValue", parameters);
            return ((InvokeOperation<double>)(this.InvokeOperation("GetMinValue", typeof(double), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetNextOfferID' method of the domain service.
        /// </summary>
        /// <param name="ConversationID">The value for the 'ConversationID' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetNextOfferID(Guid ConversationID, bool isSent, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ConversationID", ConversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetNextOfferID", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetNextOfferID", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetNextOfferID' method of the domain service.
        /// </summary>
        /// <param name="ConversationID">The value for the 'ConversationID' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetNextOfferID(Guid ConversationID, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ConversationID", ConversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetNextOfferID", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetNextOfferID", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetPossibleValues' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetPossibleValues(Guid issueID, Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            this.ValidateMethod("GetPossibleValues", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetPossibleValues", typeof(IEnumerable<string>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetPossibleValues' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetPossibleValues(Guid issueID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            this.ValidateMethod("GetPossibleValues", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetPossibleValues", typeof(IEnumerable<string>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetValueOfIssue' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetValueOfIssue(Guid issueID, Guid conversationID, bool isSent, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetValueOfIssue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetValueOfIssue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetValueOfIssue' method of the domain service.
        /// </summary>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetValueOfIssue(Guid issueID, Guid conversationID, bool isSent)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("issueID", issueID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("isSent", isSent);
            this.ValidateMethod("GetValueOfIssue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetValueOfIssue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'OfferFinished' method of the domain service.
        /// </summary>
        /// <param name="OfferID">The value for the 'OfferID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation OfferFinished(Guid OfferID, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("OfferID", OfferID);
            this.ValidateMethod("OfferFinished", parameters);
            return this.InvokeOperation("OfferFinished", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'OfferFinished' method of the domain service.
        /// </summary>
        /// <param name="OfferID">The value for the 'OfferID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation OfferFinished(Guid OfferID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("OfferID", OfferID);
            this.ValidateMethod("OfferFinished", parameters);
            return this.InvokeOperation("OfferFinished", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RetrieveApplicationDMStatus' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RetrieveApplicationDMStatus(string AppName, Guid UserID, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            this.ValidateMethod("RetrieveApplicationDMStatus", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RetrieveApplicationDMStatus", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RetrieveApplicationDMStatus' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RetrieveApplicationDMStatus(string AppName, Guid UserID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            this.ValidateMethod("RetrieveApplicationDMStatus", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RetrieveApplicationDMStatus", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendAppsStatisticalsMessages' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SendAppsStatisticalsMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            this.ValidateMethod("SendAppsStatisticalsMessages", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SendAppsStatisticalsMessages", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SendAppsStatisticalsMessages' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
        /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
        /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
        /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
        /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SendAppsStatisticalsMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("messageContent", messageContent);
            parameters.Add("messageSubject", messageSubject);
            parameters.Add("messageSender", messageSender);
            parameters.Add("messageReceiver", messageReceiver);
            this.ValidateMethod("SendAppsStatisticalsMessages", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SendAppsStatisticalsMessages", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetValueOfIssue' method of the domain service.
        /// </summary>
        /// <param name="offerID">The value for the 'offerID' parameter of this action.</param>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SetValueOfIssue(Guid offerID, Guid issueID, string value, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("offerID", offerID);
            parameters.Add("issueID", issueID);
            parameters.Add("value", value);
            this.ValidateMethod("SetValueOfIssue", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SetValueOfIssue", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetValueOfIssue' method of the domain service.
        /// </summary>
        /// <param name="offerID">The value for the 'offerID' parameter of this action.</param>
        /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
        /// <param name="value">The value for the 'value' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> SetValueOfIssue(Guid offerID, Guid issueID, string value)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("offerID", offerID);
            parameters.Add("issueID", issueID);
            parameters.Add("value", value);
            this.ValidateMethod("SetValueOfIssue", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("SetValueOfIssue", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateDataMatchingStatusInAddon' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IsActive">The value for the 'IsActive' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateDataMatchingStatusInAddon(string AppName, Guid UserID, bool IsActive, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("IsActive", IsActive);
            this.ValidateMethod("UpdateDataMatchingStatusInAddon", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateDataMatchingStatusInAddon", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UpdateDataMatchingStatusInAddon' method of the domain service.
        /// </summary>
        /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
        /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
        /// <param name="IsActive">The value for the 'IsActive' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UpdateDataMatchingStatusInAddon(string AppName, Guid UserID, bool IsActive)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("AppName", AppName);
            parameters.Add("UserID", UserID);
            parameters.Add("IsActive", IsActive);
            this.ValidateMethod("UpdateDataMatchingStatusInAddon", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UpdateDataMatchingStatusInAddon", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PrefAppContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PrefAppService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IPrefAppServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetActionTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetActionTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetActionTypes", ReplyAction="http://tempuri.org/PrefAppService/GetActionTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetActionTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActionTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActionTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActionTypes' operation.</returns>
            QueryResult<ActionType> EndGetActionTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAvailableNegotiationsToAnalysis' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetAvailableNegotiationsToAnalysisDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetAvailableNegotiationsToAnalysis", ReplyAction="http://tempuri.org/PrefAppService/GetAvailableNegotiationsToAnalysisResponse")]
            IAsyncResult BeginGetAvailableNegotiationsToAnalysis(Guid UserID, string AppName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAvailableNegotiationsToAnalysis'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAvailableNegotiationsToAnalysis'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAvailableNegotiationsToAnalysis' operation.</returns>
            QueryResult<Negotiation> EndGetAvailableNegotiationsToAnalysis(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBaseOfferForConversation' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="offerType">The value for the 'offerType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetBaseOfferForConversationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetBaseOfferForConversation", ReplyAction="http://tempuri.org/PrefAppService/GetBaseOfferForConversationResponse")]
            [WebGet()]
            IAsyncResult BeginGetBaseOfferForConversation(Guid conversationID, OfferType offerType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBaseOfferForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBaseOfferForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBaseOfferForConversation' operation.</returns>
            QueryResult<OfferItem> EndGetBaseOfferForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetBaseOfferForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="offerType">The value for the 'offerType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetBaseOfferForNegotiationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetBaseOfferForNegotiation", ReplyAction="http://tempuri.org/PrefAppService/GetBaseOfferForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetBaseOfferForNegotiation(Guid negotiationID, OfferType offerType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBaseOfferForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBaseOfferForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBaseOfferForNegotiation' operation.</returns>
            QueryResult<OfferItem> EndGetBaseOfferForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompletePreferenceSetForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetCompletePreferenceSetForNegotiationDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetCompletePreferenceSetForNegotiation", ReplyAction="http://tempuri.org/PrefAppService/GetCompletePreferenceSetForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompletePreferenceSetForNegotiation(Guid negotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompletePreferenceSetForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompletePreferenceSetForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompletePreferenceSetForNegotiation' operation.</returns>
            QueryResult<CompletePreferenceSet> EndGetCompletePreferenceSetForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationMessages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetConversationMessagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetConversationMessages", ReplyAction="http://tempuri.org/PrefAppService/GetConversationMessagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetConversationMessages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationMessages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationMessages' operation.</returns>
            QueryResult<ConversationMessage> EndGetConversationMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationPeriod' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetConversationPeriodDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetConversationPeriod", ReplyAction="http://tempuri.org/PrefAppService/GetConversationPeriodResponse")]
            [WebGet()]
            IAsyncResult BeginGetConversationPeriod(Guid conversationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationPeriod'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationPeriod'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationPeriod' operation.</returns>
            QueryResult<ConversationPeriod> EndGetConversationPeriod(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationsByNegotiationID' operation.
            /// </summary>
            /// <param name="NegIDs">The value for the 'NegIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetConversationsByNegotiationIDDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetConversationsByNegotiationID", ReplyAction="http://tempuri.org/PrefAppService/GetConversationsByNegotiationIDResponse")]
            IAsyncResult BeginGetConversationsByNegotiationID(Guid[] NegIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationsByNegotiationID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationsByNegotiationID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationsByNegotiationID' operation.</returns>
            QueryResult<Conversation> EndGetConversationsByNegotiationID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationScore' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetConversationScoreDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetConversationScore", ReplyAction="http://tempuri.org/PrefAppService/GetConversationScoreResponse")]
            IAsyncResult BeginGetConversationScore(Guid conversationID, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationScore'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationScore'.</param>
            /// <returns>The 'Decimal' returned from the 'GetConversationScore' operation.</returns>
            decimal EndGetConversationScore(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConvMessagesByConvIDs' operation.
            /// </summary>
            /// <param name="conversationIDs">The value for the 'conversationIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetConvMessagesByConvIDsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetConvMessagesByConvIDs", ReplyAction="http://tempuri.org/PrefAppService/GetConvMessagesByConvIDsResponse")]
            [WebGet()]
            IAsyncResult BeginGetConvMessagesByConvIDs(Guid[] conversationIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConvMessagesByConvIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConvMessagesByConvIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConvMessagesByConvIDs' operation.</returns>
            QueryResult<ConversationMessage> EndGetConvMessagesByConvIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGraphForConversation' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetGraphForConversationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetGraphForConversation", ReplyAction="http://tempuri.org/PrefAppService/GetGraphForConversationResponse")]
            [WebGet()]
            IAsyncResult BeginGetGraphForConversation(Guid conversationID, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGraphForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGraphForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGraphForConversation' operation.</returns>
            QueryResult<CoordinatesPoints> EndGetGraphForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGraphForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetGraphForNegotiationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetGraphForNegotiation", ReplyAction="http://tempuri.org/PrefAppService/GetGraphForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetGraphForNegotiation(Guid negotiationID, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGraphForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGraphForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGraphForNegotiation' operation.</returns>
            QueryResult<CoordinatesPoints> EndGetGraphForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetHistories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetHistoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetHistories", ReplyAction="http://tempuri.org/PrefAppService/GetHistoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetHistories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHistories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHistories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetHistories' operation.</returns>
            QueryResult<History> EndGetHistories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIssues' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetIssuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetIssues", ReplyAction="http://tempuri.org/PrefAppService/GetIssuesResponse")]
            [WebGet()]
            IAsyncResult BeginGetIssues(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIssues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIssues'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIssues' operation.</returns>
            QueryResult<Issue> EndGetIssues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIssuesForPreferenceSet' operation.
            /// </summary>
            /// <param name="PreferenceSetID">The value for the 'PreferenceSetID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetIssuesForPreferenceSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetIssuesForPreferenceSet", ReplyAction="http://tempuri.org/PrefAppService/GetIssuesForPreferenceSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetIssuesForPreferenceSet(Guid PreferenceSetID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIssuesForPreferenceSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIssuesForPreferenceSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIssuesForPreferenceSet' operation.</returns>
            QueryResult<Issue> EndGetIssuesForPreferenceSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIssuesHistory' operation.
            /// </summary>
            /// <param name="searchKeyWord">The value for the 'searchKeyWord' parameter of this action.</param>
            /// <param name="currentNegotiationID">The value for the 'currentNegotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetIssuesHistoryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetIssuesHistory", ReplyAction="http://tempuri.org/PrefAppService/GetIssuesHistoryResponse")]
            [WebGet()]
            IAsyncResult BeginGetIssuesHistory(string searchKeyWord, Guid currentNegotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIssuesHistory'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIssuesHistory'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIssuesHistory' operation.</returns>
            QueryResult<IssueHistoryResult> EndGetIssuesHistory(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIssuesRelatedToSpecificUser' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetIssuesRelatedToSpecificUserDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetIssuesRelatedToSpecificUser", ReplyAction="http://tempuri.org/PrefAppService/GetIssuesRelatedToSpecificUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetIssuesRelatedToSpecificUser(Guid userID, Guid[] organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIssuesRelatedToSpecificUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIssuesRelatedToSpecificUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIssuesRelatedToSpecificUser' operation.</returns>
            QueryResult<Issue> EndGetIssuesRelatedToSpecificUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIssueStatisticals' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetIssueStatisticalsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetIssueStatisticals", ReplyAction="http://tempuri.org/PrefAppService/GetIssueStatisticalsResponse")]
            [WebGet()]
            IAsyncResult BeginGetIssueStatisticals(Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIssueStatisticals'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIssueStatisticals'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIssueStatisticals' operation.</returns>
            QueryResult<IssueStatisticalsResult> EndGetIssueStatisticals(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIssueTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetIssueTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetIssueTypes", ReplyAction="http://tempuri.org/PrefAppService/GetIssueTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetIssueTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIssueTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIssueTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIssueTypes' operation.</returns>
            QueryResult<IssueType> EndGetIssueTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLastOfferForConversation' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetLastOfferForConversationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetLastOfferForConversation", ReplyAction="http://tempuri.org/PrefAppService/GetLastOfferForConversationResponse")]
            [WebGet()]
            IAsyncResult BeginGetLastOfferForConversation(Guid conversationID, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLastOfferForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLastOfferForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLastOfferForConversation' operation.</returns>
            QueryResult<LastOfferDetails> EndGetLastOfferForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLastValueOfIssue' operation.
            /// </summary>
            /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetLastValueOfIssueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetLastValueOfIssue", ReplyAction="http://tempuri.org/PrefAppService/GetLastValueOfIssueResponse")]
            IAsyncResult BeginGetLastValueOfIssue(Guid issueID, Guid conversationID, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLastValueOfIssue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLastValueOfIssue'.</param>
            /// <returns>The 'String' returned from the 'GetLastValueOfIssue' operation.</returns>
            string EndGetLastValueOfIssue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLaterRatedIssues' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetLaterRatedIssuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetLaterRatedIssues", ReplyAction="http://tempuri.org/PrefAppService/GetLaterRatedIssuesResponse")]
            [WebGet()]
            IAsyncResult BeginGetLaterRatedIssues(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLaterRatedIssues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLaterRatedIssues'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLaterRatedIssues' operation.</returns>
            QueryResult<LaterRatedIssue> EndGetLaterRatedIssues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLaterRatedIssuesRelatedToSpecificUser' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetLaterRatedIssuesRelatedToSpecificUserDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetLaterRatedIssuesRelatedToSpecificUser", ReplyAction="http://tempuri.org/PrefAppService/GetLaterRatedIssuesRelatedToSpecificUserRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginGetLaterRatedIssuesRelatedToSpecificUser(Guid UserID, Guid[] organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLaterRatedIssuesRelatedToSpecificUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLaterRatedIssuesRelatedToSpecificUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLaterRatedIssuesRelatedToSpecificUser' operation.</returns>
            QueryResult<LaterRatedIssue> EndGetLaterRatedIssuesRelatedToSpecificUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMainPreferenceSets' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMainPreferenceSetsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMainPreferenceSets", ReplyAction="http://tempuri.org/PrefAppService/GetMainPreferenceSetsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMainPreferenceSets(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMainPreferenceSets'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMainPreferenceSets'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMainPreferenceSets' operation.</returns>
            QueryResult<MainPreferenceSet> EndGetMainPreferenceSets(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMaxValue' operation.
            /// </summary>
            /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMaxValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMaxValue", ReplyAction="http://tempuri.org/PrefAppService/GetMaxValueResponse")]
            IAsyncResult BeginGetMaxValue(Guid issueID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMaxValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMaxValue'.</param>
            /// <returns>The 'Double' returned from the 'GetMaxValue' operation.</returns>
            double EndGetMaxValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessageIssues' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMessageIssuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMessageIssues", ReplyAction="http://tempuri.org/PrefAppService/GetMessageIssuesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessageIssues(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessageIssues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessageIssues'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessageIssues' operation.</returns>
            QueryResult<MessageIssue> EndGetMessageIssues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessageIssuesByNegIDs' operation.
            /// </summary>
            /// <param name="msgIDs">The value for the 'msgIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMessageIssuesByNegIDsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMessageIssuesByNegIDs", ReplyAction="http://tempuri.org/PrefAppService/GetMessageIssuesByNegIDsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessageIssuesByNegIDs(Guid[] msgIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessageIssuesByNegIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessageIssuesByNegIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessageIssuesByNegIDs' operation.</returns>
            QueryResult<MessageIssue> EndGetMessageIssuesByNegIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessageLaterRatedIssues' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMessageLaterRatedIssuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMessageLaterRatedIssues", ReplyAction="http://tempuri.org/PrefAppService/GetMessageLaterRatedIssuesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessageLaterRatedIssues(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessageLaterRatedIssues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessageLaterRatedIssues'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessageLaterRatedIssues' operation.</returns>
            QueryResult<MessageLaterRatedIssue> EndGetMessageLaterRatedIssues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessageLaterRatedIssuesByNegIDs' operation.
            /// </summary>
            /// <param name="msgIssueIDs">The value for the 'msgIssueIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMessageLaterRatedIssuesByNegIDsDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMessageLaterRatedIssuesByNegIDs", ReplyAction="http://tempuri.org/PrefAppService/GetMessageLaterRatedIssuesByNegIDsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessageLaterRatedIssuesByNegIDs(Guid[] msgIssueIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessageLaterRatedIssuesByNegIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessageLaterRatedIssuesByNegIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessageLaterRatedIssuesByNegIDs' operation.</returns>
            QueryResult<MessageLaterRatedIssue> EndGetMessageLaterRatedIssuesByNegIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessageOptionIssues' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMessageOptionIssuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMessageOptionIssues", ReplyAction="http://tempuri.org/PrefAppService/GetMessageOptionIssuesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessageOptionIssues(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessageOptionIssues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessageOptionIssues'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessageOptionIssues' operation.</returns>
            QueryResult<MessageOptionIssue> EndGetMessageOptionIssues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessageOptionIssuesByNegIDs' operation.
            /// </summary>
            /// <param name="msgIssueIDs">The value for the 'msgIssueIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMessageOptionIssuesByNegIDsDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMessageOptionIssuesByNegIDs", ReplyAction="http://tempuri.org/PrefAppService/GetMessageOptionIssuesByNegIDsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMessageOptionIssuesByNegIDs(Guid[] msgIssueIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessageOptionIssuesByNegIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessageOptionIssuesByNegIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessageOptionIssuesByNegIDs' operation.</returns>
            QueryResult<MessageOptionIssue> EndGetMessageOptionIssuesByNegIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessagesByNegotiationID' operation.
            /// </summary>
            /// <param name="NegIDs">The value for the 'NegIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMessagesByNegotiationIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMessagesByNegotiationID", ReplyAction="http://tempuri.org/PrefAppService/GetMessagesByNegotiationIDResponse")]
            IAsyncResult BeginGetMessagesByNegotiationID(Nullable<Guid>[] NegIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessagesByNegotiationID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessagesByNegotiationID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMessagesByNegotiationID' operation.</returns>
            QueryResult<Message> EndGetMessagesByNegotiationID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMinValue' operation.
            /// </summary>
            /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetMinValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetMinValue", ReplyAction="http://tempuri.org/PrefAppService/GetMinValueResponse")]
            IAsyncResult BeginGetMinValue(Guid issueID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMinValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMinValue'.</param>
            /// <returns>The 'Double' returned from the 'GetMinValue' operation.</returns>
            double EndGetMinValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegConversations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetNegConversationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetNegConversations", ReplyAction="http://tempuri.org/PrefAppService/GetNegConversationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegConversations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegConversations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegConversations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegConversations' operation.</returns>
            QueryResult<NegConversation> EndGetNegConversations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationPeriod' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetNegotiationPeriodDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetNegotiationPeriod", ReplyAction="http://tempuri.org/PrefAppService/GetNegotiationPeriodResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationPeriod(Guid negotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationPeriod'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationPeriod'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationPeriod' operation.</returns>
            QueryResult<ConversationPeriod> EndGetNegotiationPeriod(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationsByListOfIDs' operation.
            /// </summary>
            /// <param name="NegIDs">The value for the 'NegIDs' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetNegotiationsByListOfIDsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetNegotiationsByListOfIDs", ReplyAction="http://tempuri.org/PrefAppService/GetNegotiationsByListOfIDsResponse")]
            IAsyncResult BeginGetNegotiationsByListOfIDs(Guid[] NegIDs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationsByListOfIDs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationsByListOfIDs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationsByListOfIDs' operation.</returns>
            QueryResult<Negotiation> EndGetNegotiationsByListOfIDs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNextExpectedTargetForConversation' operation.
            /// </summary>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="offerType">The value for the 'offerType' parameter of this action.</param>
            /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetNextExpectedTargetForConversationDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetNextExpectedTargetForConversation", ReplyAction="http://tempuri.org/PrefAppService/GetNextExpectedTargetForConversationResponse")]
            [WebGet()]
            IAsyncResult BeginGetNextExpectedTargetForConversation(Guid conversationID, OfferType offerType, decimal maxPercentage, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNextExpectedTargetForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNextExpectedTargetForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNextExpectedTargetForConversation' operation.</returns>
            QueryResult<ExpectedTarget> EndGetNextExpectedTargetForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNextExpectedTargetForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="offerType">The value for the 'offerType' parameter of this action.</param>
            /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetNextExpectedTargetForNegotiationDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetNextExpectedTargetForNegotiation", ReplyAction="http://tempuri.org/PrefAppService/GetNextExpectedTargetForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetNextExpectedTargetForNegotiation(Guid negotiationID, OfferType offerType, decimal maxPercentage, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNextExpectedTargetForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNextExpectedTargetForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNextExpectedTargetForNegotiation' operation.</returns>
            QueryResult<ExpectedTarget> EndGetNextExpectedTargetForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNextOfferID' operation.
            /// </summary>
            /// <param name="ConversationID">The value for the 'ConversationID' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetNextOfferIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetNextOfferID", ReplyAction="http://tempuri.org/PrefAppService/GetNextOfferIDResponse")]
            IAsyncResult BeginGetNextOfferID(Guid ConversationID, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNextOfferID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNextOfferID'.</param>
            /// <returns>The 'String' returned from the 'GetNextOfferID' operation.</returns>
            string EndGetNextOfferID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNumericIssues' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetNumericIssuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetNumericIssues", ReplyAction="http://tempuri.org/PrefAppService/GetNumericIssuesResponse")]
            [WebGet()]
            IAsyncResult BeginGetNumericIssues(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNumericIssues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNumericIssues'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNumericIssues' operation.</returns>
            QueryResult<NumericIssue> EndGetNumericIssues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNumericIssuesRelatedToSpecificUser' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetNumericIssuesRelatedToSpecificUserDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetNumericIssuesRelatedToSpecificUser", ReplyAction="http://tempuri.org/PrefAppService/GetNumericIssuesRelatedToSpecificUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetNumericIssuesRelatedToSpecificUser(Guid userID, Guid[] organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNumericIssuesRelatedToSpecificUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNumericIssuesRelatedToSpecificUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNumericIssuesRelatedToSpecificUser' operation.</returns>
            QueryResult<NumericIssue> EndGetNumericIssuesRelatedToSpecificUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOptionIssues' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetOptionIssuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetOptionIssues", ReplyAction="http://tempuri.org/PrefAppService/GetOptionIssuesResponse")]
            [WebGet()]
            IAsyncResult BeginGetOptionIssues(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOptionIssues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOptionIssues'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOptionIssues' operation.</returns>
            QueryResult<OptionIssue> EndGetOptionIssues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOptionIssuesRelatedToSpecificUser' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetOptionIssuesRelatedToSpecificUserDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetOptionIssuesRelatedToSpecificUser", ReplyAction="http://tempuri.org/PrefAppService/GetOptionIssuesRelatedToSpecificUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetOptionIssuesRelatedToSpecificUser(Guid UserID, Guid[] organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOptionIssuesRelatedToSpecificUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOptionIssuesRelatedToSpecificUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOptionIssuesRelatedToSpecificUser' operation.</returns>
            QueryResult<OptionIssue> EndGetOptionIssuesRelatedToSpecificUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizationsForUser' operation.
            /// </summary>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetOrganizationsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetOrganizationsForUser", ReplyAction="http://tempuri.org/PrefAppService/GetOrganizationsForUserResponse")]
            IAsyncResult BeginGetOrganizationsForUser(Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizationsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizationsForUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizationsForUser' operation.</returns>
            QueryResult<Organization> EndGetOrganizationsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPossibleValues' operation.
            /// </summary>
            /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetPossibleValuesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetPossibleValues", ReplyAction="http://tempuri.org/PrefAppService/GetPossibleValuesResponse")]
            IAsyncResult BeginGetPossibleValues(Guid issueID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPossibleValues'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPossibleValues'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetPossibleValues' operation.</returns>
            IEnumerable<string> EndGetPossibleValues(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferenceSetForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetPreferenceSetForNegotiationDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetPreferenceSetForNegotiation", ReplyAction="http://tempuri.org/PrefAppService/GetPreferenceSetForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferenceSetForNegotiation(Guid negotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferenceSetForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferenceSetForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferenceSetForNegotiation' operation.</returns>
            QueryResult<PreferenceSet> EndGetPreferenceSetForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferenceSetNegs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetPreferenceSetNegsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetPreferenceSetNegs", ReplyAction="http://tempuri.org/PrefAppService/GetPreferenceSetNegsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferenceSetNegs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferenceSetNegs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferenceSetNegs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferenceSetNegs' operation.</returns>
            QueryResult<PreferenceSetNeg> EndGetPreferenceSetNegs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferenceSetOrganizations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetPreferenceSetOrganizationsDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetPreferenceSetOrganizations", ReplyAction="http://tempuri.org/PrefAppService/GetPreferenceSetOrganizationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferenceSetOrganizations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferenceSetOrganizations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferenceSetOrganizations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferenceSetOrganizations' operation.</returns>
            QueryResult<PreferenceSetOrganization> EndGetPreferenceSetOrganizations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferenceSetOrganizationsForUser' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetPreferenceSetOrganizationsForUserDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetPreferenceSetOrganizationsForUser", ReplyAction="http://tempuri.org/PrefAppService/GetPreferenceSetOrganizationsForUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferenceSetOrganizationsForUser(Guid userID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferenceSetOrganizationsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferenceSetOrganizationsForUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferenceSetOrganizationsForUser' operation.</returns>
            QueryResult<PreferenceSetOrganization> EndGetPreferenceSetOrganizationsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferenceSetsByID' operation.
            /// </summary>
            /// <param name="preferenceSetID">The value for the 'preferenceSetID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetPreferenceSetsByIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetPreferenceSetsByID", ReplyAction="http://tempuri.org/PrefAppService/GetPreferenceSetsByIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferenceSetsByID(Guid preferenceSetID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferenceSetsByID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferenceSetsByID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferenceSetsByID' operation.</returns>
            QueryResult<PreferenceSet> EndGetPreferenceSetsByID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferenceSetsForUser' operation.
            /// </summary>
            /// <param name="userID">The value for the 'userID' parameter of this action.</param>
            /// <param name="organizationID">The value for the 'organizationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetPreferenceSetsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetPreferenceSetsForUser", ReplyAction="http://tempuri.org/PrefAppService/GetPreferenceSetsForUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferenceSetsForUser(Guid userID, Guid[] organizationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferenceSetsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferenceSetsForUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferenceSetsForUser' operation.</returns>
            QueryResult<PreferenceSet> EndGetPreferenceSetsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetValueOfIssue' operation.
            /// </summary>
            /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="isSent">The value for the 'isSent' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/GetValueOfIssueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/GetValueOfIssue", ReplyAction="http://tempuri.org/PrefAppService/GetValueOfIssueResponse")]
            IAsyncResult BeginGetValueOfIssue(Guid issueID, Guid conversationID, bool isSent, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetValueOfIssue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetValueOfIssue'.</param>
            /// <returns>The 'String' returned from the 'GetValueOfIssue' operation.</returns>
            string EndGetValueOfIssue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'OfferFinished' operation.
            /// </summary>
            /// <param name="OfferID">The value for the 'OfferID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/OfferFinishedDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/OfferFinished", ReplyAction="http://tempuri.org/PrefAppService/OfferFinishedResponse")]
            IAsyncResult BeginOfferFinished(Guid OfferID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginOfferFinished'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginOfferFinished'.</param>
            void EndOfferFinished(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RetrieveApplicationDMStatus' operation.
            /// </summary>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/RetrieveApplicationDMStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/RetrieveApplicationDMStatus", ReplyAction="http://tempuri.org/PrefAppService/RetrieveApplicationDMStatusResponse")]
            IAsyncResult BeginRetrieveApplicationDMStatus(string AppName, Guid UserID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRetrieveApplicationDMStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRetrieveApplicationDMStatus'.</param>
            /// <returns>The 'Boolean' returned from the 'RetrieveApplicationDMStatus' operation.</returns>
            bool EndRetrieveApplicationDMStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SendAppsStatisticalsMessages' operation.
            /// </summary>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="messageContent">The value for the 'messageContent' parameter of this action.</param>
            /// <param name="messageSubject">The value for the 'messageSubject' parameter of this action.</param>
            /// <param name="messageSender">The value for the 'messageSender' parameter of this action.</param>
            /// <param name="messageReceiver">The value for the 'messageReceiver' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/SendAppsStatisticalsMessagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/SendAppsStatisticalsMessages", ReplyAction="http://tempuri.org/PrefAppService/SendAppsStatisticalsMessagesResponse")]
            IAsyncResult BeginSendAppsStatisticalsMessages(string AppName, Guid UserID, Guid conversationID, string messageContent, string messageSubject, string messageSender, string messageReceiver, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSendAppsStatisticalsMessages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSendAppsStatisticalsMessages'.</param>
            /// <returns>The 'Boolean' returned from the 'SendAppsStatisticalsMessages' operation.</returns>
            bool EndSendAppsStatisticalsMessages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetValueOfIssue' operation.
            /// </summary>
            /// <param name="offerID">The value for the 'offerID' parameter of this action.</param>
            /// <param name="issueID">The value for the 'issueID' parameter of this action.</param>
            /// <param name="value">The value for the 'value' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/SetValueOfIssueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/SetValueOfIssue", ReplyAction="http://tempuri.org/PrefAppService/SetValueOfIssueResponse")]
            IAsyncResult BeginSetValueOfIssue(Guid offerID, Guid issueID, string value, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetValueOfIssue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetValueOfIssue'.</param>
            /// <returns>The 'Boolean' returned from the 'SetValueOfIssue' operation.</returns>
            bool EndSetValueOfIssue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UpdateDataMatchingStatusInAddon' operation.
            /// </summary>
            /// <param name="AppName">The value for the 'AppName' parameter of this action.</param>
            /// <param name="UserID">The value for the 'UserID' parameter of this action.</param>
            /// <param name="IsActive">The value for the 'IsActive' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/UpdateDataMatchingStatusInAddonDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/UpdateDataMatchingStatusInAddon", ReplyAction="http://tempuri.org/PrefAppService/UpdateDataMatchingStatusInAddonResponse")]
            IAsyncResult BeginUpdateDataMatchingStatusInAddon(string AppName, Guid UserID, bool IsActive, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUpdateDataMatchingStatusInAddon'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUpdateDataMatchingStatusInAddon'.</param>
            /// <returns>The 'Boolean' returned from the 'UpdateDataMatchingStatusInAddon' operation.</returns>
            bool EndUpdateDataMatchingStatusInAddon(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PrefAppService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PrefAppService/SubmitChanges", ReplyAction="http://tempuri.org/PrefAppService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PrefAppContextEntityContainer : EntityContainer
        {
            
            public PrefAppContextEntityContainer()
            {
                this.CreateEntitySet<ActionType>(EntitySetOperations.All);
                this.CreateEntitySet<CompleteIssue>(EntitySetOperations.None);
                this.CreateEntitySet<CompleteNumeric>(EntitySetOperations.None);
                this.CreateEntitySet<CompleteOption>(EntitySetOperations.None);
                this.CreateEntitySet<CompletePreferenceSet>(EntitySetOperations.None);
                this.CreateEntitySet<ExpectedTarget>(EntitySetOperations.None);
                this.CreateEntitySet<OfferItem>(EntitySetOperations.None);
                this.CreateEntitySet<Conversation>(EntitySetOperations.None);
                this.CreateEntitySet<ConversationMessage>(EntitySetOperations.All);
                this.CreateEntitySet<ConversationPeriod>(EntitySetOperations.None);
                this.CreateEntitySet<CoordinatesPoints>(EntitySetOperations.None);
                this.CreateEntitySet<History>(EntitySetOperations.All);
                this.CreateEntitySet<Issue>(EntitySetOperations.All);
                this.CreateEntitySet<IssueHistoryResult>(EntitySetOperations.None);
                this.CreateEntitySet<IssueStatisticalsResult>(EntitySetOperations.None);
                this.CreateEntitySet<IssueType>(EntitySetOperations.All);
                this.CreateEntitySet<LastOfferDetails>(EntitySetOperations.None);
                this.CreateEntitySet<LaterRatedIssue>(EntitySetOperations.All);
                this.CreateEntitySet<MainPreferenceSet>(EntitySetOperations.All);
                this.CreateEntitySet<Message>(EntitySetOperations.None);
                this.CreateEntitySet<MessageIssue>(EntitySetOperations.All);
                this.CreateEntitySet<MessageLaterRatedIssue>(EntitySetOperations.All);
                this.CreateEntitySet<MessageOptionIssue>(EntitySetOperations.All);
                this.CreateEntitySet<NegConversation>(EntitySetOperations.All);
                this.CreateEntitySet<Negotiation>(EntitySetOperations.None);
                this.CreateEntitySet<NumericIssue>(EntitySetOperations.All);
                this.CreateEntitySet<OptionIssue>(EntitySetOperations.All);
                this.CreateEntitySet<Organization>(EntitySetOperations.None);
                this.CreateEntitySet<PreferenceSet>(EntitySetOperations.All);
                this.CreateEntitySet<PreferenceSetNeg>(EntitySetOperations.All);
                this.CreateEntitySet<PreferenceSetOrganization>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'PreferenceSet' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class PreferenceSet : Entity
    {
        
        private bool _checkvariation;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private bool _isNewPreferenceSet;
        
        private EntityCollection<Issue> _issues;
        
        private EntityRef<MainPreferenceSet> _mainPreferenceSet;
        
        private Guid _mainPreferenceSetID;
        
        private decimal _maxPercentage;
        
        private Guid _preferenceSetID;
        
        private string _preferenceSetName;
        
        private EntityCollection<PreferenceSetNeg> _preferenceSetNegs;
        
        private EntityCollection<PreferenceSetOrganization> _preferenceSetOrganizations;
        
        private Guid _userID;
        
        private decimal _variationValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCheckvariationChanging(bool value);
        partial void OnCheckvariationChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIsNewPreferenceSetChanging(bool value);
        partial void OnIsNewPreferenceSetChanged();
        partial void OnMainPreferenceSetIDChanging(Guid value);
        partial void OnMainPreferenceSetIDChanged();
        partial void OnMaxPercentageChanging(decimal value);
        partial void OnMaxPercentageChanged();
        partial void OnPreferenceSetIDChanging(Guid value);
        partial void OnPreferenceSetIDChanged();
        partial void OnPreferenceSetNameChanging(string value);
        partial void OnPreferenceSetNameChanged();
        partial void OnUserIDChanging(Guid value);
        partial void OnUserIDChanged();
        partial void OnVariationValueChanging(decimal value);
        partial void OnVariationValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PreferenceSet"/> class.
        /// </summary>
        public PreferenceSet()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Checkvariation' value.
        /// </summary>
        [DataMember()]
        public bool Checkvariation
        {
            get
            {
                return this._checkvariation;
            }
            set
            {
                if ((this._checkvariation != value))
                {
                    this.OnCheckvariationChanging(value);
                    this.RaiseDataMemberChanging("Checkvariation");
                    this.ValidateProperty("Checkvariation", value);
                    this._checkvariation = value;
                    this.RaiseDataMemberChanged("Checkvariation");
                    this.OnCheckvariationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsNewPreferenceSet' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsNewPreferenceSet
        {
            get
            {
                return this._isNewPreferenceSet;
            }
            set
            {
                if ((this._isNewPreferenceSet != value))
                {
                    this.OnIsNewPreferenceSetChanging(value);
                    this.RaiseDataMemberChanging("IsNewPreferenceSet");
                    this.ValidateProperty("IsNewPreferenceSet", value);
                    this._isNewPreferenceSet = value;
                    this.RaiseDataMemberChanged("IsNewPreferenceSet");
                    this.OnIsNewPreferenceSetChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Issue"/> entities.
        /// </summary>
        [Association("PreferenceSet_Issue", "PreferenceSetID", "PreferenceSetID")]
        [XmlIgnore()]
        public EntityCollection<Issue> Issues
        {
            get
            {
                if ((this._issues == null))
                {
                    this._issues = new EntityCollection<Issue>(this, "Issues", this.FilterIssues, this.AttachIssues, this.DetachIssues);
                }
                return this._issues;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MainPreferenceSet"/> entity.
        /// </summary>
        [Association("MainPreferenceSet_PreferenceSet", "MainPreferenceSetID", "MainPreferenceSetID", IsForeignKey=true)]
        [XmlIgnore()]
        public MainPreferenceSet MainPreferenceSet
        {
            get
            {
                if ((this._mainPreferenceSet == null))
                {
                    this._mainPreferenceSet = new EntityRef<MainPreferenceSet>(this, "MainPreferenceSet", this.FilterMainPreferenceSet);
                }
                return this._mainPreferenceSet.Entity;
            }
            set
            {
                MainPreferenceSet previous = this.MainPreferenceSet;
                if ((previous != value))
                {
                    this.ValidateProperty("MainPreferenceSet", value);
                    if ((previous != null))
                    {
                        this._mainPreferenceSet.Entity = null;
                        previous.PreferenceSets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MainPreferenceSetID = value.MainPreferenceSetID;
                    }
                    else
                    {
                        this.MainPreferenceSetID = default(Guid);
                    }
                    this._mainPreferenceSet.Entity = value;
                    if ((value != null))
                    {
                        value.PreferenceSets.Add(this);
                    }
                    this.RaisePropertyChanged("MainPreferenceSet");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MainPreferenceSetID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid MainPreferenceSetID
        {
            get
            {
                return this._mainPreferenceSetID;
            }
            set
            {
                if ((this._mainPreferenceSetID != value))
                {
                    this.OnMainPreferenceSetIDChanging(value);
                    this.RaiseDataMemberChanging("MainPreferenceSetID");
                    this.ValidateProperty("MainPreferenceSetID", value);
                    this._mainPreferenceSetID = value;
                    this.RaiseDataMemberChanged("MainPreferenceSetID");
                    this.OnMainPreferenceSetIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxPercentage' value.
        /// </summary>
        [DataMember()]
        public decimal MaxPercentage
        {
            get
            {
                return this._maxPercentage;
            }
            set
            {
                if ((this._maxPercentage != value))
                {
                    this.OnMaxPercentageChanging(value);
                    this.RaiseDataMemberChanging("MaxPercentage");
                    this.ValidateProperty("MaxPercentage", value);
                    this._maxPercentage = value;
                    this.RaiseDataMemberChanged("MaxPercentage");
                    this.OnMaxPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid PreferenceSetID
        {
            get
            {
                return this._preferenceSetID;
            }
            set
            {
                if ((this._preferenceSetID != value))
                {
                    this.OnPreferenceSetIDChanging(value);
                    this.ValidateProperty("PreferenceSetID", value);
                    this._preferenceSetID = value;
                    this.RaisePropertyChanged("PreferenceSetID");
                    this.OnPreferenceSetIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(300)]
        public string PreferenceSetName
        {
            get
            {
                return this._preferenceSetName;
            }
            set
            {
                if ((this._preferenceSetName != value))
                {
                    this.OnPreferenceSetNameChanging(value);
                    this.RaiseDataMemberChanging("PreferenceSetName");
                    this.ValidateProperty("PreferenceSetName", value);
                    this._preferenceSetName = value;
                    this.RaiseDataMemberChanged("PreferenceSetName");
                    this.OnPreferenceSetNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PreferenceSetNeg"/> entities.
        /// </summary>
        [Association("PreferenceSet_PreferenceSetNeg", "PreferenceSetID", "PreferenceSetID")]
        [XmlIgnore()]
        public EntityCollection<PreferenceSetNeg> PreferenceSetNegs
        {
            get
            {
                if ((this._preferenceSetNegs == null))
                {
                    this._preferenceSetNegs = new EntityCollection<PreferenceSetNeg>(this, "PreferenceSetNegs", this.FilterPreferenceSetNegs, this.AttachPreferenceSetNegs, this.DetachPreferenceSetNegs);
                }
                return this._preferenceSetNegs;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PreferenceSetOrganization"/> entities.
        /// </summary>
        [Association("PreferenceSet_PreferenceSetOrganization", "PreferenceSetID", "PreferenceSetID")]
        [XmlIgnore()]
        public EntityCollection<PreferenceSetOrganization> PreferenceSetOrganizations
        {
            get
            {
                if ((this._preferenceSetOrganizations == null))
                {
                    this._preferenceSetOrganizations = new EntityCollection<PreferenceSetOrganization>(this, "PreferenceSetOrganizations", this.FilterPreferenceSetOrganizations, this.AttachPreferenceSetOrganizations, this.DetachPreferenceSetOrganizations);
                }
                return this._preferenceSetOrganizations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public Guid UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VariationValue' value.
        /// </summary>
        [DataMember()]
        public decimal VariationValue
        {
            get
            {
                return this._variationValue;
            }
            set
            {
                if ((this._variationValue != value))
                {
                    this.OnVariationValueChanging(value);
                    this.RaiseDataMemberChanging("VariationValue");
                    this.ValidateProperty("VariationValue", value);
                    this._variationValue = value;
                    this.RaiseDataMemberChanged("VariationValue");
                    this.OnVariationValueChanged();
                }
            }
        }
        
        private void AttachIssues(Issue entity)
        {
            entity.PreferenceSet = this;
        }
        
        private void DetachIssues(Issue entity)
        {
            entity.PreferenceSet = null;
        }
        
        private bool FilterIssues(Issue entity)
        {
            return (entity.PreferenceSetID == this.PreferenceSetID);
        }
        
        private bool FilterMainPreferenceSet(MainPreferenceSet entity)
        {
            return (entity.MainPreferenceSetID == this.MainPreferenceSetID);
        }
        
        private void AttachPreferenceSetNegs(PreferenceSetNeg entity)
        {
            entity.PreferenceSet = this;
        }
        
        private void DetachPreferenceSetNegs(PreferenceSetNeg entity)
        {
            entity.PreferenceSet = null;
        }
        
        private bool FilterPreferenceSetNegs(PreferenceSetNeg entity)
        {
            return (entity.PreferenceSetID == this.PreferenceSetID);
        }
        
        private void AttachPreferenceSetOrganizations(PreferenceSetOrganization entity)
        {
            entity.PreferenceSet = this;
        }
        
        private void DetachPreferenceSetOrganizations(PreferenceSetOrganization entity)
        {
            entity.PreferenceSet = null;
        }
        
        private bool FilterPreferenceSetOrganizations(PreferenceSetOrganization entity)
        {
            return (entity.PreferenceSetID == this.PreferenceSetID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._preferenceSetID;
        }
    }
    
    /// <summary>
    /// The 'PreferenceSetNeg' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class PreferenceSetNeg : Entity
    {
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private bool _isClosed;
        
        private EntityCollection<NegConversation> _negConversations;
        
        private Guid _negID;
        
        private string _negotiationName;
        
        private decimal _percentage;
        
        private EntityRef<PreferenceSet> _preferenceSet;
        
        private Guid _preferenceSetID;
        
        private Guid _preferenceSetNegID;
        
        private Nullable<Guid> _statusID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnIsClosedChanging(bool value);
        partial void OnIsClosedChanged();
        partial void OnNegIDChanging(Guid value);
        partial void OnNegIDChanged();
        partial void OnNegotiationNameChanging(string value);
        partial void OnNegotiationNameChanged();
        partial void OnPercentageChanging(decimal value);
        partial void OnPercentageChanged();
        partial void OnPreferenceSetIDChanging(Guid value);
        partial void OnPreferenceSetIDChanged();
        partial void OnPreferenceSetNegIDChanging(Guid value);
        partial void OnPreferenceSetNegIDChanged();
        partial void OnStatusIDChanging(Nullable<Guid> value);
        partial void OnStatusIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PreferenceSetNeg"/> class.
        /// </summary>
        public PreferenceSetNeg()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsClosed' value.
        /// </summary>
        [DataMember()]
        [DefaultValue(null)]
        public bool IsClosed
        {
            get
            {
                return this._isClosed;
            }
            set
            {
                if ((this._isClosed != value))
                {
                    this.OnIsClosedChanging(value);
                    this.RaiseDataMemberChanging("IsClosed");
                    this.ValidateProperty("IsClosed", value);
                    this._isClosed = value;
                    this.RaiseDataMemberChanged("IsClosed");
                    this.OnIsClosedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="NegConversation"/> entities.
        /// </summary>
        [Association("PreferenceSetNeg_NegConversation", "PreferenceSetNegID", "PreferenceSetNegID")]
        [XmlIgnore()]
        public EntityCollection<NegConversation> NegConversations
        {
            get
            {
                if ((this._negConversations == null))
                {
                    this._negConversations = new EntityCollection<NegConversation>(this, "NegConversations", this.FilterNegConversations, this.AttachNegConversations, this.DetachNegConversations);
                }
                return this._negConversations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegID' value.
        /// </summary>
        [DataMember()]
        public Guid NegID
        {
            get
            {
                return this._negID;
            }
            set
            {
                if ((this._negID != value))
                {
                    this.OnNegIDChanging(value);
                    this.RaiseDataMemberChanging("NegID");
                    this.ValidateProperty("NegID", value);
                    this._negID = value;
                    this.RaiseDataMemberChanged("NegID");
                    this.OnNegIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string NegotiationName
        {
            get
            {
                return this._negotiationName;
            }
            set
            {
                if ((this._negotiationName != value))
                {
                    this.OnNegotiationNameChanging(value);
                    this.RaiseDataMemberChanging("NegotiationName");
                    this.ValidateProperty("NegotiationName", value);
                    this._negotiationName = value;
                    this.RaiseDataMemberChanged("NegotiationName");
                    this.OnNegotiationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Percentage' value.
        /// </summary>
        [DataMember()]
        public decimal Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.RaiseDataMemberChanging("Percentage");
                    this.ValidateProperty("Percentage", value);
                    this._percentage = value;
                    this.RaiseDataMemberChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PreferenceSet"/> entity.
        /// </summary>
        [Association("PreferenceSet_PreferenceSetNeg", "PreferenceSetID", "PreferenceSetID", IsForeignKey=true)]
        [XmlIgnore()]
        public PreferenceSet PreferenceSet
        {
            get
            {
                if ((this._preferenceSet == null))
                {
                    this._preferenceSet = new EntityRef<PreferenceSet>(this, "PreferenceSet", this.FilterPreferenceSet);
                }
                return this._preferenceSet.Entity;
            }
            set
            {
                PreferenceSet previous = this.PreferenceSet;
                if ((previous != value))
                {
                    this.ValidateProperty("PreferenceSet", value);
                    if ((previous != null))
                    {
                        this._preferenceSet.Entity = null;
                        previous.PreferenceSetNegs.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PreferenceSetID = value.PreferenceSetID;
                    }
                    else
                    {
                        this.PreferenceSetID = default(Guid);
                    }
                    this._preferenceSet.Entity = value;
                    if ((value != null))
                    {
                        value.PreferenceSetNegs.Add(this);
                    }
                    this.RaisePropertyChanged("PreferenceSet");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid PreferenceSetID
        {
            get
            {
                return this._preferenceSetID;
            }
            set
            {
                if ((this._preferenceSetID != value))
                {
                    this.OnPreferenceSetIDChanging(value);
                    this.RaiseDataMemberChanging("PreferenceSetID");
                    this.ValidateProperty("PreferenceSetID", value);
                    this._preferenceSetID = value;
                    this.RaiseDataMemberChanged("PreferenceSetID");
                    this.OnPreferenceSetIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetNegID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid PreferenceSetNegID
        {
            get
            {
                return this._preferenceSetNegID;
            }
            set
            {
                if ((this._preferenceSetNegID != value))
                {
                    this.OnPreferenceSetNegIDChanging(value);
                    this.ValidateProperty("PreferenceSetNegID", value);
                    this._preferenceSetNegID = value;
                    this.RaisePropertyChanged("PreferenceSetNegID");
                    this.OnPreferenceSetNegIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> StatusID
        {
            get
            {
                return this._statusID;
            }
            set
            {
                if ((this._statusID != value))
                {
                    this.OnStatusIDChanging(value);
                    this.RaiseDataMemberChanging("StatusID");
                    this.ValidateProperty("StatusID", value);
                    this._statusID = value;
                    this.RaiseDataMemberChanged("StatusID");
                    this.OnStatusIDChanged();
                }
            }
        }
        
        private void AttachNegConversations(NegConversation entity)
        {
            entity.PreferenceSetNeg = this;
        }
        
        private void DetachNegConversations(NegConversation entity)
        {
            entity.PreferenceSetNeg = null;
        }
        
        private bool FilterNegConversations(NegConversation entity)
        {
            return (entity.PreferenceSetNegID == this.PreferenceSetNegID);
        }
        
        private bool FilterPreferenceSet(PreferenceSet entity)
        {
            return (entity.PreferenceSetID == this.PreferenceSetID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._preferenceSetNegID;
        }
    }
    
    /// <summary>
    /// The 'PreferenceSetOrganization' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web")]
    public sealed partial class PreferenceSetOrganization : Entity
    {
        
        private bool _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _organizationID;
        
        private EntityRef<PreferenceSet> _preferenceSet;
        
        private Guid _preferenceSetID;
        
        private Guid _preferenceSetOrganizationID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeletedChanging(bool value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnOrganizationIDChanging(Guid value);
        partial void OnOrganizationIDChanged();
        partial void OnPreferenceSetIDChanging(Guid value);
        partial void OnPreferenceSetIDChanged();
        partial void OnPreferenceSetOrganizationIDChanging(Guid value);
        partial void OnPreferenceSetOrganizationIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PreferenceSetOrganization"/> class.
        /// </summary>
        public PreferenceSetOrganization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public bool Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrganizationID' value.
        /// </summary>
        [DataMember()]
        public Guid OrganizationID
        {
            get
            {
                return this._organizationID;
            }
            set
            {
                if ((this._organizationID != value))
                {
                    this.OnOrganizationIDChanging(value);
                    this.RaiseDataMemberChanging("OrganizationID");
                    this.ValidateProperty("OrganizationID", value);
                    this._organizationID = value;
                    this.RaiseDataMemberChanged("OrganizationID");
                    this.OnOrganizationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PreferenceSet"/> entity.
        /// </summary>
        [Association("PreferenceSet_PreferenceSetOrganization", "PreferenceSetID", "PreferenceSetID", IsForeignKey=true)]
        [XmlIgnore()]
        public PreferenceSet PreferenceSet
        {
            get
            {
                if ((this._preferenceSet == null))
                {
                    this._preferenceSet = new EntityRef<PreferenceSet>(this, "PreferenceSet", this.FilterPreferenceSet);
                }
                return this._preferenceSet.Entity;
            }
            set
            {
                PreferenceSet previous = this.PreferenceSet;
                if ((previous != value))
                {
                    this.ValidateProperty("PreferenceSet", value);
                    if ((previous != null))
                    {
                        this._preferenceSet.Entity = null;
                        previous.PreferenceSetOrganizations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PreferenceSetID = value.PreferenceSetID;
                    }
                    else
                    {
                        this.PreferenceSetID = default(Guid);
                    }
                    this._preferenceSet.Entity = value;
                    if ((value != null))
                    {
                        value.PreferenceSetOrganizations.Add(this);
                    }
                    this.RaisePropertyChanged("PreferenceSet");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid PreferenceSetID
        {
            get
            {
                return this._preferenceSetID;
            }
            set
            {
                if ((this._preferenceSetID != value))
                {
                    this.OnPreferenceSetIDChanging(value);
                    this.RaiseDataMemberChanging("PreferenceSetID");
                    this.ValidateProperty("PreferenceSetID", value);
                    this._preferenceSetID = value;
                    this.RaiseDataMemberChanged("PreferenceSetID");
                    this.OnPreferenceSetIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetOrganizationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid PreferenceSetOrganizationID
        {
            get
            {
                return this._preferenceSetOrganizationID;
            }
            set
            {
                if ((this._preferenceSetOrganizationID != value))
                {
                    this.OnPreferenceSetOrganizationIDChanging(value);
                    this.ValidateProperty("PreferenceSetOrganizationID", value);
                    this._preferenceSetOrganizationID = value;
                    this.RaisePropertyChanged("PreferenceSetOrganizationID");
                    this.OnPreferenceSetOrganizationIDChanged();
                }
            }
        }
        
        private bool FilterPreferenceSet(PreferenceSet entity)
        {
            return (entity.PreferenceSetID == this.PreferenceSetID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._preferenceSetOrganizationID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'SessionService' domain service.
    /// </summary>
    public sealed partial class SessionContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class.
        /// </summary>
        public SessionContext() : 
                this(new WebDomainClient<ISessionServiceContract>(new Uri("citPOINT-PrefApp-Data-Web-SessionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SessionService service URI.</param>
        public SessionContext(Uri serviceUri) : 
                this(new WebDomainClient<ISessionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public SessionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SessionContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SessionService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ISessionServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/GetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/GetSessionValue", ReplyAction="http://tempuri.org/SessionService/GetSessionValueResponse")]
            IAsyncResult BeginGetSessionValue(string[] sessionKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSessionValue'.</param>
            /// <returns>The 'String' returned from the 'GetSessionValue' operation.</returns>
            string EndGetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SetSessionValue", ReplyAction="http://tempuri.org/SessionService/SetSessionValueResponse")]
            IAsyncResult BeginSetSessionValue(string[] sessionKey, string[] sessionValue, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetSessionValue'.</param>
            void EndSetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SubmitChanges", ReplyAction="http://tempuri.org/SessionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SessionContextEntityContainer : EntityContainer
        {
            
            public SessionContextEntityContainer()
            {
            }
        }
    }
}
namespace citPOINT.PrefApp.Data.Web.Complete
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'CompleteIssue' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public sealed partial class CompleteIssue : Entity
    {
        
        private Guid _issueID;
        
        private CompleteIssueType _issueType;
        
        private string _name;
        
        private EntityRef<CompleteNumeric> _numeric;
        
        private EntityCollection<CompleteOption> _options;
        
        private Guid _preferenceSetID;
        
        private int _rank;
        
        private decimal _score;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnIssueTypeChanging(CompleteIssueType value);
        partial void OnIssueTypeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPreferenceSetIDChanging(Guid value);
        partial void OnPreferenceSetIDChanged();
        partial void OnRankChanging(int value);
        partial void OnRankChanged();
        partial void OnScoreChanging(decimal value);
        partial void OnScoreChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteIssue"/> class.
        /// </summary>
        public CompleteIssue()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaisePropertyChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueType' value.
        /// </summary>
        [DataMember()]
        public CompleteIssueType IssueType
        {
            get
            {
                return this._issueType;
            }
            set
            {
                if ((this._issueType != value))
                {
                    this.OnIssueTypeChanging(value);
                    this.RaiseDataMemberChanging("IssueType");
                    this.ValidateProperty("IssueType", value);
                    this._issueType = value;
                    this.RaiseDataMemberChanged("IssueType");
                    this.OnIssueTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CompleteNumeric"/> entity.
        /// </summary>
        [Association("Issue_Numeric", "IssueID", "IssueID")]
        public CompleteNumeric Numeric
        {
            get
            {
                if ((this._numeric == null))
                {
                    this._numeric = new EntityRef<CompleteNumeric>(this, "Numeric", this.FilterNumeric);
                }
                return this._numeric.Entity;
            }
            set
            {
                CompleteNumeric previous = this.Numeric;
                if ((previous != value))
                {
                    this.ValidateProperty("Numeric", value);
                    this._numeric.Entity = value;
                    this.RaisePropertyChanged("Numeric");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CompleteOption"/> entities.
        /// </summary>
        [Association("Issue_Options", "IssueID", "IssueID")]
        public EntityCollection<CompleteOption> Options
        {
            get
            {
                if ((this._options == null))
                {
                    this._options = new EntityCollection<CompleteOption>(this, "Options", this.FilterOptions);
                }
                return this._options;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetID' value.
        /// </summary>
        [DataMember()]
        public Guid PreferenceSetID
        {
            get
            {
                return this._preferenceSetID;
            }
            set
            {
                if ((this._preferenceSetID != value))
                {
                    this.OnPreferenceSetIDChanging(value);
                    this.RaiseDataMemberChanging("PreferenceSetID");
                    this.ValidateProperty("PreferenceSetID", value);
                    this._preferenceSetID = value;
                    this.RaiseDataMemberChanged("PreferenceSetID");
                    this.OnPreferenceSetIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rank' value.
        /// </summary>
        [DataMember()]
        public int Rank
        {
            get
            {
                return this._rank;
            }
            set
            {
                if ((this._rank != value))
                {
                    this.OnRankChanging(value);
                    this.RaiseDataMemberChanging("Rank");
                    this.ValidateProperty("Rank", value);
                    this._rank = value;
                    this.RaiseDataMemberChanged("Rank");
                    this.OnRankChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Score' value.
        /// </summary>
        [DataMember()]
        public decimal Score
        {
            get
            {
                return this._score;
            }
            set
            {
                if ((this._score != value))
                {
                    this.OnScoreChanging(value);
                    this.RaiseDataMemberChanging("Score");
                    this.ValidateProperty("Score", value);
                    this._score = value;
                    this.RaiseDataMemberChanged("Score");
                    this.OnScoreChanged();
                }
            }
        }
        
        private bool FilterNumeric(CompleteNumeric entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        private bool FilterOptions(CompleteOption entity)
        {
            return (entity.IssueID == this.IssueID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._issueID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public enum CompleteIssueType
    {
        
        [EnumMember()]
        Numeric = 0,
        
        [EnumMember()]
        Option = 1,
        
        [EnumMember()]
        LaterRated = 2,
        
        [EnumMember()]
        NotRated = 3,
    }
    
    /// <summary>
    /// The 'CompleteNumeric' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public sealed partial class CompleteNumeric : Entity
    {
        
        private int _id;
        
        private Guid _issueID;
        
        private decimal _maximumValue;
        
        private bool _maxOperatorBetter;
        
        private bool _maxOperatorEqual;
        
        private bool _maxOperatorWorse;
        
        private decimal _minimumValue;
        
        private bool _minOperatorBetter;
        
        private bool _minOperatorEqual;
        
        private bool _minOperatorWorse;
        
        private decimal _optimumValueEnd;
        
        private decimal _optimumValueStart;
        
        private decimal _topMax;
        
        private decimal _topMin;
        
        private string _unit;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnMaximumValueChanging(decimal value);
        partial void OnMaximumValueChanged();
        partial void OnMaxOperatorBetterChanging(bool value);
        partial void OnMaxOperatorBetterChanged();
        partial void OnMaxOperatorEqualChanging(bool value);
        partial void OnMaxOperatorEqualChanged();
        partial void OnMaxOperatorWorseChanging(bool value);
        partial void OnMaxOperatorWorseChanged();
        partial void OnMinimumValueChanging(decimal value);
        partial void OnMinimumValueChanged();
        partial void OnMinOperatorBetterChanging(bool value);
        partial void OnMinOperatorBetterChanged();
        partial void OnMinOperatorEqualChanging(bool value);
        partial void OnMinOperatorEqualChanged();
        partial void OnMinOperatorWorseChanging(bool value);
        partial void OnMinOperatorWorseChanged();
        partial void OnOptimumValueEndChanging(decimal value);
        partial void OnOptimumValueEndChanged();
        partial void OnOptimumValueStartChanging(decimal value);
        partial void OnOptimumValueStartChanged();
        partial void OnTopMaxChanging(decimal value);
        partial void OnTopMaxChanged();
        partial void OnTopMinChanging(decimal value);
        partial void OnTopMinChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteNumeric"/> class.
        /// </summary>
        public CompleteNumeric()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.RaiseDataMemberChanging("IssueID");
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaiseDataMemberChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaximumValue' value.
        /// </summary>
        [DataMember()]
        public decimal MaximumValue
        {
            get
            {
                return this._maximumValue;
            }
            set
            {
                if ((this._maximumValue != value))
                {
                    this.OnMaximumValueChanging(value);
                    this.RaiseDataMemberChanging("MaximumValue");
                    this.ValidateProperty("MaximumValue", value);
                    this._maximumValue = value;
                    this.RaiseDataMemberChanged("MaximumValue");
                    this.OnMaximumValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxOperatorBetter' value.
        /// </summary>
        [DataMember()]
        public bool MaxOperatorBetter
        {
            get
            {
                return this._maxOperatorBetter;
            }
            set
            {
                if ((this._maxOperatorBetter != value))
                {
                    this.OnMaxOperatorBetterChanging(value);
                    this.RaiseDataMemberChanging("MaxOperatorBetter");
                    this.ValidateProperty("MaxOperatorBetter", value);
                    this._maxOperatorBetter = value;
                    this.RaiseDataMemberChanged("MaxOperatorBetter");
                    this.OnMaxOperatorBetterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxOperatorEqual' value.
        /// </summary>
        [DataMember()]
        public bool MaxOperatorEqual
        {
            get
            {
                return this._maxOperatorEqual;
            }
            set
            {
                if ((this._maxOperatorEqual != value))
                {
                    this.OnMaxOperatorEqualChanging(value);
                    this.RaiseDataMemberChanging("MaxOperatorEqual");
                    this.ValidateProperty("MaxOperatorEqual", value);
                    this._maxOperatorEqual = value;
                    this.RaiseDataMemberChanged("MaxOperatorEqual");
                    this.OnMaxOperatorEqualChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxOperatorWorse' value.
        /// </summary>
        [DataMember()]
        public bool MaxOperatorWorse
        {
            get
            {
                return this._maxOperatorWorse;
            }
            set
            {
                if ((this._maxOperatorWorse != value))
                {
                    this.OnMaxOperatorWorseChanging(value);
                    this.RaiseDataMemberChanging("MaxOperatorWorse");
                    this.ValidateProperty("MaxOperatorWorse", value);
                    this._maxOperatorWorse = value;
                    this.RaiseDataMemberChanged("MaxOperatorWorse");
                    this.OnMaxOperatorWorseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinimumValue' value.
        /// </summary>
        [DataMember()]
        public decimal MinimumValue
        {
            get
            {
                return this._minimumValue;
            }
            set
            {
                if ((this._minimumValue != value))
                {
                    this.OnMinimumValueChanging(value);
                    this.RaiseDataMemberChanging("MinimumValue");
                    this.ValidateProperty("MinimumValue", value);
                    this._minimumValue = value;
                    this.RaiseDataMemberChanged("MinimumValue");
                    this.OnMinimumValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinOperatorBetter' value.
        /// </summary>
        [DataMember()]
        public bool MinOperatorBetter
        {
            get
            {
                return this._minOperatorBetter;
            }
            set
            {
                if ((this._minOperatorBetter != value))
                {
                    this.OnMinOperatorBetterChanging(value);
                    this.RaiseDataMemberChanging("MinOperatorBetter");
                    this.ValidateProperty("MinOperatorBetter", value);
                    this._minOperatorBetter = value;
                    this.RaiseDataMemberChanged("MinOperatorBetter");
                    this.OnMinOperatorBetterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinOperatorEqual' value.
        /// </summary>
        [DataMember()]
        public bool MinOperatorEqual
        {
            get
            {
                return this._minOperatorEqual;
            }
            set
            {
                if ((this._minOperatorEqual != value))
                {
                    this.OnMinOperatorEqualChanging(value);
                    this.RaiseDataMemberChanging("MinOperatorEqual");
                    this.ValidateProperty("MinOperatorEqual", value);
                    this._minOperatorEqual = value;
                    this.RaiseDataMemberChanged("MinOperatorEqual");
                    this.OnMinOperatorEqualChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MinOperatorWorse' value.
        /// </summary>
        [DataMember()]
        public bool MinOperatorWorse
        {
            get
            {
                return this._minOperatorWorse;
            }
            set
            {
                if ((this._minOperatorWorse != value))
                {
                    this.OnMinOperatorWorseChanging(value);
                    this.RaiseDataMemberChanging("MinOperatorWorse");
                    this.ValidateProperty("MinOperatorWorse", value);
                    this._minOperatorWorse = value;
                    this.RaiseDataMemberChanged("MinOperatorWorse");
                    this.OnMinOperatorWorseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptimumValueEnd' value.
        /// </summary>
        [DataMember()]
        public decimal OptimumValueEnd
        {
            get
            {
                return this._optimumValueEnd;
            }
            set
            {
                if ((this._optimumValueEnd != value))
                {
                    this.OnOptimumValueEndChanging(value);
                    this.RaiseDataMemberChanging("OptimumValueEnd");
                    this.ValidateProperty("OptimumValueEnd", value);
                    this._optimumValueEnd = value;
                    this.RaiseDataMemberChanged("OptimumValueEnd");
                    this.OnOptimumValueEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptimumValueStart' value.
        /// </summary>
        [DataMember()]
        public decimal OptimumValueStart
        {
            get
            {
                return this._optimumValueStart;
            }
            set
            {
                if ((this._optimumValueStart != value))
                {
                    this.OnOptimumValueStartChanging(value);
                    this.RaiseDataMemberChanging("OptimumValueStart");
                    this.ValidateProperty("OptimumValueStart", value);
                    this._optimumValueStart = value;
                    this.RaiseDataMemberChanged("OptimumValueStart");
                    this.OnOptimumValueStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TopMax' value.
        /// </summary>
        [DataMember()]
        public decimal TopMax
        {
            get
            {
                return this._topMax;
            }
            set
            {
                if ((this._topMax != value))
                {
                    this.OnTopMaxChanging(value);
                    this.RaiseDataMemberChanging("TopMax");
                    this.ValidateProperty("TopMax", value);
                    this._topMax = value;
                    this.RaiseDataMemberChanged("TopMax");
                    this.OnTopMaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TopMin' value.
        /// </summary>
        [DataMember()]
        public decimal TopMin
        {
            get
            {
                return this._topMin;
            }
            set
            {
                if ((this._topMin != value))
                {
                    this.OnTopMinChanging(value);
                    this.RaiseDataMemberChanging("TopMin");
                    this.ValidateProperty("TopMin", value);
                    this._topMin = value;
                    this.RaiseDataMemberChanged("TopMin");
                    this.OnTopMinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Unit' value.
        /// </summary>
        [DataMember()]
        public string Unit
        {
            get
            {
                return this._unit;
            }
            set
            {
                if ((this._unit != value))
                {
                    this.OnUnitChanging(value);
                    this.RaiseDataMemberChanging("Unit");
                    this.ValidateProperty("Unit", value);
                    this._unit = value;
                    this.RaiseDataMemberChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'CompleteOption' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public sealed partial class CompleteOption : Entity
    {
        
        private Guid _issueID;
        
        private string _name;
        
        private Guid _optionID;
        
        private decimal _rate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOptionIDChanging(Guid value);
        partial void OnOptionIDChanged();
        partial void OnRateChanging(decimal value);
        partial void OnRateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteOption"/> class.
        /// </summary>
        public CompleteOption()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.RaiseDataMemberChanging("IssueID");
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaiseDataMemberChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid OptionID
        {
            get
            {
                return this._optionID;
            }
            set
            {
                if ((this._optionID != value))
                {
                    this.OnOptionIDChanging(value);
                    this.ValidateProperty("OptionID", value);
                    this._optionID = value;
                    this.RaisePropertyChanged("OptionID");
                    this.OnOptionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rate' value.
        /// </summary>
        [DataMember()]
        public decimal Rate
        {
            get
            {
                return this._rate;
            }
            set
            {
                if ((this._rate != value))
                {
                    this.OnRateChanging(value);
                    this.RaiseDataMemberChanging("Rate");
                    this.ValidateProperty("Rate", value);
                    this._rate = value;
                    this.RaiseDataMemberChanged("Rate");
                    this.OnRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._optionID;
        }
    }
    
    /// <summary>
    /// The 'CompletePreferenceSet' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public sealed partial class CompletePreferenceSet : Entity
    {
        
        private EntityCollection<CompleteIssue> _issues;
        
        private decimal _maxPercentage;
        
        private string _name;
        
        private Guid _preferenceSetID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnMaxPercentageChanging(decimal value);
        partial void OnMaxPercentageChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPreferenceSetIDChanging(Guid value);
        partial void OnPreferenceSetIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompletePreferenceSet"/> class.
        /// </summary>
        public CompletePreferenceSet()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CompleteIssue"/> entities.
        /// </summary>
        [Association("Issues_PrefSet", "PreferenceSetID", "PreferenceSetID")]
        [XmlElement()]
        public EntityCollection<CompleteIssue> Issues
        {
            get
            {
                if ((this._issues == null))
                {
                    this._issues = new EntityCollection<CompleteIssue>(this, "Issues", this.FilterIssues);
                }
                return this._issues;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxPercentage' value.
        /// </summary>
        [DataMember()]
        public decimal MaxPercentage
        {
            get
            {
                return this._maxPercentage;
            }
            set
            {
                if ((this._maxPercentage != value))
                {
                    this.OnMaxPercentageChanging(value);
                    this.RaiseDataMemberChanging("MaxPercentage");
                    this.ValidateProperty("MaxPercentage", value);
                    this._maxPercentage = value;
                    this.RaiseDataMemberChanged("MaxPercentage");
                    this.OnMaxPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PreferenceSetID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid PreferenceSetID
        {
            get
            {
                return this._preferenceSetID;
            }
            set
            {
                if ((this._preferenceSetID != value))
                {
                    this.OnPreferenceSetIDChanging(value);
                    this.ValidateProperty("PreferenceSetID", value);
                    this._preferenceSetID = value;
                    this.RaisePropertyChanged("PreferenceSetID");
                    this.OnPreferenceSetIDChanged();
                }
            }
        }
        
        private bool FilterIssues(CompleteIssue entity)
        {
            return (entity.PreferenceSetID == this.PreferenceSetID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._preferenceSetID;
        }
    }
    
    /// <summary>
    /// The 'ExpectedTarget' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public sealed partial class ExpectedTarget : Entity
    {
        
        private int _id;
        
        private Status _status;
        
        private decimal _target;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnStatusChanging(Status value);
        partial void OnStatusChanged();
        partial void OnTargetChanging(decimal value);
        partial void OnTargetChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpectedTarget"/> class.
        /// </summary>
        public ExpectedTarget()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public Status Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Target' value.
        /// </summary>
        [DataMember()]
        public decimal Target
        {
            get
            {
                return this._target;
            }
            set
            {
                if ((this._target != value))
                {
                    this.OnTargetChanging(value);
                    this.RaiseDataMemberChanging("Target");
                    this.ValidateProperty("Target", value);
                    this._target = value;
                    this.RaiseDataMemberChanged("Target");
                    this.OnTargetChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'OfferItem' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public sealed partial class OfferItem : Entity
    {
        
        private Guid _issueID;
        
        private Nullable<Guid> _optionID;
        
        private decimal _percentage;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIssueIDChanging(Guid value);
        partial void OnIssueIDChanged();
        partial void OnOptionIDChanging(Nullable<Guid> value);
        partial void OnOptionIDChanged();
        partial void OnPercentageChanging(decimal value);
        partial void OnPercentageChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferItem"/> class.
        /// </summary>
        public OfferItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IssueID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid IssueID
        {
            get
            {
                return this._issueID;
            }
            set
            {
                if ((this._issueID != value))
                {
                    this.OnIssueIDChanging(value);
                    this.ValidateProperty("IssueID", value);
                    this._issueID = value;
                    this.RaisePropertyChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptionID' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> OptionID
        {
            get
            {
                return this._optionID;
            }
            set
            {
                if ((this._optionID != value))
                {
                    this.OnOptionIDChanging(value);
                    this.RaiseDataMemberChanging("OptionID");
                    this.ValidateProperty("OptionID", value);
                    this._optionID = value;
                    this.RaiseDataMemberChanged("OptionID");
                    this.OnOptionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Percentage' value.
        /// </summary>
        [DataMember()]
        public decimal Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.RaiseDataMemberChanging("Percentage");
                    this.ValidateProperty("Percentage", value);
                    this._percentage = value;
                    this.RaiseDataMemberChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._issueID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public enum OfferType
    {
        
        [EnumMember()]
        Own = 1,
        
        [EnumMember()]
        Counterpart = 2,
        
        [EnumMember()]
        Mixed = 3,
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete")]
    public enum Status
    {
        
        [EnumMember()]
        Success = 0,
        
        [EnumMember()]
        Failed = 1,
        
        [EnumMember()]
        DateOutOfPeriod = 2,
        
        [EnumMember()]
        NoSettings = 3,
    }
}
