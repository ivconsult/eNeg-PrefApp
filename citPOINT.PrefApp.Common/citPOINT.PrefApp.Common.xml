<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>citPOINT.PrefApp.Common</name>
  </assembly>
  <members>
    <member name="N:citPOINT.PrefApp.Common">
    </member>
    <member name="T:citPOINT.PrefApp.Common.BooleanToVisibilityConverter">
      <summary>
Represents the converter that converts Boolean values to and from Visibility enumeration values.</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
Convert from bool to visibilty type</summary>
      <returns>
Either visible or collapsed</returns>
      <param name="value">
bool value to convert</param>
      <param name="targetType">
Value of target type</param>
      <param name="parameter">
Parameters if found</param>
      <param name="culture">
value of used Culture</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
Convert from visibilty type to bool</summary>
      <returns>
bool</returns>
      <param name="value">
visibilty to convert</param>
      <param name="targetType">
Value of target type</param>
      <param name="parameter">
Parameters if found</param>
      <param name="culture">
value of used Culture</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.NotOperatorValueConverter">
      <summary>
Two way IValueConverter that lets you bind the inverse of a boolean property to a dependency property</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.NotOperatorValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
Reverse the bool value</summary>
      <returns>
if value is true return false and vice versa</returns>
      <param name="value">
bool value to convert</param>
      <param name="targetType">
Value of target type</param>
      <param name="parameter">
Parameters if found</param>
      <param name="culture">
value of used Culture</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.NotOperatorValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
Reverse the bool value</summary>
      <returns>
if value is true return false and vice versa</returns>
      <param name="value">
bool value to convert</param>
      <param name="targetType">
Value of target type</param>
      <param name="parameter">
Parameters if found</param>
      <param name="culture">
value of used Culture</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PreferenceSetCustomSelector">
      <summary>
A Custom Selector that select the proper edit template for Preference Set tree node</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PreferenceSetCustomSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
      <summary>
Select the suitable template according to the selected node type</summary>
      <returns>
DataTemplate</returns>
      <param name="item">
item</param>
      <param name="container">
container</param>
    </member>
    <member name="P:citPOINT.PrefApp.Common.PreferenceSetCustomSelector.PreferenceSetTemplate">
      <summary>
Gets or sets the PreferenceSetTemplate</summary>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppConfigurations">
      <summary>
Class that have some configuraton needed in our application</summary>
    </member>
    <member name="P:citPOINT.PrefApp.Common.PrefAppConfigurations.eNegHostBaseAddress">
      <summary>
Represnt Host Base Address of eNeg e.g http://Localhost:9000/</summary>
    </member>
    <member name="P:citPOINT.PrefApp.Common.PrefAppConfigurations.UserName">
      <summary>
Represnt current UserName</summary>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger">
      <summary>
Class Used to send and register messaging</summary>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger.EditPreferenceSetMessage">
      <summary>
Class used to set PreferenceSet in edit mode</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.EditPreferenceSetMessage.Send(citPOINT.PrefApp.Data.Web.PreferenceSet)">
      <summary>
Send message with a PreferenceSet</summary>
      <param name="CurrentPreferenceSet">
Current PreferenceSet</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.EditPreferenceSetMessage.Register(System.Object,System.Action{citPOINT.PrefApp.Data.Web.PreferenceSet})">
      <summary>
Register to recieve that type of message</summary>
      <param name="recipient">
recipient</param>
      <param name="action">
method that will be called when message is recieved</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger.ChangeScreenMessage">
      <summary>
Class to changes the current screen loaded</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.ChangeScreenMessage.Send(System.String)">
      <summary>
Send this type of message to any recipient who want to register that type of messages</summary>
      <param name="screenName">
</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.ChangeScreenMessage.Register(System.Object,System.Action{System.String})">
      <summary>
Register to recieve that type of message</summary>
      <param name="recipient">
The recipient that has register for this type of message</param>
      <param name="action">
Method that will be called when message is recieved</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger.FlippMessage">
      <summary>
Class to flip any flip control</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.FlippMessage.Send">
      <summary>
Send this type of message to any recipient who want to register that type of messages</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.FlippMessage.Send(System.Boolean)">
      <summary>
Send this type of message to any recipient who want to register that type of messages</summary>
      <param name="isFlip">
</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.FlippMessage.Register(System.Object,System.Action{System.Boolean})">
      <summary>
Register to recieve that type of message</summary>
      <param name="recipient">
The recipient that has register for this type of message</param>
      <param name="action">
Method that will be called when message is recieved</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger.StatusUpdateMessage">
      <summary>
Class to update status</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.StatusUpdateMessage.Send(GalaSoft.MvvmLight.Messaging.DialogMessage)">
      <summary>
Send this type of message to any recipient who want to register that type of messages</summary>
      <param name="dialogMessage">
</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.StatusUpdateMessage.Register(System.Object,System.Action{GalaSoft.MvvmLight.Messaging.DialogMessage})">
      <summary>
Register to recieve that type of message</summary>
      <param name="recipient">
The recipient that has register for this type of message</param>
      <param name="action">
Method that will be handle the excption send and appear friendly message</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger.SubmitChangesMessage">
      <summary>
Class to submit any pending changes</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.SubmitChangesMessage.Send">
      <summary>
Send this type of message to any recipient who want to register that type of messages</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.SubmitChangesMessage.Register(System.Object,System.Action{System.Boolean})">
      <summary>
Register to recieve that type of message</summary>
      <param name="recipient">
The recipient that has register for this type of message</param>
      <param name="action">
Method that will be called when message is recieved</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger.ConfirmMessage">
      <summary>
Class to Wait user confirm</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.ConfirmMessage.Send(GalaSoft.MvvmLight.Messaging.DialogMessage)">
      <summary>
Send this type of message to any recipient who want to register that type of messages</summary>
      <param name="dialogMessage">
</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.ConfirmMessage.Register(System.Object,System.Action{GalaSoft.MvvmLight.Messaging.DialogMessage})">
      <summary>
Register to recieve that type of message</summary>
      <param name="recipient">
The recipient that has register for this type of message</param>
      <param name="action">
Dialog Messge that will wait for user response</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger.CancelChangesMessage">
      <summary>
Class to reject any pending changes</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.CancelChangesMessage.Send">
      <summary>
Send this type of message to any recipient who want to register that type of messages</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.CancelChangesMessage.Register(System.Object,System.Action{System.Boolean})">
      <summary>
Register to recieve that type of message</summary>
      <param name="recipient">
The recipient that has register for this type of message</param>
      <param name="action">
Method that will be called when message is recieved</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppMessanger.RaiseErrorMessage">
      <summary>
Class to handle any raised exception</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.RaiseErrorMessage.Send(System.Exception)">
      <summary>
Send this type of message to any recipient who want to register that type of messages</summary>
      <param name="ex">
</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.PrefAppMessanger.RaiseErrorMessage.Register(System.Object,System.Action{System.Exception})">
      <summary>
Register to recieve that type of message</summary>
      <param name="recipient">
The recipient that has register for this type of message</param>
      <param name="action">
Method that will be handle the excption send and appear friendly message</param>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppConstant">
      <summary>
Constant for All Tables (Lockup Tables)</summary>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppConstant.MainPreferenceSets">
      <summary>
For Main Prefernce Sets</summary>
    </member>
    <member name="P:citPOINT.PrefApp.Common.PrefAppConstant.MainPreferenceSets.MySets">
      <summary>
for MySets MainPreferenceSets</summary>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppViewModelTypes">
      <summary>
class that contain costants for available view models</summary>
    </member>
    <member name="T:citPOINT.PrefApp.Common.PrefAppViewTypes">
      <summary>
Class that contain all available Views</summary>
    </member>
    <member name="E:citPOINT.PrefApp.Common.ILoginModel.LoginCompleted">
      <summary>
Event for callback of LoginAsync Function</summary>
    </member>
    <member name="E:citPOINT.PrefApp.Common.ILoginModel.LogoutCompleted">
      <summary>
Event for callback of LogoutAsync Function</summary>
    </member>
    <member name="E:citPOINT.PrefApp.Common.ILoginModel.GeteNegBaseAddressCompleted">
      <summary>
Event for callback of BaseAddress Function</summary>
    </member>
    <member name="E:citPOINT.PrefApp.Common.ILoginModel.MakeUserOnlineCompleted">
      <summary>
Event for callback of MakeUserOnline Function</summary>
    </member>
    <member name="E:citPOINT.PrefApp.Common.ILoginModel.MakeUserOfflineCompleted">
      <summary>
Event for callback of MakeUserOffline Function</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.ILoginModel.LoginAsync(System.String,System.String)">
      <summary>
Function that execute login service which wrap inside call eNeg RIA Service</summary>
      <param name="UserName">
Value of User Name of User</param>
      <param name="Password">
Value of Password of User</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.ILoginModel.MakeUserOnline(System.Nullable{System.Guid},System.String)">
      <summary>
Function that execute MakeUserOnline service which wrap inside call eNeg RIA Service</summary>
      <returns>
bool that indicates whether operaton complete or not</returns>
      <param name="UserID">
Value of UserID of login User</param>
      <param name="IPAddress">
Value of IPAddress of login User</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.ILoginModel.MakeUserOffline(System.Nullable{System.Guid})">
      <summary>
Function that execute MakeUserOffline service which wrap inside call eNeg RIA Service</summary>
      <returns>
bool that indicates whether operaton complete or not</returns>
      <param name="UserID">
Value of UserID of login User</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.ILoginModel.LogoutAsync(System.Nullable{System.Guid})">
      <summary>
Make user Logged out and update his data in DB with that new state</summary>
      <param name="UserID">
Value of UserID of login User</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.ILoginModel.GeteNegBaseAddressAsync">
      <summary>
Get End Point Used to cal eNeg RIA Service and then split to get Host Base Address</summary>
    </member>
    <member name="P:citPOINT.PrefApp.Common.ILoginModel.HasChanges">
      <summary>
True if mLoginContext.HasChanges is true; otherwise, false</summary>
    </member>
    <member name="P:citPOINT.PrefApp.Common.ILoginModel.IsBusy">
      <summary>
True if either "IsLoading" or "IsSubmitting" is in progress; otherwise, false</summary>
    </member>
    <member name="E:citPOINT.PrefApp.Common.IPreferenceSetsModel.GetMainPreferenceSetsComplete">
      <summary>
Get All Main Preference Sets CallBack --> Lookup table have the following data (My Sets, Organization Sets, Set Store)</summary>
    </member>
    <member name="E:citPOINT.PrefApp.Common.IPreferenceSetsModel.GetPreferenceSetsComplete">
      <summary>
Get All Preferenece Sets CallBack</summary>
    </member>
    <member name="E:citPOINT.PrefApp.Common.IPreferenceSetsModel.SaveChangesComplete">
      <summary>
SaveChangesComplete</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.IPreferenceSetsModel.GetMainPreferenceSetAsync">
      <summary>
Gets All Main Preference Sets Asynchronously -- > Lookup table have the following data (My Sets, Organization Sets, Set Store)</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.IPreferenceSetsModel.GetPreferenceSetAsync">
      <summary>
Gets All Preference Sets Asynchronously</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.IPreferenceSetsModel.RemovePreferenceSet(citPOINT.PrefApp.Data.Web.PreferenceSet)">
      <summary>
Remove PreferenceSet</summary>
      <param name="PrefSet">
</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.IPreferenceSetsModel.AddPreferenceSet(System.Boolean)">
      <summary>
Add new PreferenceSet</summary>
      <returns>
Added PreferenceSet</returns>
      <param name="SetInContext">
to set PreferenceSet object in Context or not</param>
    </member>
    <member name="M:citPOINT.PrefApp.Common.IPreferenceSetsModel.SaveChangesAsync">
      <summary>
Save any pending changes asynchronously</summary>
    </member>
    <member name="M:citPOINT.PrefApp.Common.IPreferenceSetsModel.RejectChanges">
      <summary>
Reject any pending changes</summary>
    </member>
    <member name="P:citPOINT.PrefApp.Common.IPreferenceSetsModel.HasChanges">
      <summary>
True if Domain context Has Changes ;otherwise false</summary>
    </member>
    <member name="P:citPOINT.PrefApp.Common.IPreferenceSetsModel.IsBusy">
      <summary>
True if either "IsLoading" or "IsSubmitting" is in progress; otherwise, false</summary>
    </member>
  </members>
</doc>
